<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EAS.MicroKernel</name>
    </assembly>
    <members>
        <member name="T:EAS.Services.ServiceObject">
            <summary>
            服务组件定义。
            </summary>
            <remarks>
            AgileEAS.NET平台中的服务(组件)基类,非独立接口的服务(组件)请继续自本类。
            </remarks>
        </member>
        <member name="T:EAS.Aspect.AspectObject">
            <summary>
            所有需要接受Aspect管理的类的基类 
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.ServiceType">
            <summary>
            服务类型定义。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceType.#ctor">
            <summary>
            初始化服务类型。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceType.GetServiceLocator">
            <summary>
            取得服务类型的定位器实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceType.GetServiceInfo">
            <summary>
            取得服务类型的服务配置信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Locator">
            <summary>
            定位器。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Config">
            <summary>
            服务类型配置组件。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.AbstractServiceInfo">
            <summary>
            抽像类，服务配置信息基类
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.IServiceInfo">
            <summary>
            服务配置文件。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.IServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.IServiceInfo.Name">
            <summary>
            服务名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.IServiceInfo.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.IServiceInfo.Singleton">
            <summary>
            单例模式？
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.AbstractServiceInfo.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.AbstractServiceInfo.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.AbstractServiceInfo.Singleton">
            <summary>
            单例模式。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.TransientLifestyleManager">
            <summary>
            组件生存管理周期之Transient，组件在使用时创建、使用后销毁。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.AbstractLifestyleManager">
            <summary>
            抽象的生存周期管理类，定义不同组件生存机制的抽象机别。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.ILifecycleManager">
            <summary>
            接口 ILifecycleManager ，组件生命周期管理。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifecycleManager.Init(EAS.Objects.IComponentAdapter,EAS.Objects.IContainer)">
            <summary>
            组件生命周期管理，初始化组件。
            </summary>
            <param name="componentAdapter">组件激励器对象。</param>
            <param name="Container">组件容器对象。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifecycleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifecycleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:EAS.Objects.Lifecycle.ILifecycleManager.Container">
            <summary>
            获取组件生成周期对象所在的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Lifecycle.ILifecycleManager.ComponentAdapter">
            <summary>
            获取组件生成周期对象所在的组件适配器。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Init(EAS.Objects.IComponentAdapter,EAS.Objects.IContainer)">
            <summary>
            组件生命周期管理，初始化组件。
            </summary>
            <param name="componentAdapter">组件激励器对象。</param>
            <param name="container">组件容器对象。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="P:EAS.Objects.Lifecycle.AbstractLifestyleManager.Container">
            <summary>
            获取在组件生存周期中的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Lifecycle.AbstractLifestyleManager.ComponentAdapter">
            <summary>
            获取在组件生存周期中的组件适配器。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.TransientLifestyleManager.#ctor">
            <summary>
            初始化 TransientLifestyleManager 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.TransientLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.PerThreadLifestyleManager">
            <summary>
            组件生存管理周期之Thread，每一个客户端线程拥有单独的一个实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.#ctor">
            <summary>
            初始化 PerThreadLifestyleManager 实例。 
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:EAS.Modularization.ModuleAttribute">
            <summary>
            EAS.NET模块插件属性。
            </summary>
            <remarks>
            提供IModule的标记实现,提供基于属性标记的插件实现。
            </remarks>
        </member>
        <member name="T:EAS.Modularization.AddInAttribute">
            <summary>
            EAS.NET插件属性。
            </summary>
            <remarks>
            提供IAddIn的标记实现,提供基于属性标记的插件实现。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.AddInAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化AddInAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
        </member>
        <member name="M:EAS.Modularization.AddInAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化AddInAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="M:EAS.Modularization.AddInAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化AddInAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="group">模块分组。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Guid">
            <summary>
            模块Guid。
            </summary>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Name">
            <summary>
            模块名称。
            </summary>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Group">
            <summary>
            模块分组。
            </summary>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Description">
            <summary>
            模块说明。
            </summary>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="group">模块分组。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="T:EAS.Modularization.ModuleStartAttribute">
            <summary>
            模块入口方法属性。
            </summary>
            <remarks>
            配合ModuleAttribute实现基于标记的IMoule模块。
            </remarks>
        </member>
        <member name="T:EAS.Modularization.AddInStartAttribute">
            <summary>
            模块入口方法属性。
            </summary>
            <remarks>
            配合 AddInAttribute实现基于标记的IAddIn模块。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.AddInStartAttribute.#ctor">
            <summary>
            初始化ModuleStartAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Modularization.ModuleStartAttribute.#ctor">
            <summary>
            初始化ModuleStartAttribute对象。
            </summary>
        </member>
        <member name="T:EAS.Services.LoggerManager">
            <summary>
            日志记录器辅助类。
            </summary>
        </member>
        <member name="M:EAS.Services.LoggerManager.GetLogger">
            <summary>
            取得日志记录器。
            </summary>
        </member>
        <member name="T:EAS.Messages.MessageExchange">
            <summary>
            消息交换中心。
            </summary>
        </member>
        <member name="T:EAS.Messages.IMessageBus">
            <summary>
            消息总线接口定义。
            </summary>
        </member>
        <member name="M:EAS.Messages.IMessageBus.AddPublisher(System.String)">
            <summary>
            注册发布者。
            </summary>
            <param name="publisher">发布者。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.AddPublisher(System.String,System.String)">
            <summary>
            注册发布者。
            </summary>
            <param name="publisher">发布者。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Publish(System.String,System.Object)">
            <summary>
            发布一条消息到总线/同步。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">发布的消息。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Publish(System.String,System.Object,System.Boolean)">
            <summary>
            发布一条消息到总线。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">发布的消息。</param>
            <param name="async">是否异步发布。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Subscribe(System.Object,System.String,EAS.Messages.MessageNotifyHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Subscribe(System.Object,System.String,System.String,EAS.Messages.MessageNotifyHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Subscribe(System.Object,System.String,System.String,EAS.Messages.MessageNotifyHandler,EAS.Messages.PublisherSstatusChangedHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
            <param name="changedHandler">发布者状态变化委托。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Unsubscribe(System.Object)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Unsubscribe(System.Object,System.String)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.Unsubscribe(System.Object,System.String,System.String)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.IMessageBus.GetSubscribers(System.String)">
            <summary>
            根据主题求出在经订阅者名称清单(friendName)。
            </summary>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.AddNotify(System.Object,EAS.Messages.MessageNotifyHandler)">
            <summary>
            注册消息通知。
            </summary>
            <param name="target">消息接收对象。</param>
            <param name="notifyHandler">消息处理事件。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.ClearNotify">
            <summary>
            清除事件通知。
            </summary>
        </member>
        <member name="M:EAS.Messages.MessageExchange.RemoveNotify(System.Object)">
            <summary>
            删除消息通知。
            </summary>
            <param name="target">消息接收对象。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.SendMessage(System.Object,System.Object)">
            <summary>
            向指定目标发送消息。
            </summary>
            <param name="target">消息接收目标。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.SendMessage(System.Type,System.Object)">
            <summary>
            向指定目标发送消息。
            </summary>
            <param name="T">消息接收目标类型。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.SendMessage``1(System.Object)">
            <summary>
            向指定目标发送消息。
            </summary>
            <typeparam name="T">消息接收目标类型。</typeparam>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Subscribe(System.Object,System.String,EAS.Messages.MessageNotifyHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅者事件。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Unsubscribe(System.Object,System.String)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Unsubscribe(System.Object)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Publish(System.String,System.Object)">
            <summary>
            发布消息。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Publish(System.String,System.Object,System.Boolean)">
            <summary>
            发布一条消息到总线。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">发布的消息。</param>
            <param name="async">是否异步发布。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Dispose">
             <summary>
            释放资源。
             </summary>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Subscribe(System.Object,System.String,System.String,EAS.Messages.MessageNotifyHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Subscribe(System.Object,System.String,System.String,EAS.Messages.MessageNotifyHandler,EAS.Messages.PublisherSstatusChangedHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
            <param name="changedHandler">发布者状态变化委托。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.Unsubscribe(System.Object,System.String,System.String)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.AddPublisher(System.String)">
            <summary>
            注册发布者。
            </summary>
            <param name="publisher">发布者。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.AddPublisher(System.String,System.String)">
            <summary>
            注册发布者。
            </summary>
            <param name="publisher">发布者。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Messages.MessageExchange.GetSubscribers(System.String)">
            <summary>
            根据主题求出在经订阅者名称清单(friendName)。
            </summary>
            <param name="topic">主题。</param>
        </member>
        <member name="P:EAS.Messages.MessageExchange.Singleton">
            <summary>
            MessageExchange唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketSession">
            <summary>
            Socket会话接口。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketEngine">
            <summary>
            Socket引擎，Socket网络通信基础类。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketEngine.SetProtocol``1">
            <summary>
            设置通信协议。
            </summary>
            <typeparam name="T">协议类型。</typeparam>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.Guid">
            <summary>
            通信引擎的全局唯一标识符号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.LocalEndPoint">
            <summary>
            本地IP终节点。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketSession.Send(EAS.Sockets.Messages.IMessage,System.Boolean)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
            <param name="async">是否异步发送，默认为True。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketSession.SendTo(EAS.Sockets.Messages.IMessage,System.Net.EndPoint)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
            <param name="remoteEP">目标地址。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketSession.SendTo(EAS.Sockets.Messages.IMessage,System.Net.EndPoint,System.Boolean)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
            <param name="remoteEP">目标地址。</param>
            <param name="receiveConfirm">是否需要回发确认。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketSession.Close">
            <summary>
            关闭会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketSession.ProtocolType">
            <summary>
            协议类型:Tcp/Udp。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketSession.Error">
            <summary>
            发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketSession.Connected">
            <summary>
            连接后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketSession.Closed">
            <summary>
            断开连接后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketSession.MessageSend">
            <summary>
            消息发送完成之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketSession.MessageReceived">
            <summary>
            接收消息完成之后触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketSession.IPEndPoint">
            <summary>
            远程IP终节点。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.P2pBindRequestHandler">
            <summary>
            Udp端口号消息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.AbstractMessageHandler`1">
            <summary>
            抽象的基础消息处理器。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="T:EAS.Sockets.Messages.IMessageHandler`1">
            <summary>
            网络消息处理程序。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <remarks>
            消息处理程序与具体的消息协议相关联，用于处理特定消息协议业务流程，主要用于客户程序的特定处理，服务请求回应等。 
            </remarks>
        </member>
        <member name="T:EAS.Sockets.Messages.IMessageHandler">
            <summary>
            网络消息处理程序。
            </summary>
            <remarks>
            消息处理程序与具体的消息协议相关联，用于处理特定消息协议业务流程，主要用于客户程序的特定处理，服务请求回应等。 
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.IMessageHandler`1.Process(EAS.Sockets.SocketSession,System.Net.EndPoint,`0)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">消息会话。</param>
            <param name="remoteEndPoint">远程终节点。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.AbstractMessageHandler`1.Process(EAS.Sockets.SocketSession,`0)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">Socket会话。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.AbstractMessageHandler`1.Process(EAS.Sockets.SocketSession,System.Net.EndPoint,`0)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">Socket会话。</param>
            <param name="remoteEndPoint">远程终节点。</param>
            <param name="message">消息。</param>
        </member>
        <member name="T:EAS.Sockets.Messages.P2pSessionRequest">
            <summary>
            Udp端口请求消息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.IInvokeMessage">
            <summary>
            同步调用消息。
            </summary>
            <remarks>
            可用于同步调用的网络消息。
            </remarks>
        </member>
        <member name="T:EAS.Sockets.Messages.IMessage">
            <summary>
            消息接口定义。
            </summary>
            <remarks>
            这里所说的消息是指业务处理的最小单元，而不是传输于网络之间的网络消息。
            </remarks>
        </member>
        <member name="T:EAS.Serialization.ISerializableEx">
            <summary>
            AgileEAS.NET SOA中间件平台所提供的特有的序列化方案接口。
            </summary>
        </member>
        <member name="M:EAS.Serialization.ISerializableEx.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Serialization.ISerializableEx.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.IInvokeMessage.InvokeID">
            <summary>
            调用ID。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pSessionRequest.#ctor">
            <summary>
            初始化P2pSessionRequest对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pSessionRequest.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pSessionRequest.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pSessionRequest.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageStruct.MessageID">
            <summary>
            ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageStruct.Description">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageStruct.MessageType">
            <summary>
            消息类型。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageStruct.HandlerType">
            <summary>
            HandlerType。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageStruct.Handler">
            <summary>
            HandlerType。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketAsyncEx.ResetBuffer">
            <summary>
            重设缓存区。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketAsyncEx.DataBuffer">
            <summary>
            数据缓存。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.SocketPool.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.SocketPool._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.SocketPool.GetSocketPool(System.String,System.Int32)">
            <summary>
            求出一个池对象。
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketPool.Pop(System.String,System.Int32)">
            <summary>
            获取一个SocketTcp对象。
            </summary>
            <param name="host">主机。</param>
            <param name="port">端口。</param>
            <returns>SocketTcp对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketPool.Push(EAS.Sockets.SocketTcp)">
            <summary>
            压入堆栈。
            </summary>
            <param name="item">SocketTcp对象。</param>
        </member>
        <member name="P:EAS.Services.Locators.SocketPool.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.Initialize">
            <summary>
            初始化时间。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.InternalInitialize">
            <summary>
            启动同步。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.AfterTimeSync(System.DateTime)">
            <summary>
            同步后处理。
            </summary>
            <param name="vTime"></param>
        </member>
        <member name="M:EAS.DateTimeClient.StartWorkThread">
            <summary>
            开启校正线程。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.GetCurrentTime">
            <summary>
            取系统时间，同步执行，一个一个的来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.DateTimeClient.UpdateNowTime">
            <summary>
            更新时间|Worker。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.ReGetTime">
            <summary>
            重新同步。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.WriteTimeOK">
            <summary>
            日志记录|OK。
            </summary>
        </member>
        <member name="M:EAS.DateTimeClient.GetServiceBridger">
            <summary>
            求服务桥|只有非本地服务桥，可以执行同步。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.DateTimeClient.GetTimeService">
            <summary>
            求时间服务|即是否可以使用时间进行同步，只能再分布式环境下有效。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.DateTimeClient.TimeFunc">
            <summary>
            时间服务函数。
            </summary>
        </member>
        <member name="P:EAS.DateTimeClient.CurrentTime">
            <summary>
            取系统当前时间。
            </summary>
            <returns>当前系统时间。</returns>
        </member>
        <member name="P:EAS.DateTimeClient.MinTime">
            <summary>
            取系统最小时间。
            </summary>
            <returns>系统最小时间。</returns>
        </member>
        <member name="P:EAS.DateTimeClient.Error">
            <summary>
            同步时异常。
            </summary>
        </member>
        <member name="T:EAS.Data.IQueryableWarp`1">
            <summary>
            结构化数据访问Linq支持包装类。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <remarks>
            为AgileEAS.NET SOA 中间件NoSQL数据访问提供全面的Linq支持。
            </remarks>
        </member>
        <member name="P:EAS.Data.IQueryableWarp`1.Queryable">
            <summary>
            Linq查询对象。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowResult">
            <summary>
            工作流处理结果。
            </summary>
        </member>
        <member name="M:EAS.Workflow.WorkflowResult.#ctor">
            <summary>
            初始化WorkflowResult对象实例。
            </summary>
        </member>
        <member name="M:EAS.Workflow.WorkflowResult.#ctor(System.Guid)">
            <summary>
            初始化WorkflowResult对象实例。
            </summary>
            <param name="instanceId">实例ID。</param>
        </member>
        <member name="M:EAS.Workflow.WorkflowResult.#ctor(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            初始化WorkflowResult对象实例。
            </summary>
            <param name="instanceId">实例ID。</param>
            <param name="submit">充许提交。</param>
            <param name="approval">充许审批。</param>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.FlowID">
            <summary>
            流程ID。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.InstanceId">
            <summary>
            实例ID。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Submit">
            <summary>
            是否充许提交。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Approval">
            <summary>
            是否充许审批。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.DataEntity">
            <summary>
            数据实体。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.TDataEntity">
            <summary>
            实体数据类型。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.DataXML">
            <summary>
            实体数据XML。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.IsComplete">
            <summary>
            是否已经完成。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Cancel">
            <summary>
            是否取消操作。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Error">
            <summary>
            异常信息。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Message">
            <summary>
            异常信息/文本。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Source">
            <summary>
            异常信息/来源。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.TargetSite">
            <summary>
            异常信息/来源。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.StackTrace">
            <summary>
            异常信息/堆栈。
            </summary>
        </member>
        <member name="E:EAS.Workflow.WorkflowResult.Completed">
            <summary>
            完成事件。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceMethodAttribute">
            <summary>
            服务方法属性。
            </summary>
            <remarks>
            标记在服务(组件/接口)的公开方法之上，用于标记本方法为一个服务方法，目前主要用于控制细化的权限。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor(System.String)">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
            <param name="name">名称。</param>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
            <param name="guid">Guid。</param>
            <param name="name">名称。</param>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
            <param name="guid">Guid。</param>
            <param name="name">名称。</param>
            <param name="description">说明。</param>
        </member>
        <member name="P:EAS.Services.ServiceMethodAttribute.Guid">
            <summary>
            Guid。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceMethodAttribute.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceMethodAttribute.Description">
            <summary>
            说明。
            </summary>
        </member>
        <member name="T:EAS.Objects.ClassProvider">
            <summary>
            类/对象提供者，为对象实例化提供的辅助类。
            </summary>
        </member>
        <member name="F:EAS.Objects.ClassProvider.instance">
            <summary>
            内部私有成员，ClassProvider对象的唯一实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ClassProvider.#ctor">
            <summary>
            初始化 ClassProvider 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ClassProvider.ContainsAssembly(System.String)">
            <summary>
            程序集是否已经装入应用程序区域。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>是否包指定的程序集。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssembly(System.String)">
            <summary>
            取得指定名称的程序集。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetType(System.String)">
            <summary>
            获取指定的类型。
            </summary>
            <param name="type">类型信息。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetTypeText(System.String,System.Int32@)">
            <summary>
            求泛型参数。
            </summary>
            <param name="Text2"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetIndex1(System.String)">
            <summary>
            求字符串中第一个[出现的位置。
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetIndex2(System.String)">
            <summary>
            求字符串中第最后]出现的位置。
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetType(System.String,System.String)">
            <summary>
            获取指定的类型。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">类型。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance(System.String,System.String)">
            <summary>
            取得对象实例。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance(System.Type)">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance``1">
            <summary>
            取得对象实例。
            </summary>
            <typeparam name="T">对象类型信息。</typeparam>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance(System.Type,System.Object[])">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <param name="args">对象构造参数。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.InternalGetType(System.String,System.String)">
            <summary>
            获取指定的类型。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">类型。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.InternalContainsAssembly(System.String)">
            <summary>
            程序集是否已经装入应用程序区域。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>是否包指定的程序集。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.InternalGetAssembly(System.String)">
            <summary>
            取得指定名称的程序集。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssemblyFile(System.String,System.String)">
            <summary>
            求程序集文件。
            </summary>
            <param name="assemblyName"></param>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.CreateInstance(System.String,System.String)">
            <summary>
            取得对象实例。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.CreateInstance(System.Type)">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.CreateInstance(System.Type,System.Object[])">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <param name="args">对象构造参数。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssemblyName(System.String)">
            <summary>
            取得程序集名称。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssemblyExtName(System.String)">
            <summary>
            取得程序集扩展名。
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Objects.ClassProvider.Instance">
            <summary>
            ClassProvider对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Loggers.TextLogger">
            <summary>
            文本文件日志记录器。
            </summary>
            <remarks>
            日志输出到文本文件。
            </remarks>
        </member>
        <member name="T:EAS.Loggers.ILogger">
            <summary>
            日志记录开器接口。
            </summary>
        </member>
        <member name="M:EAS.Loggers.ILogger.Info(System.String)">
            <summary>
            记录提示信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Warn(System.String)">
            <summary>
            记录警告信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Debug(System.String)">
            <summary>
            记录调试信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Error(System.String)">
            <summary>
            记录错误信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Error(System.Exception)">
            <summary>
            记录错误信息。
            </summary>
            <param name="exc">异常。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Write(System.String,System.String)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="message">日志信息。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Write(System.String,System.Exception)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="exc">错误信息。</param>
        </member>
        <member name="M:EAS.Loggers.ILogger.Open">
            <summary>
            打开日志记录器。
            </summary>
        </member>
        <member name="M:EAS.Loggers.ILogger.Close">
            <summary>
            关闭日志记录器。
            </summary>
        </member>
        <member name="P:EAS.Loggers.ILogger.Level">
            <summary>
            日志记录级别：0x01|仅错误,0x02|错误和调试信息,0x03|全部。
            </summary>
        </member>
        <member name="M:EAS.Loggers.TextLogger.#ctor">
            <summary>
            初始化TextLogger对象实例。
            </summary>
        </member>
        <member name="M:EAS.Loggers.TextLogger.AppendLineText(System.Text.StringBuilder,System.String)">
            <summary>
            2013-09-30，多线程排列写日志会导致页面转向之后会话和应用结束和重启，shit,Fuck iis。
            </summary>
            <param name="sb"></param>
            <param name="logType"></param>
        </member>
        <member name="M:EAS.Loggers.TextLogger.AppendLineText(System.Text.StringBuilder,EAS.Loggers.LogType)">
            <summary>
            2013-09-30，多线程排列写日志会导致页面转向之后会话和应用结束和重启，shit,Fuck iis。
            </summary>
            <param name="sb"></param>
            <param name="logType"></param>
        </member>
        <member name="P:EAS.Loggers.TextLogger.RootPath">
            <summary>
            日志根目录。
            </summary>
        </member>
        <member name="P:EAS.Loggers.TextLogger.Path">
            <summary>
            日志路径。
            </summary>
        </member>
        <member name="P:EAS.Loggers.TextLogger.Level">
            <summary>
            日志记录级别：0x01|仅错误,0x02|错误和调试信息,0x03|全部。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketServer">
            <summary>
            Socket服务器接口。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.Send(System.Guid,EAS.Sockets.Messages.IMessage)">
            <summary>
            发送消息。
            </summary>
            <param name="target">消息接收方ID(会话ID)。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.AddMessage``1">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.AddMessage``2">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="THandler">消息处理器类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.AbandonSession(System.Guid)">
            <summary>
            关闭指定客户的连接。
            </summary>
            <param name="session">客户Guid。</param>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.TcpPort">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.Sessions">
            <summary>
            客户端会话集合。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.ClientCount">
            <summary>
            客户端连接数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.ServerState">
            <summary>
            服务器状态。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.SessionStarted">
            <summary>
            注册了一个新会话后发生。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.SessionAbandoned">
            <summary>
            某一个会话结束后发生。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.Error">
            <summary>
            发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.ServerStarted">
            <summary>
            服务器启动后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.ServerStopped">
            <summary>
            服务器停止后触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.Logger">
            <summary>
            日志记录。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.ErrorMessage">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.ErrorMessage.#ctor">
            <summary>
            初始化ErrorMessage对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.ErrorMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.ErrorMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.ErrorMessage.Error">
            <summary>
            错误信息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.ErrorMessage.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="T:EAS.Aspect.PointcutType">
            <summary>
            横切点类型枚举。
            </summary>
        </member>
        <member name="F:EAS.Aspect.PointcutType.Method">
            <summary>
            方法执行时切入。
            </summary>
        </member>
        <member name="F:EAS.Aspect.PointcutType.Construction">
            <summary>
            对象构造时切入。
            </summary>
        </member>
        <member name="T:EAS.Aspect.CrosscutInfo">
            <summary>
            横切对象配置信息。
            </summary>
        </member>
        <member name="P:EAS.Aspect.CrosscutInfo.ClassList">
            <summary>
            类匹配。
            </summary>
        </member>
        <member name="P:EAS.Aspect.CrosscutInfo.PointcutList">
            <summary>
            切点定义。
            </summary>
        </member>
        <member name="T:EAS.Aspect.AspectInfo">
            <summary>
            方面的配置定义。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.Assembly">
            <summary>
            Aspect程序集。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.Type">
            <summary>
            Aspect类型。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.PointcutValue">
            <summary>
            切点位置值。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.AllowConstruction">
            <summary>
            允许构造器切入。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.AllowMethod">
            <summary>
            允许方法切入。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.CrosscutList">
            <summary>
            类匹配。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Bus.SocketBus">
            <summary>
            基于Socket/Tcp连接的消息总线。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.#ctor">
            <summary>
            初始化SocketBus对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.#ctor(System.String)">
            <summary>
            初始化SocketBus对象实例。
            </summary>
            <param name="url">总线url地址。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Publish(System.String,System.Object)">
            <summary>
            发布一条消息到总线/同步。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">发布的消息。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Publish(System.String,System.Object,System.Boolean)">
            <summary>
            发布一条消息到总线。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">发布的消息。</param>
            <param name="async">是否异步发布。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Subscribe(System.Object,System.String,EAS.Messages.MessageNotifyHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Subscribe(System.Object,System.String,System.String,EAS.Messages.MessageNotifyHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Subscribe(System.Object,System.String,System.String,EAS.Messages.MessageNotifyHandler,EAS.Messages.PublisherSstatusChangedHandler)">
            <summary>
            订阅消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
            <param name="notifyHandler">订阅通知。</param>
            <param name="changedHandler">发布者状态变化委托。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Unsubscribe(System.Object,System.String,System.String)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="friendName">订阅者名称，用于处理离线订阅。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Unsubscribe(System.Object,System.String)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Unsubscribe(System.Object)">
            <summary>
            退订消息。
            </summary>
            <param name="subscriber">订阅者。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Dispose">
             <summary>
            释放资源。
             </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.ConnectHeartbeat">
            <summary>
            心跳动作。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.MessageHeartbeat">
            <summary>
            消息心跳。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.Notice(EAS.Messages.QueueMessage)">
            <summary>
            通知消息。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.AddPublisher(System.String)">
            <summary>
            注册发布者。
            </summary>
            <param name="publisher">发布者。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.AddPublisher(System.String,System.String)">
            <summary>
            注册发布者。
            </summary>
            <param name="publisher">发布者。</param>
            <param name="topic">主题。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SocketBus.GetSubscribers(System.String)">
            <summary>
            根据主题求出在经订阅者名称清单(friendName)。
            </summary>
            <param name="topic">主题。</param>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.SocketTcp">
            <summary>
            Socket对象。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.Url">
            <summary>
            Url地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.ConnectionTimeout">
            <summary>
            连接超时。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.CommandTimeout">
            <summary>
            命令超时。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.IsOnLine">
            <summary>
            是否在线。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.AsyncSend">
            <summary>
            默认是否异步发布消息，默认同步发布。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SocketBus.RetryCount">
            <summary>
            异步发送失败重试次数，默认值3。
            </summary>
        </member>
        <member name="T:EAS.Script.ScriptEngine">
            <summary>
            C#脚本引擎。
            </summary>
        </member>
        <member name="M:EAS.Script.ScriptEngine.GetDefaultScript">
            <summary>
            获得默认的脚本参考。
            </summary>
            <returns>教本示例。</returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.Create(System.String)">
            <summary>
            根据代码创建脚本引擎。
            </summary>
            <param name="scriptCode">脚本代码。</param>
            <returns>脚本引擎实例。</returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.Create(System.String,System.Boolean)">
            <summary>
            根据代码创建脚本引擎。
            </summary>
            <param name="scriptCode">脚本代码。</param>
            <param name="ignoreErrors">忽略编译错误。</param>
            <returns>脚本引擎实例。</returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.#ctor(System.String)">
            <summary>
            使用脚本代码初始化ScriptEngine对象实例。
            </summary>
            <param name="scriptCode">脚本代码。</param>
        </member>
        <member name="M:EAS.Script.ScriptEngine.#ctor(System.String,System.Boolean)">
            <summary>
            使用脚本代码初始化ScriptEngine对象实例。
            </summary>
            <param name="scriptCode">脚本代码。</param>
            <param name="ignoreErrors">忽略编译错误。</param>
        </member>
        <member name="M:EAS.Script.ScriptEngine.Execute(System.Object[])">
            <summary>
            执行脚本/默认入口。
            </summary>
            <returns>返回值。</returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.Invoke(System.String,System.Object[])">
            <summary>
            调用C#脚本函数。
            </summary>
            <param name="method">方法名称。</param>
            <param name="args">调用参数。</param>
            <returns>lua脚本执行结果。</returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.Invoke(System.String,System.String,System.Object[])">
            <summary>
            调用C#脚本函数。
            </summary>
            <param name="type">对象类型。</param>
            <param name="method">方法名称。</param>
            <param name="args">调用参数。</param>
            <returns>lua脚本执行结果。</returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.GetMethodContext(System.String,System.String)">
            <summary>
            创建快速调用委托以及相关参数。
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="M:EAS.Script.ScriptEngine.CreateAssembly">
            <summary>
            The actual workhorse of the script engine.  This function will
            create the assembly in memmory and return it to be used
            </summary>		
        </member>
        <member name="M:EAS.Script.ScriptEngine.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Script.ScriptEngine.SeachDotNetAssemblyFile(System.String)">
            <summary>
            搜苏程序集。
            </summary>
            <param name="dotNetAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.SeachDotNetAssemblyFile(System.String,System.String)">
            <summary>
            搜索程序集。
            </summary>
            <param name="dotNetAssembly"></param>
            <param name="vDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Script.ScriptEngine.GetBuiltInReferences">
            <summary>
            求内置引用程序集。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Script.ScriptEngine.CompileException">
            <summary>
            编译错误。
            </summary>
        </member>
        <member name="P:EAS.Script.ScriptEngine.InvodeContext.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="P:EAS.Script.ScriptEngine.InvodeContext.Name">
            <summary>
            方法。
            </summary>
        </member>
        <member name="P:EAS.Script.ScriptEngine.InvodeContext.Method">
            <summary>
            方法对象。
            </summary>
        </member>
        <member name="P:EAS.Script.ScriptEngine.InvodeContext.Handler">
            <summary>
            委托。
            </summary>
        </member>
        <member name="P:EAS.Script.ScriptEngine.InvodeContext.Instance">
            <summary>
            实例。
            </summary>
        </member>
        <member name="T:EAS.ObjectExtensions">
            <summary>
            对象扩展定义。
            </summary>
        </member>
        <member name="M:EAS.ObjectExtensions.IsNull(System.Object)">
            <summary>
            判断对象是否为空。
            </summary>
            <param name="value">对象。</param>
            <returns>为空对象返回true，否则返回false。</returns>
        </member>
        <member name="T:EAS.XHashCode">
            <summary>
            扩展HashCode。
            </summary>
        </member>
        <member name="M:EAS.XHashCode.GetXHashCode(System.String)">
            <summary>
            求字符串的扩展HashCode。
            </summary>
            <param name="text">字符串。</param>
            <returns>返回编码。</returns>
        </member>
        <member name="M:EAS.XHashCode.GetXHashCode(System.Byte[])">
            <summary>
            求字符串的扩展HashCode。
            </summary>
            <param name="buffer">字节流。</param>
            <returns>返回编码。</returns>
        </member>
        <member name="M:EAS.XHashCode.GetXHashCode(System.Guid)">
            <summary>
            求GUID的扩展HashCode。
            </summary>
            <param name="guid">Guid对象。</param>
            <returns>返回编码。</returns>
        </member>
        <member name="T:EAS.Hosting.FormDesignApp">
            <summary>
            界面设计Application引导类。
            </summary>
        </member>
        <member name="M:EAS.Hosting.FormDesignApp.Start">
            <summary>
            启动应用程序。
            </summary>
        </member>
        <member name="T:EAS.Workflow.IWorkflowRuntime">
            <summary>
            工作流运行时环境接口。
            </summary>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.CreateWorkflow(System.Object,EAS.Workflow.IWorkflowDataEntity)">
            <summary>
            创建工作流实例。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <param name="wfData">工作流业务数据。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Submit(System.Object)">
            <summary>
            申请提交。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Submit(System.Object,EAS.Workflow.IWorkflowDataEntity)">
            <summary>
            申请提交。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <param name="wfData">工作流业务数据。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Approval(System.Object)">
            <summary>
            审批提交。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Approval(System.Object,EAS.Workflow.IWorkflowDataEntity)">
            <summary>
            审批提交。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <param name="wfData">工作流业务数据。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Save(System.Guid,EAS.Workflow.IWorkflowDataEntity)">
            <summary>
            保存流程内容/必须是已存在流程。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="wfData">业务数据。</param>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Submit(System.Guid,System.String,System.String)">
            <summary>
            申请提交。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="loginID">提交账号。</param>
            <param name="comment">提交原因。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Submit(System.Guid,EAS.Workflow.IWorkflowDataEntity,System.String,System.String)">
            <summary>
            申请提交。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="wfData">业务数据。</param>
            <param name="loginID">提交账号。</param>
            <param name="comment">提交原因。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Approval(System.Guid,System.String,System.Boolean,System.String)">
            <summary>
            审批提交。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="loginID">审批账号。</param>
            <param name="result">审批结果。</param>
            <param name="comment">审批意见。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Approval(System.Guid,EAS.Workflow.IWorkflowDataEntity,System.String,System.Boolean,System.String)">
            <summary>
            审批提交。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="wfData">业务数据。</param>
            <param name="loginID">审批账号。</param>
            <param name="result">审批结果。</param>
            <param name="comment">审批意见。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.GetWorkFlowResult(System.Guid)">
            <summary>
            获取流程实例当前处理结果。
            </summary>
            <param name="instanceID">实例ID。</param>
            <returns>流程处理结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.GetWorkflowDataEntity(System.Guid)">
            <summary>
            获取流程实例的数据对象。
            </summary>
            <param name="instanceID">实例ID。</param>
            <returns>流程处理结果。</returns>
        </member>
        <member name="T:EAS.Security.IPermissionChecker">
            <summary>
            权限检查接口。
            </summary>
        </member>
        <member name="M:EAS.Security.IPermissionChecker.Demand(System.Guid,System.String)">
            <summary>
            验证模块执行所需要的权限。
            </summary>
            <param name="module">模块。</param>
            <param name="loginID">账号。</param>
            <returns>通过权限检查返回true，否则返回false。</returns>
        </member>
        <member name="T:EAS.Objects.XmlClassLoader">
            <summary>
            xml配置类加载器。
            </summary>
        </member>
        <member name="T:EAS.Objects.IClassLoader">
            <summary>
            IOC容器类载器接口。
            </summary>
            <remarks>
            本接口用于IOC容器的初始化类装载，以及发生类型未加载时的处理机制。
            </remarks>
        </member>
        <member name="M:EAS.Objects.IClassLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.IClassLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="M:EAS.Objects.XmlClassLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.XmlClassLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerState">
            <summary>
            表示服务器的当前状态。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Initialing">
            <summary>
            正在初始化。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Inited">
            <summary>
            初始化完成。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Ready">
            <summary>
            准备就绪。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Running">
            <summary>
            服务器正在运行。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Stoped">
            <summary>
            服务器已经停止。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.RequestMessageAttribute">
            <summary>
            请示消息属性。
            </summary>
            <remarks>
            为AgileEAS.NET SOA平台网络通信框架提供的请示响应消息标记。
            </remarks>
        </member>
        <member name="T:EAS.Sockets.IO.MessageBuffer">
            <summary>
            消息缓存。
            </summary>
            <remarks>
            用于Socket存储接收的字节流用于协议解析。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.IO.MessageBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入接收的数据到NetPacketStream。
            </summary>
            <param name="buffer">接收数据。</param>
            <param name="offset">缓存区便宜量。</param>
            <param name="count">接收总数。</param>
        </member>
        <member name="M:EAS.Sockets.IO.MessageBuffer.EnsureCapacity(System.Int32)">
            <summary>
            缓存区扩容。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EAS.Sockets.IO.MessageBuffer.ToArray">
            <summary>
            转换为字节流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.IO.MessageBuffer.SetPosition(System.Int32)">
            <summary>
            设置偏移量。
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:EAS.Sockets.IO.MessageBuffer.Remove">
            <summary>
            剔除已读取的报文。
            </summary>
            <remarks>
            1.删除m_Position之前的记录，2.把m_Position之后的数据搬到m_buffer开始位置。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.IO.MessageBuffer.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EAS.Sockets.IO.MessageBuffer.Length">
            <summary>
            数据长度。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceUtils">
            <summary>
            SOA架构服务辅助类，用于统计SOA分布式服务调用统计类。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceUtils.StartCall">
            <summary>
            开始调用。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceUtils.EndCall">
            <summary>
            结束调用。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceUtils.Singleton">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceUtils.Calls">
            <summary>
            服务调用计数。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceUtils.ConcurrentCalls">
            <summary>
            在线并发。
            </summary>
        </member>
        <member name="T:EAS.Services.ConnectException">
            <summary>
            服务器连接错误。
            </summary>
        </member>
        <member name="M:EAS.Services.ConnectException.#ctor">
            <summary>
            初始化ConnectException对象实例。
            </summary>
        </member>
        <member name="M:EAS.Services.ConnectException.#ctor(System.String)">
            <summary>
            初始化ConnectException实例。
            </summary>
            <param name="message">错误消息。</param>
        </member>
        <member name="M:EAS.Services.ConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 NoComponentException 类的新实例。
            </summary>
            <param name="info">SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">StreamingContext，它包含有关源或目标的上下文信息</param>
        </member>
        <!-- 对于成员“T:EAS.Collections.DictionaryWarp`2”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Collections.DictionaryWarp`2.#ctor">
            <summary>
            初始化DictionaryWarp。
            </summary>
        </member>
        <member name="M:EAS.Collections.DictionaryWarp`2.#ctor(System.Int32)">
            <summary>
            初始化DictionaryWarp对象实例。
            </summary>
            <param name="capacity">容量。</param>
        </member>
        <member name="M:EAS.Collections.DictionaryWarp`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
             <summary>
             初始化DictionaryWarp。
             </summary>
            <param name="dic">字典。</param>
        </member>
        <member name="M:EAS.Collections.DictionaryWarp`2.GetDictionary">
            <summary>
            返回原始记录。
            </summary>
            <returns>字典。</returns>
        </member>
        <member name="M:EAS.Collections.DictionaryWarp`2.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Collections.DictionaryWarp`2.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Collections.DictionaryWarp`2.KeyReader">
            <summary>
            读取方法、反序列化方法。
            </summary>
        </member>
        <member name="P:EAS.Collections.DictionaryWarp`2.ValueReader">
            <summary>
            读取方法、反序列化方法。
            </summary>
        </member>
        <member name="P:EAS.Collections.DictionaryWarp`2.KeyWriter">
            <summary>
            写入方法，完成序列化。
            </summary>
        </member>
        <member name="P:EAS.Collections.DictionaryWarp`2.ValueWriter">
            <summary>
            写入方法，完成序列化。
            </summary>
        </member>
        <member name="P:EAS.Collections.DictionaryWarp`2.Items">
            <summary>
            Key集合/仅在Matrix的XML时使用。
            </summary>
        </member>
        <!-- 对于成员“T:EAS.Collections.ListWarp`1”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Collections.ListWarp`1.#ctor">
            <summary>
            初始化ListRoot。
            </summary>
        </member>
        <member name="M:EAS.Collections.ListWarp`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            集合。
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:EAS.Collections.ListWarp`1.GetList">
            <summary>
            返回集合记录。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Collections.ListWarp`1.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Collections.ListWarp`1.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Collections.ListWarp`1.Items">
            <summary>
            集合返回值。
            </summary>
        </member>
        <member name="P:EAS.Collections.ListWarp`1.Reader">
            <summary>
            读取方法、反序列化方法。
            </summary>
        </member>
        <member name="P:EAS.Collections.ListWarp`1.Writer">
            <summary>
            读取方法、反序列化方法。
            </summary>
        </member>
        <member name="T:EAS.Context.ContextHelper">
             <summary> 
             系统上下文文管理帮助类。 
             </summary> 
            <remarks>
             为系统上下文对象管理与业务支持。
            </remarks>
        </member>
        <member name="M:EAS.Context.ContextHelper.#ctor">
            <summary>
            初始化类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Context.ContextHelper.AddContext(System.String,EAS.Context.IContext)">
            <summary>
            注册上下文对象。
            </summary>
            <param name="name">键。</param>
            <param name="context">上下文对象。</param>
        </member>
        <member name="M:EAS.Context.ContextHelper.Clear">
            <summary>
            清空上下文对象。
            </summary>
        </member>
        <member name="M:EAS.Context.ContextHelper.GetContext(System.String)">
            <summary>
            根据名获取上下文对象。
            </summary>
            <param name="name">名称。</param>
            <returns>上下文对象。</returns>
        </member>
        <member name="M:EAS.Context.ContextHelper.GetContext">
            <summary>
            获取默认的上下文对象。
            </summary>
            <returns>上下文对象。</returns>
        </member>
        <member name="T:EAS.Security.Compressor">
            <summary>
            数据压缩。
            </summary>
        </member>
        <member name="M:EAS.Security.Compressor.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="buffer">待压缩的数据。</param>
            <returns>完成压缩的数据。</returns>
        </member>
        <member name="M:EAS.Security.Compressor.Decompress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="buffer">待压缩的数据。</param>
            <returns>完成压缩的数据。</returns>
        </member>
        <member name="T:EAS.Environment">
            <summary>
            提供有关当前环境和平台的信息以及操作它们的方法。此类不能被继承。
            </summary>
        </member>
        <member name="M:EAS.Environment.AppendPrivateBinPath(System.String,System.String)">
            <summary>
            追加组件搜索目录。
            </summary>
            <param name="privatepath">私有目录。</param>
            <param name="directory">追加目录。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Environment.ConfigTimeFunc(System.Func{System.DateTime})">
            <summary>
            配置系统时间函数。
            </summary>
            <param name="timeFunc">时间函数。</param>
        </member>
        <member name="M:EAS.Environment.GetHostName">
            <summary>
            取计算机名称。
            </summary>
            <returns>计算机名称。</returns>
        </member>
        <member name="M:EAS.Environment.GetIPAddress">
            <summary>
            取本机IP地址。
            </summary>
            <returns>IP地址。</returns>
        </member>
        <member name="M:EAS.Environment.GetMacAddress">
            <summary>
            取MAC地址。
            </summary>
            <returns>MAC地址。</returns>
        </member>
        <member name="M:EAS.Environment.SetAddInPrivateBinPath">
            <summary>
            设置插件模式的PrivateBinPath。
            </summary>
        </member>
        <member name="M:EAS.Environment.SetAddInPrivateBinPath(System.String)">
            <summary>
            设置插件模式的PrivateBinPath。
            </summary>
            <param name="directory">新增加的PrivateBinPath目录。</param>
        </member>
        <member name="M:EAS.Environment.SetAddInPrivateBinPath(System.Collections.Generic.List{System.String})">
            <summary>
            设置插件模式的PrivateBinPath。
            </summary>
        </member>
        <member name="P:EAS.Environment.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Environment.BaseDirectory">
            <summary>
            求应用程序的基础路径。
            </summary>
            <returns>应用程序基础路径。</returns>
        </member>
        <member name="P:EAS.Environment.BinDirectory">
            <summary>
            求应用程序的Bin路径，Web和SOA程序的运行程序集目录。
            </summary>
            <returns>求应用程序的Bin。</returns>
        </member>
        <member name="P:EAS.Environment.ComponentDirectories">
            <summary>
            组件目录。
            </summary>
        </member>
        <member name="P:EAS.Environment.AssemblyDirectories">
            <summary>
            程序集搜索路径。
            </summary>
        </member>
        <member name="P:EAS.Environment.HashCode">
            <summary>
            求系统唯一哈希编码。
            </summary>
            <returns>系统关键信息的哈希编码。</returns>
        </member>
        <member name="P:EAS.Environment.NowTime">
            <summary>
            求系统时间。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Bus.AddPublisherMessage">
            <summary>
            发布者注册消息，用于实现发布者注册。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.AddPublisherMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.AddPublisherMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Bus.AddPublisherMessage.Publisher">
            <summary>
            发布者。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.AddPublisherMessage.Topic">
            <summary>
            主题。
            </summary>
        </member>
        <member name="T:EAS.Messages.MessageNotifyHandler">
            <summary>
            消息通知委托。
            </summary>
            <param name="Message">消息对象。</param>
        </member>
        <member name="T:EAS.Messages.PublisherSstatusChangedHandler">
            <summary>
             发布者状态变化委托。
            </summary>
            <param name="args">发布者状态变化参数。</param>
        </member>
        <member name="T:EAS.Data.Binding.IDataBind">
            <summary>
            数据绑定接口。
            </summary>
            <remarks>
            用于定义数据实体同界面的交互绑定机制。
            </remarks>
        </member>
        <member name="E:EAS.Data.Binding.IDataBind.DataEntityChanged">
            <summary>
            当前数据对象发生改变时触发该事件。
            </summary>
        </member>
        <member name="P:EAS.Data.Binding.IDataBind.DataEntity">
            <summary>
            获取或者设置绑定目标对象的数据实体。
            </summary>
        </member>
        <member name="P:EAS.Data.Binding.IDataBind.TDataEntity">
            <summary>
            获取绑定目标对象的数据实体类型。
            </summary>
        </member>
        <member name="T:EAS.StringExtension">
            <summary>
            字符串扩展。
            </summary>
        </member>
        <member name="M:EAS.StringExtension.ToSBC(System.String)">
            <summary>
            Transfer full-function (SBC case)，Any string Full-width strings。
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            Em space is 12288, half-width spaces to 32，Other characters, half-width (33-126) and (65281-65374) of the correspondence is: difference of 65248。
            </remarks>
        </member>
        <member name="M:EAS.StringExtension.ToSBC(System.Char)">
            <summary>
            Transfer full-function (SBC case)，Any string Full-width strings。
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            Em space is 12288, half-width spaces to 32，Other characters, half-width (33-126) and (65281-65374) of the correspondence is: difference of 65248。
            </remarks>
        </member>
        <member name="M:EAS.StringExtension.ToDBC(System.String)">
            <summary>
            Turn/half angle function (DBC case)，Random string，Half/full width strings。
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            12288/full-width spaces, half-width spaces to 32,Other characters, half-width/(33-126) and (65281-65374) of the correspondence is: difference of 65248。
            </remarks>
        </member>
        <member name="M:EAS.StringExtension.ToDBC(System.Char)">
            <summary>
            Turn/half angle function (DBC case)，Random string，Half/full width strings。
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            12288/full-width spaces, half-width spaces to 32,Other characters, half-width/(33-126) and (65281-65374) of the correspondence is: difference of 65248。
            </remarks>
        </member>
        <member name="M:EAS.StringExtension.IsEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsInteger(System.String)">
            <summary>
            判断字符串是否为整型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsPositiveInteger(System.String)">
            <summary>
            判断字符串是否为正整型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsPositiveInt64(System.String)">
            <summary>
            判断字符串是否为正整型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsNegativeInteger(System.String)">
            <summary>
            判断字符串是否为负整数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsNegativeInt64(System.String)">
            <summary>
            判断字符串是否为负整数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsFloat(System.String)">
            <summary>
            判断字符串是否为浮点型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsDecimal(System.String)">
            <summary>
            判断字符串是否为十进制数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsPositiveNumber(System.String)">
            <summary>
            判断字符串是否为正数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsNegativeNumber(System.String)">
            <summary>
            判断字符串是否为负数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.ToInt(System.String)">
            <summary>
            将字符串转化为整型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>整型值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToInt64(System.String)">
            <summary>
            将字符串转化为整型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>整型值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToDouble(System.String)">
            <summary>
            将字符串转化为Double类型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>Double值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToDecimal(System.String)">
            <summary>
            将字符串转化为Decimal类型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>Double值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToDateTime(System.String)">
            <summary>
            将字符串转化为时间类型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>时间，转化失败默认返回最小时间</returns>
        </member>
        <member name="M:EAS.StringExtension.ToFloat(System.String)">
            <summary>
            将字符串转化为浮点型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>浮点值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToBoolean(System.String)">
            <summary>
            将字符串转化为布尔型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>布尔值，转化失败默认返回false</returns>
        </member>
        <member name="F:EAS.StringExtension.strChineseFirstPY">
            <summary>
            汉字拼音首字母列表 本列表包含了20901个汉字,用于配合 ToPinYin 函数使用,本表收录的字符的Unicode编码范围为19968至40869
            </summary>
        </member>
        <member name="M:EAS.StringExtension.ToPinYin(System.String)">
            <summary>
            获得一个字符串的汉语拼音码,XDesigner编制
            </summary>
            <param name="s">字符串</param>
            <returns>汉语拼音码,该字符串只包含大写的英文字母</returns>
        </member>
        <member name="M:EAS.StringExtension.ToWubi(System.String)">
            <summary>
            获得一个字符串的五笔简码。
            </summary>
            <param name="s">字符串</param>
            <returns>五笔输入码/首码。</returns>
        </member>
        <member name="M:EAS.StringExtension.GetMD5Code(System.String)">
            <summary>
            求字符串的Md5整数码，即对Md5结果的二次运算所得。
            </summary>
            <param name="vText">输入字符串。</param>
            <returns>Md5整数码。</returns>
        </member>
        <member name="M:EAS.StringExtension.StartsWithEx(System.String,System.String)">
            <summary>
            StartsWith扩展，实现类型sql的皮配功能。
            </summary>
            <param name="s"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.StringExtension.StartsWithEx(System.String,System.String,System.StringComparison)">
            <summary>
            StartsWith扩展，实现类型sql的皮配功能。
            </summary>
            <param name="s"></param>
            <param name="input"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.StringExtension.StartsWithEx(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            StartsWith扩展，实现类型sql的皮配功能。
            </summary>
            <param name="s"></param>
            <param name="input"></param>
            <param name="ignoreCase"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.StringExtension.GetDirectoryPath(System.String)">
            <summary>
            求目录|去重路径最后的分割符。
            </summary>
            <param name="path">目录。</param>
            <returns>去重路径最后的分割符路径。</returns>
        </member>
        <member name="T:EAS.Sessions.ISession">
            <summary>
            平台会话，用于定义一个客户/登录/终端与平台的一次/段交互。
            </summary>
        </member>
        <member name="M:EAS.Sessions.ISession.Start(System.Object[])">
            <summary>
            开始 Client 和 Server 之间的会话。
            </summary>
            <param name="parameters">会话参数。</param>
        </member>
        <member name="M:EAS.Sessions.ISession.Abandon">
            <summary>
            中止 Client 和 Server 之间的会话。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.ID">
            <summary>
            会话GuID。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.DataSet">
            <summary>
            会话帐套。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.Client">
            <summary>
            获取当前会话中的 IClient。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.IPAddress">
            <summary>
            会话IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.MacAddress">
            <summary>
            会话MAC地址。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.DotNetRemotingInfo">
            <summary>
            Net Remoting 服务配置信息
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingInfo.#ctor">
            <summary>
            初始化DotNetRemotingInfo实例。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingInfo.GetHashCode">
            <summary>
            已重写，获取哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="P:EAS.Services.Locators.DotNetRemotingInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="T:EAS.Loggers.LogType">
            <summary>
            日志类型。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogType.Info">
            <summary>
            提示。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogType.Warn">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogType.Debug">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogType.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="T:EAS.Loggers.LogLevel">
            <summary>
            日志记录级别。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogLevel.OnlyError">
            <summary>
            仅错误。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogLevel.ErrorAndDebug">
            <summary>
            错误和调式信息。
            </summary>
        </member>
        <member name="F:EAS.Loggers.LogLevel.All">
            <summary>
            全部错误。
            </summary>
        </member>
        <member name="T:EAS.Loggers.Error">
            <summary>
            定义错误对象。
            </summary>
            <remarks>
            该对象包含了一个System.Exception对象中的所有的信息以及其他的信息。
            </remarks>
        </member>
        <member name="M:EAS.Loggers.Error.#ctor">
            <summary>
            初始化Error 类的实例。
            </summary>
        </member>
        <member name="M:EAS.Loggers.Error.#ctor(System.Exception)">
            <summary>
            使用指定的异常对象初始化 Error 类的实例，发生时间使用当前时间。
            </summary>
            <param name="exception">新错误对象实例对应的异常对象引用。</param>
        </member>
        <member name="M:EAS.Loggers.Error.#ctor(System.String)">
            <summary>
            从指定的“.xml”文件中加载 Error 对象。
            </summary>
            <param name="fileName">包含 Error 对象序列化信息的文件。</param>
        </member>
        <member name="M:EAS.Loggers.Error.#ctor(System.IO.FileStream)">
            <summary>
            从指定的“.xml”文件流中加载 Error 对象。
            </summary>
            <param name="stream">包含 Error 对象序列化信息的二进制文件流。</param>
        </member>
        <member name="M:EAS.Loggers.Error.SaveFile(System.String)">
            <summary>
            将当前 Error 对象的信息写到错误日志文件（扩展名称.xml）中。
            </summary>
            <param name="path">要保存的异常对象的路径，不能为空引用或者空字符串，如果不存在，则创建该路径。</param>
            <returns>返回已经保存的异常的.xml文件的名称。</returns>
            <exception cref="T:System.InvalidOperationException">无法生成文件名称。</exception>
            <remarks>该方法会创建一个新的文件名称，并将信息写入到该文件中，新的文件名称不会和现有的文件重名。所有的错误日志文件保存在安装目录下的“Errors”文件夹中。</remarks>
        </member>
        <member name="M:EAS.Loggers.Error.ToString">
            <summary>
            已重写。返回错误对象的详细信息字符串。等效于 ToString(false)。
            </summary>
            <returns>返回 Error 的详细信息字符串。</returns>
        </member>
        <member name="M:EAS.Loggers.Error.ToString(System.Boolean)">
            <summary>
            返回错误对象的详细信息字符串。
            </summary>
            <param name="html">指示字符串是否应该是 html 格式的，以便在 Web 页面中显示。</param>
            <returns>返回 Error 的详细信息字符串。</returns>
        </member>
        <member name="P:EAS.Loggers.Error.ExceptionTime">
            <summary>
            获取异常发生的时间。
            </summary>
        </member>
        <member name="P:EAS.Loggers.Error.ExceptionType">
            <summary>
            获取异常类型。
            </summary>		
        </member>
        <member name="P:EAS.Loggers.Error.ErrorType">
            <summary>
            获取异常类型。
            </summary>
        </member>
        <member name="P:EAS.Loggers.Error.Message">
            <summary>
            获取异常的错误信息。
            </summary>
        </member>
        <member name="P:EAS.Loggers.Error.StackTrace">
            <summary>
            获取异常的堆栈跟踪信息。
            </summary>
        </member>
        <member name="P:EAS.Loggers.Error.TargetSite">
            <summary>
            获取异常的引发方法。
            </summary>
        </member>
        <member name="P:EAS.Loggers.Error.Source">
            <summary>
            获取引发异常的对象名称或者应用程序名称。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketClient">
             <summary>
            Tcp客户端。
             </summary>
        </member>
        <member name="T:EAS.Sockets.SocketTcp">
             <summary>
            Tcp客户端。
             </summary>
        </member>
        <member name="T:EAS.Sockets.SocketSession">
            <summary>
            网络会话上下文，在服务器表示一个客户端连接上下文。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketSession.#ctor">
            <summary>
            初始化NetSession对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SetProtocol``1">
            <summary>
            设置通信协议。
            </summary>
            <typeparam name="T">协议类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SetProtocol(EAS.Sockets.IProtocol)">
            <summary>
            设置协议。
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.OnError(EAS.Sockets.ErrorEventArgs)">
            <summary>
            引发Error事件。
            </summary>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.OnMessageSend(EAS.Sockets.Messages.IMessage)">
            <summary>
            引发MessageSend事件。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.OnMessageReceived(EAS.Sockets.Messages.IMessage)">
            <summary>
            引发MessageReceived事件。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.HandleMessage(EAS.Sockets.Messages.IMessage,System.Net.EndPoint)">
            <summary>
            调用消息处理器，执行消息处理。
            </summary>
            <param name="message">消息对象。</param>
            <param name="remoteEndPoint">远程终节点。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.Equals(System.Object)">
            <summary>
            与NetSession对象比较。
            </summary>
            <param name="obj">NetSession对象。</param>
            <returns>相等返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketSession.GetHashCode">
            <summary>
            已重写，获取NetSession的哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketSession.BeginTcp">
            <summary>
            开始接收数据。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketSession.ProcessTcpReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接收到数据。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SendDataAsync(EAS.Sockets.ByteArraySegment)">
            <summary>
            发送消息报文/数据段/协议解析器调用|异步。
            </summary>
            <param name="vSegment">消息对象。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SendData(EAS.Sockets.ByteArraySegment)">
            <summary>
            发送消息报文/数据段/协议解析器调用|异步。
            </summary>
            <param name="vSegment">消息对象。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.Close">
            <summary>
            终止会话。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketSession.Send(EAS.Sockets.Messages.IMessage,System.Boolean)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
            <param name="async">是否异步发送，默认为True。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.OnConnect(System.EventArgs)">
            <summary>
            引发Connected事件。
            </summary>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.OnClosed(System.EventArgs)">
            <summary>
            引发Closed事件。
            </summary>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SendTo(EAS.Sockets.Messages.IMessage,System.Net.EndPoint)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
            <param name="remoteEP">目标地址。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SendTo(EAS.Sockets.Messages.IMessage,System.Net.EndPoint,System.Boolean)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
            <param name="remoteEP">目标地址。</param>
            <param name="receiveConfirm">是否需要回发确认。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.BeginUdp">
            <summary>
            坚挺、接收数据。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketSession.ProcessUdpReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接收到数据。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SendWork2(EAS.Sockets.ByteArraySegment)">
            <summary>
            发送分组报文。
            </summary>
            <param name="segment">发送参数。</param>
        </member>
        <member name="M:EAS.Sockets.SocketSession.SendData2(System.Collections.Generic.List{EAS.Sockets.ByteArraySegment})">
            <summary>
            发送消息报文/数据段/协议解析器调用。
            </summary>
            <param name="segments">消息报文组。</param>
        </member>
        <member name="P:EAS.Sockets.SocketSession.Server">
            <summary>
            Server对象。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.Logger">
            <summary>
            获取或设置日志记录器。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.SessionID">
            <summary>
            客户端ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.Socket">
            <summary>
            通信Socket。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.IsClosed">
            <summary>
            连接是否已关闭。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.Item(System.String)">
            <summary>
            获取或设置指定名称的属性值。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.Properties">
            <summary>
            属性集合。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.HanderManager">
            <summary>
            处理器管理。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.SendPackets">
            <summary>
            发送的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.ReceivePackets">
            <summary>
            接收的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.DiscardPackets">
            <summary>
            丢弃的报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.SendMessages">
            <summary>
            发送的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.ReceiveMessages">
            <summary>
            接收的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.SendBytes">
            <summary>
            发送字节汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.ReceiveBytes">
            <summary>
            接收字节汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.SeaSendPool">
            <summary>
            Sea池。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.SeaExPool">
            <summary>
            Sea池。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.ProtocolParser">
            <summary>
            协议解析器。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.Guid">
            <summary>
            通信引擎的全局唯一标识符号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.LocalEndPoint">
            <summary>
            获取本地终结点信息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.IPEndPoint">
            <summary>
            连接终节点(远程)。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketSession.MessageSend">
            <summary>
            消息发送完成之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketSession.MessageReceived">
            <summary>
            接收消息完成之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketSession.Error">
            <summary>
            发生错误时触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketSession.ProtocolType">
            <summary>
            协议类型:Tcp/Udp。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketSession.Connected">
            <summary>
            连接后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketSession.Closed">
            <summary>
            断开连接后触发。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketTcp">
            <summary>
            Tcp客户端接口。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketTcp.Connect">
            <summary>
            连接Tcp服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketTcp.AddMessage``1">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.ISocketTcp.AddMessage``2">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="THandler">消息处理器类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.ISocketTcp.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketTcp.Invoke(EAS.Sockets.Messages.IInvokeMessage)">
            <summary>
            调用消息，用于服务器/客户端应用中的请示==》响应消息的应用。
            </summary>
            <param name="request">请示消息。</param>
            <returns>服务器返回的响应消息。</returns>
        </member>
        <member name="M:EAS.Sockets.ISocketTcp.BeginInvoke(EAS.Sockets.Messages.IInvokeMessage)">
            <summary>
            异步调用消息，用于服务器/客户端应用中的请示==》响应消息的应用。
            </summary>
            <param name="request">请示消息。</param>
            <returns>包含响应消息的异步任务。</returns>
        </member>
        <member name="P:EAS.Sockets.ISocketTcp.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketTcp.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketTcp.Url">
            <summary>
            服务器Url。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketTcp.Logger">
            <summary>
            日志记录。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.#ctor">
            <summary>
            初始化SocketTcp对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.AddMessage``1">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.AddMessage``2">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="THandler">消息处理器类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.Connect">
            <summary>
            打开与服务器的连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.BeginConnect">
            <summary>
            打开与服务器的连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.OnCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接的完成方法
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.OnConnect(System.EventArgs)">
            <summary>
            重写。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.OnConnect2(System.EventArgs)">
            <summary>
            引发Connected事件。
            </summary>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.Invoke(EAS.Sockets.Messages.IInvokeMessage)">
            <summary>
            消息同步调用，实现请求响应消息模式。
            </summary>
            <param name="request">请求消息。</param>
            <returns>返回消息。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.BeginInvoke(EAS.Sockets.Messages.IInvokeMessage)">
            <summary>
            异步调用消息，用于服务器/客户端应用中的请示==》响应消息的应用。
            </summary>
            <param name="request">请示消息。</param>
            <returns>包含响应消息的异步任务。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.HandleMessage(EAS.Sockets.Messages.IMessage,System.Net.EndPoint)">
            <summary>
            调用消息处理器，执行消息处理。
            </summary>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Sockets.SocketTcp.Close">
            <summary>
            终止会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.IPAddress">
            <summary>
            获取或设置远程服务器IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.Port">
             <summary>
            获取或设置远程服务器端口号。
             </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.Url">
            <summary>
            服务器Url。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.CommandTimeout">
            <summary>
            命令超时。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.ConnectionTimeout">
            <summary>
            连接超时。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.LocalEndPoint">
            <summary>
            获取本地终结点信息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.IPEndPoint">
            <summary>
            获取或设置远程服务器IP终结点。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketTcp.SeaPool">
            <summary>
            Sea池。
            </summary>
        </member>
        <member name="T:EAS.Sockets.RequestWaitHandle">
            <summary>
            请示==>响应消息任务类。
            </summary>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.#ctor(System.Guid)">
            <summary>
            使用请求消息ID初始化RequestWaitHandle对象实例。
            </summary>
            <param name="requestId">请求消息ID。</param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.#ctor(System.Guid,EAS.Sockets.NetInvokeTask)">
            <summary>
            使用请求消息ID初始化RequestWaitHandle对象实例。
            </summary>
            <param name="requestId">请求消息ID。</param>
            <param name="callBack">回调任务。</param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.WaitOne">
            <summary>
            等待同步。
            </summary>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.Set(EAS.Sockets.Messages.IInvokeMessage)">
            <summary>
            同步访问结果。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.Set(System.Exception)">
            <summary>
            同步访问结果/错误。
            </summary>
            <param name="error">错误。</param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.GetHashCode">
            <summary>
            获取Hash码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.Timeout">
            <summary>
            超时设置。
            </summary>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.RequestId">
            <summary>
            消息实例ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.Message">
            <summary>
            回复消息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.Error">
            <summary>
            异常。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketUdp">
            <summary>
            Udp连接。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketUdp">
            <summary>
            Udp客户端接口。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketUdp.Open">
            <summary>
            启动连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketUdp.AddMessage``1">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.ISocketUdp.AddMessage``2">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="THandler">消息处理器类型。</typeparam>
        </member>
        <member name="P:EAS.Sockets.ISocketUdp.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketUdp.Logger">
            <summary>
            日志记录。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketUdp.#ctor">
            <summary>
            初始化UdpClient对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketUdp.#ctor(System.Int32)">
            <summary>
            初始化UdpClient对象实例。
            </summary>
            <param name="port">端口号。</param>
        </member>
        <member name="M:EAS.Sockets.SocketUdp.AddMessage``1">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketUdp.AddMessage``2">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="THandler">消息处理器类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketUdp.Open">
            <summary>
            打开连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketUdp.Close">
            <summary>
            关闭连接。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUdp.IPEndPoint">
            <summary>
            连接终节点(远程)。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUdp.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUdp.Url">
            <summary>
            服务器Url。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUdp.LocalEndPoint">
            <summary>
            获取本地终结点信息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUdp.IsClosed">
            <summary>
            连接是否已关闭，已重写。
            </summary>
        </member>
        <member name="T:EAS.IO.BufferReader">
            <summary>
            基于字节流的消息读取器。
            </summary>
        </member>
        <member name="M:EAS.IO.BufferReader.#ctor(System.Byte[])">
            <summary>
            初始化MessageReader对象实例。
            </summary>
            <param name="buffer">字节流。</param>
        </member>
        <member name="M:EAS.IO.BufferReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            初始化MessageReader对象实例。
            </summary>
            <param name="buffer">字节流。</param>
            <param name="position">偏移量。</param>
            <param name="Length">长度。</param>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadBytes">
            <summary>
            读字节流。
            </summary>
            <returns>字节流。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadFixBytes(System.Int32)">
            <summary>
            读定长字节流。
            </summary>
            <returns>字节流。</returns>
            <param name="length">长度。</param>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadBoolean">
            <summary>
            读布而值。
            </summary>
            <returns>布而值。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadByte">
            <summary>
            读8位无符号整数。
            </summary>
            <returns> 8位无符号整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadSByte">
            <summary>
            读8位有符号整数。
            </summary>
            <returns> 8位有符号整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadChar">
            <summary>
            读字符。
            </summary>
            <returns>字符。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadInt16">
            <summary>
            读16位整数。
            </summary>
            <returns>16位整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadUInt16">
            <summary>
            读16位无符号整数。
            </summary>
            <returns> 16位无符号整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadInt32">
            <summary>
            读32位整数。
            </summary>
            <returns>32位整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadUInt32">
            <summary>
            读32位无符号整数。
            </summary>
            <returns> 32位无符号整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadInt64">
            <summary>
            读64位整数。
            </summary>
            <returns>64位整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadUInt64">
            <summary>
            读64位无符号整数。
            </summary>
            <returns> 64位无符号整数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadSingle">
            <summary>
            读单精度浮点数字。
            </summary>
            <returns> 单精度浮点数字。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadDouble">
            <summary>
            读双精度浮点数字。
            </summary>
            <returns> 双精度浮点数字。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadDecimal">
            <summary>
            读十进制数。
            </summary>
            <returns> 十进制数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadDateTime">
            <summary>
            读日期时间。
            </summary>
            <returns> 日期时间。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadGuid">
            <summary>
            读Guid值。
            </summary>
            <returns> Guid值。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadString">
            <summary>
            读字符串。
            </summary>
            <returns> 字符串。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadEx``1">
            <summary>
            读对象。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.ReadObject">
            <summary>
            读对象。
            </summary>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.Dispose">
            <summary>
            释放占用的缓存区。
            </summary>
        </member>
        <member name="M:EAS.IO.BufferReader.CreateReadFunc``1">
            <summary>
            创建泛型读取方法
            </summary>
            <typeparam name="T">类型。</typeparam>
            <returns>读取函数。</returns>
        </member>
        <member name="M:EAS.IO.BufferReader.IsNullableType(System.Type)">
            <summary>
            是否为可空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.IO.BufferReader.Length">
            <summary>
            消息流长度。
            </summary>
        </member>
        <member name="P:EAS.IO.BufferReader.Position">
            <summary>
            当前读取便宜量。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.DynamicProxyFactory">
            <summary>
            动态代理工厂。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(EAS.DynamicProxy.IInterceptor)">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="interceptor">拦截器。</param>
            <returns>动态代理实例。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Object)">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="target">代理的目标对象。</param>
            <returns>动态代理实例。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Object,EAS.DynamicProxy.IInterceptor)">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="target">代理的目标对象。</param>
            <param name="interceptor">拦截器。</param>
            <returns>动态代理实例。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Object,EAS.DynamicProxy.IInterceptor,System.Boolean,System.Type[])">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="target">代理的目标对象。</param>
            <param name="interceptor">拦截器。</param>
            <param name="strict">是否类型精确匹配。</param>
            <param name="supportedTypes">需要精确匹配的类型。</param> 
            <returns>动态代理实例。</returns>
        </member>
        <member name="P:EAS.DynamicProxy.DynamicProxyFactory.Instance">
            <summary>
            DynamicProxyFactory对象的唯一实例。
            </summary>
        </member>
        <member name="P:EAS.Threading.ObjectPool`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:EAS.Data.UIAlignment">
            <summary>
            数据对齐方式。
            </summary>
        </member>
        <member name="F:EAS.Data.UIAlignment.Left">
            <summary>
            在对齐。
            </summary>
        </member>
        <member name="F:EAS.Data.UIAlignment.Center">
            <summary>
            居中对齐。
            </summary>
        </member>
        <member name="F:EAS.Data.UIAlignment.Right">
            <summary>
            右对齐。
            </summary>
        </member>
        <member name="T:EAS.Data.AutoUIAttribute">
            <summary>
            界面自动布局属性。
            </summary>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.Int32)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="width">宽度。</param>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.Int32,EAS.Data.UIAlignment)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="width">宽度。</param>
            <param name="alignment">对齐方式。</param>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.String,System.Int32)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="caption">标题。</param>
            <param name="width">宽度。</param>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.String,System.Int32,EAS.Data.UIAlignment)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="caption">标题。</param>
            <param name="width">宽度。</param>
            <param name="alignment">对齐方式。</param>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Width">
            <summary>
            宽度。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Alignment">
            <summary>
            对齐方式。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Format">
            <summary>
            显示格式。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Index">
            <summary>
            显示顺序号。
            </summary>
        </member>
        <member name="T:EAS.Sessions.IClient">
            <summary>
            定义会话的客户端。
            </summary>
        </member>
        <member name="P:EAS.Sessions.IClient.ID">
            <summary>
            获取该客户端的标识。
            </summary>
        </member>
        <member name="T:EAS.Services.InvokeResultMessage">
            <summary>
            方法调用结果消息。
            </summary>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.#ctor">
            <summary>
            初始化InvokeResultMessage对象实例。
            </summary>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.Error">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.Value">
            <summary>
            结果。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="T:EAS.Services.InvokeMessage">
            <summary>
            方法调用消息，用于实现基于Socket的分布式通信使用。
            </summary>
        </member>
        <member name="M:EAS.Services.InvokeMessage.#ctor">
            <summary>
            初始化InvokeMessage对象实例。
            </summary>
        </member>
        <member name="M:EAS.Services.InvokeMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Services.InvokeMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Services.InvokeMessage.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Method">
            <summary>
            方法名称。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.DeclaringType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Parameters">
            <summary>
            参数类型集合。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Args">
            <summary>
            调用参数。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Timeout">
            <summary>
            调用超时。
            </summary>
        </member>
        <member name="T:EAS.Security.Privileges">
             <summary>
            权限值枚举。
             </summary>
        </member>
        <member name="F:EAS.Security.Privileges.Execute">
             <summary>
            执行权限。
             </summary>
        </member>
        <member name="F:EAS.Security.Privileges.ExecuteEx">
            <summary>
            自定义执行。
            </summary>
        </member>
        <member name="F:EAS.Security.Privileges.Config">
            <summary>
            对象配置。
            </summary>
        </member>
        <member name="F:EAS.Security.Privileges.Delete">
            <summary>
            对象删除。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.IPool">
            <summary>
            对象池接口定义，定义Objects容器所使用的对象池。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPool.Request">
            <summary>
            在组件池（Pool）中获取一个组件实例。
            </summary>
            <returns>获取的组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPool.Release(System.Object)">
            <summary>
            释放组件池（Pool）中一个组件实例。
            </summary>
            <param name="instance">要释放的组件实例。</param>
        </member>
        <member name="T:EAS.Objects.Injection.InjectionType">
            <summary>
            枚举InjectorType，对象的注入类型。
            </summary>
        </member>
        <member name="F:EAS.Objects.Injection.InjectionType.PropertyInject">
            <summary>
            PropertyInject，属性注入；Type2 构造子注入 。
            </summary>
        </member>
        <member name="F:EAS.Objects.Injection.InjectionType.ConstructorInject">
            <summary>
            ConstructorInject，构造器注入；即Objects Type3 设值注入 。
            </summary>
        </member>
        <member name="M:EAS.ExceptionHandler.Handle(System.Exception)">
            <summary>
            处理错误异常。
            </summary>
            <param name="exc"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.ExceptionHandler.Handle(System.Exception,System.String)">
            <summary>
            处理错误异常。
            </summary>
            <param name="exc"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.GetPropertyInvoker(System.Type,System.String)">
            <summary>
            This function return a delgate to the target Property Get MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="PropertyName">The taget property name</param>
            <param name="TargetType">The taget property type</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.SetPropertyInvoker(System.Type,System.String)">
            <summary>
            This function return a delgate to the target Property Set MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="PropertyName">The taget property name</param>
            <param name="TargetType">The taget property type</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.GetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            This function return a delgate to the target Property Get MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="TargetType">The taget type</param>
            <param name="Property">The taget MethodName information</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.SetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            This function return a delgate to the target Property Get MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="TargetType">The taget type</param>
            <param name="Property">The taget MethodName information</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="T:EAS.Task.ITaskTester">
            <summary>
            测试任务，用于压力测试的任务接口。
            </summary>
        </member>
        <member name="M:EAS.Task.ITaskTester.Initialize">
            <summary>
            初始化接口。
            </summary>
        </member>
        <member name="M:EAS.Task.ITaskTester.Execute">
            <summary>
            执行测试。
            </summary>
        </member>
        <member name="P:EAS.Task.ITaskTester.Name">
            <summary>
            任务名称。
            </summary>
        </member>
        <member name="T:EAS.IO.BufferWriter">
            <summary>
            基于字节流的消息编写器。
            </summary>
        </member>
        <member name="M:EAS.IO.BufferWriter.#ctor">
            <summary>
            初始化MessageWriter对象实例。
            </summary>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Byte[])">
            <summary>
            写入字节流。
            </summary>
            <param name="value">字节流。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.WriteFixBytes(System.Byte[])">
            <summary>
            写入字节流/定长。
            </summary>
            <param name="value">字节流。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Boolean)">
            <summary>
            写入布尔值。
            </summary>
            <param name="value">布尔值。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Byte)">
            <summary>
            写入8位无符号整数。
            </summary>
            <param name="value">8位无符号整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.SByte)">
            <summary>
            写入8位有符号整数。
            </summary>
            <param name="value">8位有符号整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Char)">
            <summary>
            写入字符值。
            </summary>
            <param name="value">字符值。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Int16)">
            <summary>
            写入16 位整数。
            </summary>
            <param name="value">16 位整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.UInt16)">
            <summary>
            写入16 位无符号整数。
            </summary>
            <param name="value">16 位无符号整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Int32)">
            <summary>
            写入32 位整数。
            </summary>
            <param name="value">32 位整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.UInt32)">
            <summary>
            写入32 位无符号整数。
            </summary>
            <param name="value">32 位无符号整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Int64)">
            <summary>
            写入64 位整数。
            </summary>
            <param name="value">64 位整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.UInt64)">
            <summary>
            写入64 位无符号整数。
            </summary>
            <param name="value">64 位无符号整数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Single)">
            <summary>
            写入单精度浮点数。
            </summary>
            <param name="value">单精度浮点数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Double)">
            <summary>
            写入双精度浮点数。
            </summary>
            <param name="value">双精度浮点数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Decimal)">
            <summary>
            写入十进制数。
            </summary>
            <param name="value">十进制数。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.String)">
            <summary>
            写入字符串。
            </summary>
            <param name="value">字符串。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.DateTime)">
            <summary>
            写入日期时间。
            </summary>
            <param name="value">日期时间。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.Write(System.Guid)">
            <summary>
            写入Guid。
            </summary>
            <param name="value">Guid。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.WriteEx``1(``0)">
            <summary>
            写入对象。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="graph">对象实列。</param>
        </member>
        <member name="M:EAS.IO.BufferWriter.WriteObject(System.Object)">
            <summary>
            写入对象。
            </summary>
            <param name="graph">对象实例。</param>
            <remarks>
            要求对象必须是可序列化的。
            </remarks>
        </member>
        <member name="M:EAS.IO.BufferWriter.ToArray">
            <summary>
            将内容写入字节数组。
            </summary>
            <returns>字节数组。</returns>
        </member>
        <member name="M:EAS.IO.BufferWriter.Dispose">
            <summary>
            释放占用的缓存区。
            </summary>
        </member>
        <member name="M:EAS.IO.BufferWriter.CreateWriteAction``1">
            <summary>
            创建写入动作。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <returns>写入方法。</returns>
        </member>
        <member name="M:EAS.IO.BufferWriter.IsNullableType(System.Type)">
            <summary>
            是否为可空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.IO.BufferWriter.Length">
            <summary>
            消息流长度。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.DefaultDynamicProxy">
            <summary>
            一个动态代理的实现。
            </summary>
            <remarks>
            基于remoting/RealProxy实现的一个动态代理，可以指向一个真实的对象，也可以指向一个虚对象。
            </remarks>
        </member>
        <member name="T:EAS.DynamicProxy.IDynamicProxy">
            <summary>
            动态代理接口。
            </summary>
            <remarks>
            在AgileEAS.NET平台之中，通过动态代理来完成服务/业务代理与服务/业务组件的桥接做用，也就是说代理可以一个真实的对象，也可以指向虚对象，方法的执行由拦截器负责。
            </remarks>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.Target">
            <summary>
            代理目标。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.Interceptor">
            <summary>
            拦截器。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.Strict">
            <summary>
            类型是否精确匹配。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.SupportedTypes">
            <summary>
            需要精确匹配的类型。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(EAS.DynamicProxy.IInterceptor)">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="interceptor">拦截器。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(System.Object)">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="target">目标对象。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(System.Object,EAS.DynamicProxy.IInterceptor)">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="target">目标对象。</param>
            <param name="interceptor">拦截器。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(System.Object,EAS.DynamicProxy.IInterceptor,System.Boolean,System.Type[])">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="target">目标对象。</param>
            <param name="interceptor">拦截器。</param>
            <param name="strict">是否类型精确匹配。</param>
            <param name="supportedTypes">需要精确匹配的类型。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.CreateObjRef(System.Type)">
            <summary>
            为指定的对象类型创建 System.Runtime.Remoting.ObjRef，并将其作为客户端激活的对象注册到远程处理结构。
            </summary>
            <param name="requestedType">为其创建 System.Runtime.Remoting.ObjRef 的对象类型。</param>
            <returns>null。</returns>
            <exception cref="T:System.NotSupportedException">动态代理没有实现ObjRef方法。</exception>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            进行方法调用。
            </summary>
            <param name="msg">方法调用信息。</param>
            <returns>调用的方法所返回的消息，包含返回值和所有 out 或 ref 参数。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.CanCastTo(System.Type,System.Object)">
            <summary>
            检查是否可以将表示指定对象类型的代理强制转换为由 System.Runtime.Remoting.IRemotingTypeInfo 接口表示的类型。
            </summary>
            <param name="fromType">要强制转换到的类型。</param>
            <param name="obj">要为其检查强制转换的对象。</param>
            <returns>如果强制转换将成功，则为 true；否则为 false。</returns>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.Target">
            <summary>
            代理目标。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.Interceptor">
            <summary>
            拦截器。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.Strict">
            <summary>
            类型是否精确匹配。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.SupportedTypes">
            <summary>
            需要精确匹配的类型。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.TypeName">
            <summary>
            获取或设置 System.Runtime.Remoting.ObjRef 中的服务器对象的完全限定类型名。
            </summary>
            <exception cref="T:System.NotSupportedException">动态代理没有实现TypeName属性。</exception>
        </member>
        <member name="T:EAS.Serialization.FastJSON.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            </summary>
        </member>
        <member name="T:EAS.Script.ScriptException">
            <summary>
            表示脚本构造、执行过程这中的错误。
            </summary>
        </member>
        <member name="M:EAS.Script.ScriptException.#ctor">
            <summary>
            初始化 ScriptException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Script.ScriptException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 ScriptException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:EAS.Script.ScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 ScriptException 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Script.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 ScriptException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:EAS.Services.ServiceClassLoader">
            <summary>
            服务类型加载器。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.#ctor">
            <summary>
            初始化 ClassLoader 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.AddPath(System.String)">
            <summary>
            注册服务目录。
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.Initialize">
            <summary>
            初始化服务类加载器。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.Loading">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.GetNotNames">
            <summary>
            求排除程序集名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.TypeIsService(System.Type)">
            <summary>
            判定类型是否为一个服务。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.LoadTypes(System.Reflection.Assembly)">
            <summary>
            加载服务类型。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.LoadAssembly(System.String)">
            <summary>
            从文件加载程序集。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.SkipAssembly(System.Reflection.Assembly)">
            <summary>
            程序集筛选。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceClassLoader.AddClassLoadPath">
            <summary>
            注册搜索地址。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceClassLoader.Instance">
            <summary>
            唯一实例。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceClassLoader.AttachPaths">
            <summary>
            额外的路径。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceClassLoader.Assemblys">
            <summary>
            程序集。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceClassLoader.ServiceTypes">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowAddInAttribute">
            <summary>
            工作流插件属性。
            </summary>
        </member>
        <member name="M:EAS.Workflow.WorkflowAddInAttribute.#ctor(System.String)">
            <summary>
            初始化WorkFlowAddInAttribute对象实例。
            </summary>
            <param name="flowID">流程ID。</param>
        </member>
        <member name="M:EAS.Workflow.WorkflowAddInAttribute.#ctor(System.String,System.Type)">
            <summary>
            初始化WorkFlowAddInAttribute对象实例。
            </summary>
            <param name="flowID">流程ID。</param>
            <param name="tDataEntity">数据实体类型。</param>
        </member>
        <member name="M:EAS.Workflow.WorkflowAddInAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            初始化WorkFlowAddInAttribute对象实例。
            </summary>
            <param name="flowID">流程ID。</param>
            <param name="flowName">流程名称。</param>
            <param name="tDataEntity">数据实体类型。</param>
        </member>
        <member name="P:EAS.Workflow.WorkflowAddInAttribute.FlowID">
            <summary>
            工作流ID。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowAddInAttribute.FlowName">
            <summary>
            工作流名称。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowAddInAttribute.TDataEntity">
            <summary>
            数据实体类型。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowInstanceIdAttribute">
            <summary>
            工作流实例Id属性。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowComplatedAttribute">
            <summary>
            工作流实例完成属性。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowTerminatedAttribute">
            <summary>
            工作流实例终止属性。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceProxyInterceptor">
            <summary>
            服务代理拦截器。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.IInterceptor">
            <summary>
            动态代理拦截器接口。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.IInterceptor.Intercept(EAS.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            拦截方法的执行。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="args">方法参数。</param>
            <returns>返回结果。</returns>
        </member>
        <member name="P:EAS.Services.ServiceProxyInterceptor.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="T:EAS.Serialization.SerializeHelper">
            <summary>
            序列化辅助类，支持Binary与Xml格式。
            </summary>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.GetSerializer">
            <summary>
            取得日志记录器。
            </summary>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.Initialize">
            <summary>
            初始化类型信息以提高序列化处理速度。
            </summary>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.Serialize(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="instance">对象。</param>
            <returns>二进制流。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.Deserialize(System.Byte[])">
            <summary>
            反序列化对象。
            </summary>
            <param name="buffer">二进制流。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.Serialize``1(``0)">
            <summary>
            使用Binary序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>二进制流。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.Deserialize``1(System.Byte[])">
            <summary>
            使用Binary反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="buffer">二进制流。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.SerializeXml``1(``0)">
            <summary>
            使用Xml序列化对象
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>Xml字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.DeserializeXml``1(System.String)">
            <summary>
            反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="xml">Xml字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.SerializeXml(System.Type,System.Object)">
            <summary>
            使用Xml序列化对象
            </summary>
            <param name="T">对象类型。</param>
            <param name="instance">对象。</param>
            <returns>Xml字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.DeserializeXml(System.Type,System.String)">
            <summary>
            反序列化对象。
            </summary>
            <param name="T">对象类型。</param>
            <param name="xml">Xml字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.SerializeJson``1(``0)">
            <summary>
            使用Json序列化对象
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>Json字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.DeserializeJson``1(System.String)">
            <summary>
            使用Json反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">Json字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.SerializeJson(System.Type,System.Object)">
            <summary>
            使用Json序列化对象
            </summary>
            <param name="T">对象类型。</param>
            <param name="instance">对象。</param>
            <returns>Json字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.SerializeHelper.DeserializeJson(System.Type,System.String)">
            <summary>
            使用Json反序列化对象。
            </summary>
            <param name="T">对象类型。</param>
            <param name="json">Json字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.DefaultPool">
            <summary>
            默认的对象池(IPool)接口组件。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.#ctor(System.Int32,System.Int32,EAS.Objects.IComponentAdapter)">
            <summary>
            根据组件池的初始化容量、最大容量以及组件适配器初始化 DefaultPool实例。
            </summary>
            <param name="initialsize">对象池的初始化大小。</param>
            <param name="maxsize">对象池的最大可容纳对象数。</param>
            <param name="componentAdapter">组件适配器。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.Request">
            <summary>
            在组件池（Pool）中获取一个组件实例。
            </summary>
            <returns>获取的组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.Release(System.Object)">
            <summary>
            释放组件池（Pool）中一个组件实例。
            </summary>
            <param name="instance">要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.InitPool">
            <summary>
            初始化对象池。
            </summary>
        </member>
        <member name="T:EAS.Objects.Exception">
            <summary>
            表示异常的基类。
            </summary>
        </member>
        <member name="M:EAS.Objects.Exception.#ctor">
            <summary>
            初始化 DataException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Exception.#ctor(System.String)">
            <summary>
            使用异常信息初始化 DataException 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
        </member>
        <member name="M:EAS.Objects.Exception.#ctor(System.String,System.Exception)">
            <summary>
            使用异常信息和内部异常对象引用初始化 DataException 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
            <param name="innerException">引发当前异常的内部异常对象引用。</param>
        </member>
        <member name="T:EAS.Objects.IComponentAdapter">
            <summary>
            组件适配器接口，实现不同的组件适配器，用于管理不同的对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.IComponentAdapter.Create">
            <summary>
            创建一个组件实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IComponentAdapter.Destroy(System.Object)">
            <summary>
            销毁组件实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.ComponentKey">
            <summary>
            返回组件关联的组件索引键。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.Assembly">
            <summary>
            返回组件所在程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.ComponentImplementation">
            <summary>
            返回组件的实现类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.ServiceType">
            <summary>
            返回组件的接口类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.LifestyleType">
            <summary>
            返回组件的生存方式。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.Container">
            <summary>
            获取或设置一个值，指示级件适合器的组件容器对象。
            </summary>
        </member>
        <member name="T:EAS.Objects.ConstructorInfo">
            <summary>
            Objects容器中对于对象构造注入的属性信息。
            </summary>
        </member>
        <member name="M:EAS.Objects.ConstructorInfo.#ctor">
            <summary>
            初始化 ConstructorInfo 类实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConstructorInfo.Index">
            <summary>
            获取或设置一个值，批示构造器参数索引。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConstructorInfo.Type">
            <summary>
            获取或设置一个值，批示构造参数的数据类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConstructorInfo.Expression">
            <summary>
            获取或设置一个值，批示构造参数的表达式。
            </summary>
        </member>
        <member name="T:EAS.Security.DemandAttribute">
            <summary>
            权限验证属性。
            </summary>
            <remarks>
            标记权限模块是否需要验证权限。
            </remarks>
        </member>
        <member name="M:EAS.Security.DemandAttribute.#ctor">
            <summary>
            初始化DemandAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Security.DemandAttribute.#ctor(System.String)">
            <summary>
            初始化DemandAttribute对象。
            </summary>
            <param name="guid">权限对象Guid。</param>
        </member>
        <member name="M:EAS.Security.DemandAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化DemandAttribute对象。
            </summary>
            <param name="guid">权限对象Guid。</param>
            <param name="name">权限对象名称。</param>
        </member>
        <member name="P:EAS.Security.DemandAttribute.Guid">
            <summary>
            权限对象Guid。
            </summary>
        </member>
        <member name="P:EAS.Security.DemandAttribute.Name">
            <summary>
            权限对象名称。
            </summary>
        </member>
        <member name="T:EAS.Security.DemandIgnoreAttribute">
            <summary>
            权限验证忽略属性。
            </summary>
            <remarks>
            用于标记在模块之上或者服务方法之上，权限检查体系将会放行。
            </remarks>
        </member>
        <member name="M:EAS.Security.DemandIgnoreAttribute.#ctor">
            <summary>
            初始化DemandIgnoreAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Serialization.Initializer.LoadDirectory(System.String)">
            <summary>
            加载指定目录。
            </summary>
            <param name="m_Directory"></param>
        </member>
        <member name="M:EAS.Serialization.Initializer.FilterAssembly">
            <summary>
            程序集筛选。
            </summary>
        </member>
        <member name="M:EAS.Serialization.Initializer.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            加载服务对象。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:EAS.Sockets.ProtocolParser.SendMessage(EAS.Sockets.Messages.IMessage,System.Boolean)">
            <summary>
            发送消息。
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:EAS.Sockets.ProtocolParser.Protocol">
            <summary>
            协议。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ProtocolParser.Channel">
            <summary>
            消息收发通道。
            </summary>
        </member>
        <member name="M:EAS.Security.TokenContext.AddToken(System.Guid,System.Boolean)">
            <summary>
            注册令牌。
            </summary>
            <param name="sessionID">会话ID。</param>
            <param name="useRSA">是否使用RSA。</param>
            <returns>令牌对象。</returns>
        </member>
        <member name="M:EAS.Security.TokenContext.CheckToken(System.Guid,System.String)">
            <summary>
            检查通信令牌。
            </summary>
            <param name="sessionID">会话ID。</param>
            <param name="securityCode">安全码。</param>
            <returns>通过返回true，否则返回false。</returns>
        </member>
        <member name="T:EAS.Security.Token">
            <summary>
            身份令牌，用于通信验证。
            </summary>
        </member>
        <member name="M:EAS.Security.Token.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Security.Token.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="M:EAS.Security.Token.IssuedToken">
            <summary>
            为会话颁发通信令牌。
            </summary>
            <returns>通信令牌。</returns>
        </member>
        <member name="M:EAS.Security.Token.IssuedToken(System.Guid)">
            <summary>
            为会话颁发通信令牌。
            </summary>
            <param name="sessionID">会话ID。</param>
            <returns>通信令牌。</returns>
        </member>
        <member name="M:EAS.Security.Token.IssuedToken(System.Boolean)">
            <summary>
            为会话颁发通信令牌。
            </summary>
            <param name="useRSA">是否使用RSA。</param>
            <returns>通信令牌。</returns>
        </member>
        <member name="M:EAS.Security.Token.IssuedToken(System.Guid,System.Boolean)">
            <summary>
            为会话颁发通信令牌。
            </summary>
            <param name="sessionID">会话ID。</param>
            <param name="useRSA">是否使用RSA。</param>
            <returns>通信令牌。</returns>
        </member>
        <member name="M:EAS.Security.Token.AuthenticationToken(System.Guid,System.String)">
            <summary>
            验证通信令牌。
            </summary>
            <param name="sessionID">会话ID。</param>
            <param name="tokenCode">令牌编码。</param>
            <returns>通过返回true，否则返回false。</returns>
        </member>
        <member name="P:EAS.Security.Token.SessionID">
            <summary>
            会话ID。
            </summary>
        </member>
        <member name="P:EAS.Security.Token.TokenCode">
            <summary>
            安全码|令牌码。
            </summary>
        </member>
        <member name="P:EAS.Security.Token.RSA">
            <summary>
            是否为RSA证书。
            </summary>
        </member>
        <member name="P:EAS.Security.Token.PublicKey">
            <summary>
            公钥。
            </summary>
        </member>
        <member name="P:EAS.Security.TokenEx.PrivateKey">
            <summary>
            私钥。
            </summary>
        </member>
        <member name="T:EAS.Distributed.Argument">
            <summary>
            RIA实参。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Argument.#ctor">
            <summary>
            初始化Argument对象。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Argument.#ctor(System.Object)">
            <summary>
            根据参数初始化Argument对象。
            </summary>
            <param name="Data">返回数据。</param>
        </member>
        <member name="M:EAS.Distributed.Argument.Deserialize">
            <summary>
            反序列化Argument对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.Argument.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载消息对象。
            </summary>
            <param name="reader">BufferReader。</param>
        </member>
        <member name="M:EAS.Distributed.Argument.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            保存到指定的BufferWriter。
            </summary>
            <param name="writer">BufferWriter。</param>
        </member>
        <member name="P:EAS.Distributed.Argument.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Argument.Pack">
            <summary>
            是否包装。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Argument.Body">
            <summary>
            对象。
            </summary>
        </member>
        <member name="T:EAS.Distributed.MessageHelper">
            <summary>
            消息辅助类。
            </summary>
        </member>
        <member name="F:EAS.Distributed.MessageHelper.MinCompressSize">
            <summary>
            小于4K的消息不用压缩。
            </summary>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.PackageBinary(System.Object)">
            <summary>
            对消息对象打包。
            </summary>
            <param name="msg">消息对象。</param>
            <returns>打包消息。</returns>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.UnpackageBinary(System.Byte[])">
            <summary>
            解包消息/返回值。
            </summary>
            <param name="callPackage">数据包。</param>
            <returns>消息对象。</returns>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.PackageBinary2(System.Object)">
            <summary>
            对消息对象打包。
            </summary>
            <param name="msg">消息对象。</param>
            <returns>打包消息。</returns>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.UnpackageBinary2(System.Type,System.Byte[])">
            <summary>
            解包消息。
            </summary>
            <param name="T">消息类型。</param>
            <param name="callPackage">数据包。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.Serialize(System.Object)">
            <summary>
            对消息序列化。
            </summary>
            <param name="msg">消息对象。</param>
            <returns>打包消息。</returns>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.Serialize(System.Type,System.Object)">
            <summary>
            对消息序列化。
            </summary>
            <param name="T">消息类型。</param>
            <param name="msg">消息对象。</param>
            <returns>打包消息。</returns>
        </member>
        <member name="M:EAS.Distributed.MessageHelper.Deserialize(System.Type,System.Byte[])">
            <summary>
            反序列化消息。
            </summary>
            <param name="T">消息类型。</param>
            <param name="buffer">数据流。</param>
            <returns></returns>
        </member>
        <member name="T:EAS.Distributed.IUpdateService">
            <summary>
            智能升级服务接口。
            </summary>
        </member>
        <member name="M:EAS.Distributed.IUpdateService.GetSmartUpdateTime">
            <summary>
            取得升级配置更新时间。
            </summary>
            <returns>更新时间。</returns>
        </member>
        <member name="M:EAS.Distributed.IUpdateService.GetSmartFileCount(System.DateTime)">
            <summary>
            获取需要升级的文件总数。
            </summary>
            <param name="lastTime">最后升级时间。</param>
            <returns>文件总数。</returns>
        </member>
        <member name="M:EAS.Distributed.IUpdateService.GetSmartUpdateConfig">
            <summary>
            取得智能升级配置文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.IUpdateService.DownloadSmartFile(System.String)">
            <summary>
            下载升级文件。
            </summary>
            <param name="smartFileName">文件名称。</param>
            <returns>文件数据。</returns>
        </member>
        <member name="T:EAS.Distributed.IRIAService">
            <summary>
            RIA服务契约。
            </summary>
        </member>
        <member name="M:EAS.Distributed.IRIAService.RemotingCall(System.Byte[])">
            <summary>
            远程方法调用。
            </summary>
            <param name="callPackage">打包的消息。</param>
            <returns>返回消息。</returns>
        </member>
        <member name="T:EAS.Context.DefaultContextFactory">
            <summary>
            系统缺省的上下文(IContext)生成工厂接口实例。
            </summary>
        </member>
        <member name="T:EAS.Context.IContextFactory">
            <summary>
            上下文(IContext)生成工厂接口定义。
            </summary>
        </member>
        <member name="M:EAS.Context.IContextFactory.Create">
            <summary>
            生成一个上下文（IContext）接口对象实例。
            </summary>		
            <returns>上下文（IContext）接口实例。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContextFactory.#ctor">
            <summary>
            初始化  DefaultContexFactory 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContextFactory.Create">
            <summary>
            生成一个上下文接口对象实例。
            </summary>		
            <returns>上下文（IIContext）接口实例。</returns>
        </member>
        <member name="T:EAS.Aspect.IAspectInvoke">
            <summary>
            定义方面(横切)的调用接口。
            </summary>
            <remarks>
            本接口实现拦截并替换对象现有方法执行的功能，比如实现远程访问等。
            </remarks>
        </member>
        <member name="T:EAS.Aspect.IAspect">
            <summary>
            定义方面(横切面)的接口。
            </summary>
        </member>
        <member name="M:EAS.Aspect.IAspect.BeforeInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="M:EAS.Aspect.IAspect.AfterInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="M:EAS.Aspect.IAspectInvoke.Invoke(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            拦截并执行对象方法。
            </summary>
            <param name="target">目标对象。</param>
            <param name="method">方法。</param>
            <param name="parameters">方法参数。</param>
            <returns>返回值。</returns>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.UseOptimizedDatasetSchema">
            <summary>
            Use the optimized fast Dataset Schema format (default = True)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.UseFastGuid">
            <summary>
            Use the fast GUID format (default = True)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.SerializeNullValues">
            <summary>
            Serialize null values to the output (default = True)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.UseUTCDateTime">
            <summary>
            Use the UTC date format (default = True)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.ShowReadOnlyProperties">
            <summary>
            Show the readonly properties of types in the output (default = False)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.UsingGlobalTypes">
            <summary>
            Use the $types extension to optimise the output json (default = True)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.IgnoreCaseOnDeserialize">
            <summary>
            ** work in progress
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.EnableAnonymousTypes">
            <summary>
            Anonymous types have read only properties 
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.UseExtensions">
            <summary>
            Enable fastJSON extensions $types, $type, $map (default = True)
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSONParameters.UseEscapedUnicode">
            <summary>
            Use escaped unicode i.e. \uXXXX format for non ASCII characters (default = True)
            </summary>
        </member>
        <member name="T:EAS.Serialization.FastJSON.JSON">
            <summary>
            FastJSON。
            </summary>
        </member>
        <member name="F:EAS.Serialization.FastJSON.JSON.Parameters">
            <summary>
            You can set these paramters globally for all calls
            </summary>
        </member>
        <member name="T:EAS.Script.CodeStruct">
            <summary>
            脚本代码结构。
            </summary>
        </member>
        <member name="M:EAS.Script.CodeStruct.#ctor(System.String)">
            <summary>
            初始化CodeStruct对象实例。
            </summary>		
        </member>
        <member name="P:EAS.Script.CodeStruct.SourceCode">
            <summary>
            脚本源码。
            </summary>
        </member>
        <member name="P:EAS.Script.CodeStruct.References">
            <summary>
            引用程序集。
            </summary>
        </member>
        <member name="T:EAS.Reflection.CPUVersion">
            <summary>
            处理器目标平台。
            </summary>
        </member>
        <member name="T:EAS.Reflection.FrameworkVersion">
            <summary>
            Framework版本。
            </summary>
        </member>
        <member name="T:EAS.Reflection.AssemblyDetails">
            <summary>
            程序集信息。
            </summary>
        </member>
        <member name="F:EAS.Reflection.AssemblyDetails.CPUVersion">
            <summary>
            目标Cpu平台。
            </summary>
        </member>
        <member name="F:EAS.Reflection.AssemblyDetails.FrameworkVersion">
            <summary>
            .NET Framework版本。
            </summary>
        </member>
        <member name="F:EAS.Reflection.AssemblyDetails.StrongName">
            <summary>
            是否强签名。
            </summary>
        </member>
        <member name="M:EAS.Reflection.AssemblyDetails.FromFile(System.String)">
            <summary>
            获取信息集信息。
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Services.InvokeLogAspect">
            <summary>
            服务调用日志切面。
            </summary>
            <remarks>
            实现在对所有服务调用之前进行时间验证，即验证DateTime.Now和EAS.Environment.NowTime时间差值不得超过15分种，如超过则系统报错，手工校验系统时间。
            </remarks>
        </member>
        <member name="M:EAS.Services.InvokeLogAspect.BeforeInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="M:EAS.Services.InvokeLogAspect.AfterInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="T:EAS.Distributed.Message2">
            <summary>
            为Socket调用提供的消息，默认消息超过4K则进行压缩传输。
            </summary>
        </member>
        <member name="T:EAS.Distributed.Message">
            <summary>
            方法调用消息，用于分布式通信使用，支持 socket、wcf、web service、remoting
            </summary>
        </member>
        <member name="M:EAS.Distributed.Message.#ctor">
            <summary>
            初始化Message对象实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Message.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Distributed.Message.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Distributed.Message.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Distributed.Message.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Distributed.Message.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.DeclaringType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.Method">
            <summary>
            方法名称。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.Parameters">
            <summary>
            参数类型集合。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.Args">
            <summary>
            调用参数。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.Mac">
            <summary>
            MAC地址。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.DataSet">
            <summary>
            帐套。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.SessionID">
            <summary>
            会话ID。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message.UserToken">
            <summary>
            通信令牌。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Message2.#ctor">
            <summary>
            初始化Message2对象实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Message2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Distributed.Message2.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Distributed.Message2.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="M:EAS.Distributed.Message2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="P:EAS.Distributed.Message2.AllowCompress">
            <summary>
            是否充许压缩。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message2.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Message2.Timeout">
            <summary>
            调用超时。
            </summary>
        </member>
        <member name="T:EAS.Task.FuncTask">
            <summary>
            函数任务回调，有返回值。
            </summary>
        </member>
        <member name="T:EAS.Task.TaskBase">
            <summary>
            异步调用任务基类。
            </summary>
        </member>
        <member name="M:EAS.Task.TaskBase.CompleteAction">
            <summary>
            任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="M:EAS.Task.TaskBase.Complete(System.Exception)">
            <summary>
            任务完成(错误）。
            </summary>
            <param name="error">错误信息。</param>
        </member>
        <member name="M:EAS.Task.TaskBase.Complete(System.Object)">
            <summary>
            任务完成/返回结果。
            </summary>
            <param name="result">返回结果。</param>
        </member>
        <member name="P:EAS.Task.TaskBase.IsComplete">
            <summary>
            是否已经完成。
            </summary>
        </member>
        <member name="P:EAS.Task.TaskBase.TaskResult">
            <summary>
            返回结果。
            </summary>
        </member>
        <member name="P:EAS.Task.TaskBase.Error">
            <summary>
            异常信息。
            </summary>
        </member>
        <member name="P:EAS.Task.TaskBase.HasError">
            <summary>
            是否错误。
            </summary>
        </member>
        <member name="E:EAS.Task.TaskBase.Completed">
            <summary>
            完成事件。
            </summary>
        </member>
        <member name="M:EAS.Task.FuncTask.CompleteAction">
            <summary>
            已重写，任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="P:EAS.Task.FuncTask.Result">
            <summary>
            调用结果。
            </summary>
        </member>
        <member name="T:EAS.Task.FuncTask`1">
            <summary>
            函数任务回调(泛型返回值)。
            </summary>
        </member>
        <member name="P:EAS.Task.FuncTask`1.TResult">
            <summary>
            调用结果。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketUtils">
            <summary>
            Socket通信辅助类，统计信息辅助类。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketUtils.GetMessageStruct(System.Type)">
            <summary>
            求消息定义。
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.SocketUtils.AddMessage(System.Type)">
            <summary>
            注册消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketUtils.CreateMessage(System.Guid)">
            <summary>
            创建消息对象。
            </summary>
            <param name="messageID"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.Singleton">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.StartTime">
            <summary>
            开始时间。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.NumConnections">
            <summary>
            在线连接数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SentPackets">
            <summary>
            发送的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceivedPackets">
            <summary>
            接收的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SentMessages">
            <summary>
            发送的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceivedMessages">
            <summary>
            接收的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SentBytes">
            <summary>
            发送的消息IO汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceivedBytes">
            <summary>
            接收的消息IO汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SentDataBytes">
            <summary>
            发送的数据字节数（除去包头之后的高层消息字节数）。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceivedDataBytes">
            <summary>
            接收的数据字节数（除去包头之后的高层消息字节数）。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.TimeOutms">
            <summary>
            启动累计时间/秒。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SentSpeed">
            <summary>
            消息发送速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceivedSpeed">
            <summary>
            消息接收速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.EffectiveSentSpeed">
            <summary>
            有效消息发送速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.EffectiveReceivedSpeed">
            <summary>
            有效消息接收速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.BufferLength">
            <summary>
            Socket缓存区长度/tcp收发报文长度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.MaxConcurrence">
            <summary>
            最大并发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SeaPool">
            <summary>
            对象池/客户端连接。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SeaSendPool">
            <summary>
            对象池/发送数据。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SeaExPool">
            <summary>
            对象池/数据接收。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.MessageStructs">
            <summary>
            消息结构。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.MessageKeys">
            <summary>
            消息结构。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceRepository">
            <summary>
            对象上下文。
            </summary>
        </member>
        <member name="T:EAS.Services.IServiceRepository">
            <summary>
            服务仓储接口。
            </summary>
        </member>
        <member name="M:EAS.Services.IServiceRepository.GetService(System.Type)">
            <summary>
            从服务仓储获取服务。
            </summary>
            <param name="type">服务类型。</param>
            <returns>服务实例对象。</returns>
        </member>
        <member name="M:EAS.Services.IServiceRepository.Output">
            <summary>
            输出服务信息。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceRepository.GetService(System.Type)">
            <summary>
            从服务仓储获取服务。
            </summary>
            <param name="TContract">服务类型。</param>
            <returns>服务实例对象。</returns>
        </member>
        <member name="M:EAS.Services.ServiceRepository.GetTService(System.Type)">
            <summary>
            从服务仓储获取服务|类型。
            </summary>
            <param name="TContract">服务类型。</param>
            <returns>服务类型。</returns>
        </member>
        <member name="M:EAS.Services.ServiceRepository.Output">
            <summary>
            输出服务信息。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceRepository.Instance">
            <summary>
            ServiceRepository对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.CodeGenerator2">
            <summary>
            内部类，用于运行时代码生成。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator2.GenWebServiceAgentType(System.String,System.Type)">
            <summary>
            生成WebService代理类型。
            </summary>
            <param name="url">服务url。</param>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator2.GetAgentClassName(System.String)">
            <summary>
            取得Web service 代理类名称。
            </summary>
            <param name="url">Web service URL。</param>
            <returns>服务代理类名称。</returns>
        </member>
        <member name="T:EAS.Services.Locators.AbstractServiceLocator">
            <summary>
            抽象类，服务定位器基础实现。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.IServiceLocator">
            <summary>
            服务定位器接口，运行时动态管理各种服务定位。
            </summary>
            <remarks>
            本接口采用接口驱动的思路帮助开发者开发信息系统，对系统提供的各种服务，需提供抽像接口，服务消费者直接使用接口进行服务调用，而具体的服务定义由服务定位器在运行时动态完成服务的定义。
            </remarks>
        </member>
        <member name="M:EAS.Services.Locators.IServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.IServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService(System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="interfaceType">服务接口类型。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.SingletonLifestyleManager">
            <summary>
            组件生存管理周期之Singleton，组件一旦自在，则在所有的客商端中共享。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.#ctor">
            <summary>
            初始化 SingletonLifestyleManager 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:EAS.Objects.Injection.PropertyInjector">
            <summary>
            属性注入器，完成对象属性注入。
            </summary>
            <remarks> 
            构造注入完成Objects Type 3 设值子注入，两个对象实现之间的依赖于属性的设值。 '
            </remarks>
        </member>
        <member name="T:EAS.Objects.Injection.AbstractInjetor">
            <summary>
            抽象的注入器接口组件。
            </summary>
        </member>
        <member name="T:EAS.Objects.Injection.IInjector">
            <summary>
            组件注入器，完成组件注入机制。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.IInjector.Add(System.String,System.Object)">
            <summary>
            添加注入对象实例，实现由键、键值组成。
            </summary>
            <param name="key">注入键。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.IInjector.Clear">
            <summary>
            清空注入对象实例，实现由键、键值组成。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.IInjector.Inject">
            <summary>
             完成对象的注入，返回一个注入后的对象实例。
            </summary>
            <returns>注入后的对象实例。</returns>
        </member>
        <member name="P:EAS.Objects.Injection.IInjector.ComponentAdapter">
            <summary>
            获取或设置一个值，批示构造器所依赖的组件适配器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.IInjector.ParentInstance">
            <summary>
            需要注入对象的父组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.IInjector.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="F:EAS.Objects.Injection.AbstractInjetor.keyValue">
            <summary>
            保护的内部成员，接受注入的组件中的注入参数集合，在些集合中存储了属性或构造器注入的相关参数。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.#ctor(System.Object)">
            <summary>
            使用接受注入对象实例创建 AbstractInjetor 类实例。
            </summary>
            <param name="parentInstance">注入对象实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.Add(System.String,System.Object)">
            <summary>
            添加注入对象实例，实现由键、键值组成。
            </summary>
            <param name="key">注入键。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.Clear">
            <summary>
            清空注入对象实例，实现由键、键值组成。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.Inject">
            <summary>
             完成对象的注入，返回一个注入后的对象实例。
            </summary>
            <returns>注入后的对象实例。</returns>
        </member>
        <member name="P:EAS.Objects.Injection.AbstractInjetor.ComponentAdapter">
            <summary>
            获取或设置一个值，批示构造器所依赖的组件适配器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.AbstractInjetor.ParentInstance">
            <summary>
            需要注入对象的父组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.AbstractInjetor.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.#ctor">
            <summary>
            初始化 PropertyInjector 类实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.#ctor(System.Object)">
            <summary>
            使用接受注入对象实例创建 PropertyInjector 类实例。
            </summary>
            <param name="parentInstance">注入对象实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.Inject">
            <summary>
            完成对象的注入。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.PropertyInjector.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.TypeHelper.GetObjectType(System.Type,System.String)">
            <summary>
            获取包含方法的类型。
            </summary>
            <param name="type">实体对象类型。</param>
            <param name="propertyName">属性名称。</param>
            <returns>实体类型。</returns>
        </member>
        <member name="T:EAS.Objects.IContainer">
            <summary>
            的组件容器，组件容器管理组件的生存，也是对外提供的一个接口。
            </summary>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(EAS.Objects.ComponentInfo)">
            <summary>
            根据组件组件信息向容器注册组件实现。
            </summary>
            <param name="componentInfo">组件信息。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type)">
            <summary>
            根据组件组件key及组件实现类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation"></param>		
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            根据组件key、接口类型及实现类型中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
            <param name="lifestyleParameters"> 组件生命周期相关参数，参数为一个字符串，其中由“：”分隔。 </param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.Type)">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.Type,System.Type)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.RemoveComponent(System.String)">
            <summary>
            从容器中卸载指定的组件。
            </summary>
            <param name="componentKey">组件key。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.Object)">
            <summary>
            根据组件实例向组件容器中注册组件。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.String,System.Object)">
            <summary>
            根据组件key及组件实现向组件容器中注册组件。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.Type)">
            <summary>
            根据组件实现类型向组件容器中注册组件。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>
            根据组件key、接口类型及组件实例向组件容器中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent(System.String)">
            <summary>
            根据组件key判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentKey">组件key。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent(System.Object)">
            <summary>
            根据组件实例判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent(System.Type)">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IContainer.ReleaseComponent(System.Object)">
            <summary>
            根据组件实例从组件容器中释放组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance(System.Type)">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <param name="serviceType">组件类型。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstances(System.Type)">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentAdapter(System.String)">
            <summary>
            根据组件key取得与组件相关的组件适配器。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>指定组件的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentAdapter(System.Type)">
            <summary>
            根据组件类型取得与组件相关的组件适配器。
            </summary>
            <param name="componentType">组件类型。</param>
            <returns>指定组件类型的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``1">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``1(System.String)">
            <summary>
            根据组件组件Key及组件实现类型向容器注册组件实现。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2">
            <summary>
            根据组件服务类型及实现类型向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2(System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
            <param name="lifestyleParameters">生命周期参数。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent``1">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>存在匹配的组件则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance``1(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance``1">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstances``1">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例列表。</returns>
        </member>
        <member name="P:EAS.Objects.IContainer.Name">
             <summary>
            获取容器名称。
             </summary>
        </member>
        <member name="P:EAS.Objects.IContainer.ComponentInfos">
            <summary>
            组织配置信息。
            </summary>
        </member>
        <member name="P:EAS.Objects.IContainer.ComponentAdapters">
            <summary>
            获取一个值，该值批示组件容器中的所有组件适配器列表。
            </summary>
        </member>
        <member name="T:EAS.Objects.ConfigInfo">
            <summary>
            Objects配置信息。
            </summary>
        </member>
        <member name="M:EAS.Objects.ConfigInfo.#ctor">
            <summary>
            初始化 ConfigInfo 类对象实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConfigInfo.Components">
            <summary>
            获取Objects中配置的对象配置信息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.TimeoutException">
            <summary>
            请求超时异常。
            </summary>
        </member>
        <member name="M:EAS.Sockets.TimeoutException.#ctor">
            <summary>
            初始化TimeoutException对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.TimeoutException.#ctor(System.String)">
            <summary>
            初始化TimeoutException对象实例。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.Sockets.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 TimeoutException 类的新实例。
            </summary>
            <param name="info">SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">StreamingContext，它包含有关源或目标的上下文信息</param>
        </member>
        <member name="T:EAS.Sockets.Bus.SubscribeMessage">
            <summary>
            订阅消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.SubscribeMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.SubscribeMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Bus.SubscribeMessage.Subscriber">
            <summary>
            订阅者。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SubscribeMessage.Topic">
            <summary>
            事件主题。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SubscribeMessage.Unsubscribe">
            <summary>
            是否退订。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceBindAttribute">
            <summary>
            服务绑定属性。
            </summary>
            <remarks>
            标记在服务(组件)之上，用于实现服务组件与服务契约的绑定。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceBindAttribute.#ctor(System.Type)">
            <summary>
            初始化ServiceBindAttribute实例。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceBindAttribute.TContract">
            <summary>
            获取服务契约类型。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.IInvocation">
            <summary>
            动态代理调用信息接口。
            </summary>
            <remarks>
            可以理解为动态代理方法调用的上下文环境。
            </remarks>
        </member>
        <member name="M:EAS.DynamicProxy.IInvocation.Proceed(System.Object[])">
            <summary>
            完成方法调用。
            </summary>
            <param name="args">参数。</param>
            <returns>方法调用结果。</returns>
        </member>
        <member name="P:EAS.DynamicProxy.IInvocation.Proxy">
            <summary>
            代理对象。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IInvocation.Target">
            <summary>
            目标对象。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IInvocation.Method">
            <summary>
            代理方法。
            </summary>
        </member>
        <member name="T:EAS.Hosting.ServiceApp">
            <summary>
            SOA Service Application 引导类。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.GetAppStrap">
            <summary>
            求启动对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.UseScheduledService">
            <summary>
            开启计划任务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.UseDistributedService">
            <summary>
            开启分布式服务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.UseSocketService">
            <summary>
            开启Socket服务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.ConfigureSocketService(System.Int32,System.Int32,System.Int32)">
            <summary>
            配置Socket服务。
            </summary>
            <param name="tcpPort">tcp端口号。</param>
            <param name="udpPort">udp端口号。</param>
            <param name="maxConcurrence">最大最发。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.UseWcfService">
            <summary>
            开启Wcf服务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.ConfigureWcfService(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            配置Wcf服务。
            </summary>
            <param name="host">主机，默认localhost</param>
            <param name="httpPort">http端口号，0表示不启用http。</param>
            <param name="tcpPort">tcp端口号，0表示不启用tcp。</param>
            <param name="urlPrefix">url前缀。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.UseVirtualService">
            <summary>
            开启虚拟服务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.ConfigureVirtualService(System.String)">
            <summary>
            配置虚拟服务。
            </summary>
            <param name="urlPrefix">url前缀。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.UseWcfRestful">
            <summary>
            开启WebApi服务/WCF承载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.ConfigureWcfRestful(System.String)">
            <summary>
            配置WebApi服务/WCF承载。
            </summary>
            <param name="urlPrefix">url前缀。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.ConfigureServiceName(System.String)">
            <summary>
            设置服务名称。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.Start">
            <summary>
            启动应用程序。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.Stop">
            <summary>
            停止应用程序。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.Main(System.String[])">
            <summary>
            外部调用函数，即全功能调：安装、卸载、运行。
            </summary>
            <param name="args">调用参数。</param>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.Install">
            <summary>
            安装服务。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.Uninstall">
            <summary>
            卸载服务。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.StartService">
            <summary>
            启动服务。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceApp.StartConsole">
            <summary>
            在控制台启动。
            </summary>
        </member>
        <member name="P:EAS.Hosting.ServiceApp.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceObjectAttribute">
            <summary>
            服务对象属性。
            </summary>
            <remarks>
            标记在服务对象之上，用于标记组件为一个服务组件。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceObjectAttribute.#ctor">
            <summary>
            初始化ServiceObjectAttribute实例。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceObjectAttribute.#ctor(System.String)">
            <summary>
            初始化ServiceObjectAttribute实例。
            </summary>
            <param name="name">服务名称</param>
        </member>
        <member name="M:EAS.Services.ServiceObjectAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ServiceObjectAttribute实例。
            </summary>
            <param name="name">服务名称</param>
            <param name="description">服务描述</param>
        </member>
        <member name="P:EAS.Services.ServiceObjectAttribute.Name">
            <summary>
            获取服务名称。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceObjectAttribute.Description">
            <summary>
            获取服务名称。
            </summary>
        </member>
        <member name="T:EAS.Services.DirectServiceBridger">
            <summary>
            直连服务桥。
            </summary>
        </member>
        <member name="T:EAS.Services.IServiceBridger">
            <summary>
            服务桥接接口。
            </summary>
            <remarks>
            本接口用于充当代理与服务组件之间的桥接，本接口不同的实现以实现服务代理与服务组件之间不同的跨越。
            </remarks>
        </member>
        <member name="M:EAS.Services.IServiceBridger.InvokeMethod(System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.IServiceBridger.InvokeMethod(System.Type,System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="P:EAS.Services.IServiceBridger.SessionID">
            <summary>
            获取当前会话ID。
            </summary>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.#ctor">
            <summary>
            初始化DirectServiceBridger对象实体。
            </summary>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.#ctor(EAS.Services.IServiceRepository)">
            <summary>
            初始化DirectServiceBridger对象实体。
            </summary>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InternalInvokeMethod(System.Type,System.Object@,System.Reflection.MethodBase,System.Object[])">
            <summary>
            X.调用对象方法。
            </summary>
            <param name="serviceType">执行一切方法。</param>
            <param name="target">调用的目标。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InvokeMethod(System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InvokeMethod(System.Type,System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.GetServceTarget(System.Type)">
            <summary>
            求服务实例并检测。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InvokeMethod(System.Type,System.Object@,System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="serviceType">执行一切方法。</param>
            <param name="target">调用的目标。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.UpdateSession(System.Object)">
            <summary>
            向会话/服务端注入会话信息。
            </summary>
            <param name="dataTag">会话信息。</param>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.CheckLicense(System.Type)">
            <summary>
            目前对自有业务进行控制、HIS、MR。
            </summary>
            <param name="serviceType">服务类型。</param>
        </member>
        <member name="P:EAS.Services.DirectServiceBridger.AutoLoad">
            <summary>
            是否自动加载程序集。
            </summary>
        </member>
        <member name="P:EAS.Services.DirectServiceBridger.Repository">
            <summary>
            服务仓促。
            </summary>
        </member>
        <member name="P:EAS.Services.DirectServiceBridger.SessionID">
            <summary>
            获取当前会话Guid。
            </summary>
        </member>
        <member name="P:EAS.Services.DirectServiceBridger.DataTag">
            <summary>
            当前会话的数据标记。
            </summary>
            <remarks>
            可以通过本属性来完成向当前会话注入相关信息，比如当前账号信息等。
            </remarks>
        </member>
        <member name="T:EAS.Services.Locators.WcfServiceInfo">
            <summary>
            Wcf服务配置信息。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceInfo.#ctor">
            <summary>
            初始化WcfServiceInfo实例。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceInfo.GetHashCode">
            <summary>
            已重写，获取哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="P:EAS.Services.Locators.WcfServiceInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.WcfServiceInfo.ConnectionTimeout">
            <summary>
            连接超时。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.WcfServiceInfo.CommandTimeout">
            <summary>
            命令超时。
            </summary>
        </member>
        <member name="T:EAS.Security.Bytes">
            <summary>
            Bytes对象。
            </summary>
            <remarks>为提供字节处理支持，数据加密、CA认证的基础。</remarks>
        </member>
        <member name="M:EAS.Security.Bytes.Equals(System.Byte[],System.Byte[])">
            <summary>
            判断给定的两个字节数组是否相等。
            </summary>
            <param name="bytes1">要比较的第一个字节数组。</param>
            <param name="bytes2">要比较的第二个字节数组。</param>
            <returns>如果两个字节数组的长度相同，并且相应下标的元素相等，或者两个字节数组都为空引用，则返回true；否则返回false。</returns>
        </member>
        <member name="M:EAS.Security.Bytes.Merge(System.Byte[],System.Byte[])">
            <summary>
            合并指定的两个字节数组。请注意字节数组的顺序。
            </summary>
            <param name="bytes1">要合并的字节数组1。</param>
            <param name="bytes2">要合并的字节数组2。</param>
            <returns>返回合并后的字节数组。</returns>
            <exception cref="T:System.ArgumentNullException">bytes1 或者 bytes2 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Bytes.ToHex(System.Byte[])">
            <summary>
            将指定的字节数组转换为HEX字符串。
            </summary>
            <param name="buffer">要转换的字节数组。</param>
            <returns>返回已经转换的字节数组字符串。</returns>
        </member>
        <member name="M:EAS.Security.Bytes.FromHex(System.String)">
            <summary>
            将格式为“XXXX”的字符串。（其中“xx”为每一个字节的十六进制表示）转换为相应的字节数组。
            </summary>
            <param name="s">要转换的字符串。</param>
            <returns>返回转换后的字节数组。</returns>
            <exception cref="T:System.ArgumentNullException">s 为空引用。</exception>
            <exception cref="T:System.ArgumentException">字符串 s 格式无效。</exception>
            <remarks>如果 s 为空字符串，则返回长度为 0 的字节数组。</remarks>
        </member>
        <member name="M:EAS.Security.Bytes.ToBase64String(System.Byte[])">
            <summary>
            将指定的 base64 字节数组转换为 base64 字符串。
            </summary>
            <param name="buffer">要转换的 base64 字节数组。</param>
            <returns>返回  base64 字符串</returns>
            <remarks>使用 Convert.ToBase64String。</remarks>
        </member>
        <member name="M:EAS.Security.Bytes.FromBase64String(System.String)">
            <summary>
            将指定的  base64 字符串转换为 base64 字节数组。
            </summary>
            <param name="s">要转换的 base64 字符串。</param>
            <returns>返回 base64 字节数组。</returns>
            <remarks>使用 Convert.FromBase64String。</remarks>
        </member>
        <member name="T:EAS.Objects.DefaultComponentAdapter">
            <summary>
            DefaultComponentAdapter 的摘要说明。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultComponentAdapter.container">
            <summary>
            组件容器。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultComponentAdapter.m_ComponentInfo">
            <summary>
            配置定义。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(EAS.Objects.ComponentInfo)">
            <summary>
            使用组件的键和实现类型初始化组件适配器。
            </summary>
            <param name="componentInfo">组件定义信息。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type)">
            <summary>
            使用组件的键和实现类型初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
             <param name="assembly">组件所在的程序集名称。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type,System.Type)">
            <summary>
            使用组件的键和实现类型初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
            <param name="assembly">组件所在的程序集名称。</param>
            <param name="serviceType">组件的接口类型。</param>
            <param name="componentImplementation"> 组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            使用组件的键、实现类型及生存方式初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
            <param name="assembly">组件所在的程序集名称。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="lifestyleType">组件生存方式。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
             使用组件的键、接口类型，实现类型及生存方式初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
            <param name="assembly">组件所在的程序集名称。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="lifestyleType">组件生存方式。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.Create">
            <summary>
            创建一个组件实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.Destroy(System.Object)">
            <summary>
            销毁组件实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ConstructorInjector">
            <summary>
            构造拦截器。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.PropertyInjector">
            <summary>
            属性拦截器。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ComponentKey">
            <summary>
            获取一个值，指示组件的键。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.Assembly">
            <summary>
            返回组件所在程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ServiceType">
            <summary>
            获取一个值，指示组件的接口（服务类型）类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ComponentImplementation">
            <summary>
            获取一个值，指示组件的实现类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.LifestyleType">
            <summary>
            返回组件的生存方式。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.Container">
            <summary>
            获取或设置一个值，指示组件适配器所属的组件容器。
            </summary>
        </member>
        <member name="T:EAS.Modularization.IAddIn">
            <summary>
            插件接口定义。
            </summary>
            <remarks>
            AgileEAS.NET平台是一个插件平台，IAddIn即为平台中的插件，运行在插件容器之中。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.IAddIn.Close">
            <summary>
            关闭当前插件。
            </summary>
        </member>
        <member name="M:EAS.Modularization.IAddIn.Start(System.Object[])">
            <summary>
            运行当前插件。
            </summary>
            <param name="parameters">插件运行的初始参数列表。</param>
        </member>
        <member name="P:EAS.Modularization.IAddIn.Guid">
            <summary>
            获取插件的全局唯一标识符 (GUID)。
            </summary>
            <remarks>该值由实现类得到，默认值实现类的GUID值。</remarks>
        </member>
        <member name="P:EAS.Modularization.IAddIn.Name">
            <summary>
            获取插件的名称。
            </summary>
            <remarks>该值由开发者自己生成。</remarks>
        </member>
        <member name="P:EAS.Modularization.IAddIn.Description">
            <summary>
            获取插件的介绍。
            </summary>
            <remarks>插件的介绍与说明信息，由开发人员定义，也可以在安装后定义。</remarks>
        </member>
        <member name="P:EAS.Modularization.IAddIn.Version">
            <summary>
            获取插件的版本信息。
            </summary>
            <remarks>插件的版本信息，默认从程序集中读取，也可由开发者自己生成。</remarks>
        </member>
        <member name="P:EAS.Modularization.IAddIn.Developer">
            <summary>
            获取插件的开发者信息。
            </summary>
            <remarks>插件的开发者信息，默认从程序集中读取，也可由开发者自己生成。</remarks>
        </member>
        <member name="P:EAS.Modularization.IAddIn.Group">
            <summary>
            获取插件的分组信息。
            </summary>
            <remarks>插件的分组，由开发人员定义，也可以在安装后定义。</remarks>
        </member>
        <member name="T:EAS.Messages.NotifyEventArgs">
            <summary>
            应用通知事件参数。
            </summary>
        </member>
        <member name="M:EAS.Messages.NotifyEventArgs.#ctor">
            <summary>
            初始化NotifyEnentArgs事件参数。
            </summary>
        </member>
        <member name="M:EAS.Messages.NotifyEventArgs.#ctor(System.String,System.Object)">
            <summary>
            初始化NotifyEnentArgs事件参数。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">消息。</param>
        </member>
        <member name="P:EAS.Messages.NotifyEventArgs.Topic">
            <summary>
            主题。
            </summary>
        </member>
        <member name="P:EAS.Messages.NotifyEventArgs.Message">
            <summary>
            消息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.MessageHandler">
            <summary>
            消息传输委托。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">消息传输参数。</param>
        </member>
        <member name="T:EAS.Sockets.MessageEventArgs">
            <summary>
            消息传输参数。
            </summary>
        </member>
        <member name="M:EAS.Sockets.MessageEventArgs.#ctor">
            <summary>
            初始化MessageEventArgs对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.MessageEventArgs.#ctor(EAS.Sockets.Messages.IMessage)">
            <summary>
            初始化MessageEventArgs对象实例。
            </summary>
            <param name="message">业务消息。</param>
        </member>
        <member name="P:EAS.Sockets.MessageEventArgs.Message">
            <summary>
            消息链。
            </summary>
        </member>
        <member name="T:EAS.Sockets.IProtocol">
            <summary>
            通信协议。
            </summary>
            <remarks>
            用于完成通信协议解析、消息重组的接口。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.IProtocol.ReadMessage(EAS.IO.BufferReader)">
            <summary>
            读取消息。
            </summary>
            <param name="reader">读取器。</param>
            <returns>消息对象。</returns>
        </member>
        <member name="M:EAS.Sockets.IProtocol.WriteMessage(EAS.Sockets.Messages.IMessage,EAS.IO.BufferWriter)">
            <summary>
            写入一个消息。
            </summary>
            <param name="message">消息对象。</param>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.IProtocol.Logger">
            <summary>
            获取或设置日志记录器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.HanderManager">
            <summary>
            消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.HanderManager.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.HanderManager.GetHandler(EAS.Sockets.Messages.IMessage)">
            <summary>
            获取消息处理器。
            </summary>
            <param name="message">消息。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.HanderManager.GetMessageStruct(System.Guid)">
            <summary>
            求消息结构。
            </summary>
            <param name="messageID">消息ID。</param>
            <returns>消息结构。</returns>
        </member>
        <member name="T:EAS.Distributed.IStorageService">
            <summary>
            文件传输对象。
            </summary>
        </member>
        <member name="M:EAS.Distributed.IStorageService.FileIsExists(System.String,System.String,System.String)">
            <summary>
            判断文件是否已经存在。
            </summary>
            <param name="organization">组织机构。</param>
            <param name="directory">目录。</param>
            <param name="fileName">文件名称。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.IStorageService.GetFile(System.String,System.String,System.String)">
            <summary>
            从服务器读取文件。
            </summary>
            <param name="organization">组织机构。</param>
            <param name="directory">目录。</param>
            <param name="fileName">文件名称。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.IStorageService.SaveFile(System.String,System.String,System.String,System.Byte[])">
            <summary>
            把文件保存到服务器。
            </summary>
            <param name="organization">组织机构。</param>
            <param name="directory">目录。</param>
            <param name="fileName">文件名称。</param>
            <param name="data">文件内容。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.IStorageService.DeleteFile(System.String,System.String,System.String)">
            <summary>
            删除服务器文件。
            </summary>
            <param name="organization">组织机构。</param>
            <param name="directory">目录。</param>
            <param name="fileName">文件名称。</param>
            <returns></returns>
        </member>
        <member name="T:EAS.Aspect.AspectConfig">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Aspect.AspectConfig.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Aspect.AspectConfig._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectConfig.#ctor">
            <summary>
            初始化 AspectConfig 类实例。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectConfig.InternalInitialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="P:EAS.Aspect.AspectConfig.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Aspect.AspectCrosscutAttribute">
            <summary>
            Aspect横切代理特性。
            </summary>
            <remarks>
            任何需要接受Aspect横切的类，都必须加上这个特性。
            </remarks>
        </member>
        <member name="M:EAS.Aspect.AspectCrosscutAttribute.#ctor">
            <summary>
            初始化AspectCrosscutAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectCrosscutAttribute.CreateInstance(System.Type)">
            <summary>
            创建受Aspect管理的类的代理类
            </summary>
            <param name="serverType">要创建的类的类型。</param>
            <returns>受Aspect管理的类的代理类。</returns>
        </member>
        <member name="T:EAS.Aspect.AspectMethodAttribute">
            <summary>
            Aspect横切方法属性。
            </summary>
            <remarks>
            任何需要接受Aspect横切的类，都必须加上这个特性。
            </remarks>
        </member>
        <member name="M:EAS.Aspect.AspectMethodAttribute.#ctor">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectMethodAttribute.GetAspect">
            <summary>
            获取对应的方面(切面)接口。
            </summary>
            <returns>方面(切面)接口。</returns>
        </member>
        <member name="T:EAS.Sockets.Bus.SubscribeMessageHandler">
            <summary>
            订阅消息处理器。
            </summary>
        </member>
        <member name="T:EAS.DateTimeException">
            <summary>
            系统时间异常。
            </summary>
        </member>
        <member name="M:EAS.DateTimeException.#ctor">
            <summary>
            初始化DateTimeException对象实例。
            </summary>
        </member>
        <member name="M:EAS.DateTimeException.#ctor(System.String)">
            <summary>
            初始化DateTimeException对象实例。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.DateTimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化DateTimeException对象实例。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EAS.DateTimeException.#ctor(System.String,System.Exception)">
            <summary>
            初始化LicenseException对象实例。
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EAS.Services.SessionManager.Start(System.Guid)">
            <summary>
            启动一个新的服务会话。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
        </member>
        <member name="M:EAS.Services.SessionManager.Start(System.Guid,System.Object)">
            <summary>
            启动一个新的服务会话。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
            <param name="dataTag">数据标记。</param>
        </member>
        <member name="M:EAS.Services.SessionManager.Abandon(System.Guid)">
            <summary>
            终止指定的服务会话。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
        </member>
        <member name="M:EAS.Services.SessionManager.UpdateDataTag(System.Guid,System.Object)">
            <summary>
            更新会话数据标记。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
            <param name="dataTag">数据标记。</param>
        </member>
        <member name="M:EAS.Services.SessionManager.GetDataTag(System.Guid)">
            <summary>
            根据会话ID取会话标记。
            </summary>
            <param name="sessionID">会话ID。</param>
            <returns></returns>
        </member>
        <member name="P:EAS.Services.SessionManager.Instance">
            <summary>
            ServiceManager对象的唯一实例。
            </summary>
        </member>
        <member name="P:EAS.Services.SessionManager.SessionCount">
            <summary>
            服务会话统计。
            </summary>
        </member>
        <member name="T:EAS.Security.PermissionsService">
            <summary>
            权限查询服务。
            </summary>
        </member>
        <member name="M:EAS.Security.PermissionsService.Demand(System.Guid,System.String)">
            <summary>
            检查指定模块权限。
            </summary>
            <param name="module">模块Guid。</param>
            <param name="loginID">登录ID。</param>
            <returns>通过权限检查返回true，否则返回false。</returns>
        </member>
        <member name="T:EAS.Services.Locators.WcfServiceLocator">
            <summary>
            Wcf服务定位器。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator.GenWebServiceProxy(System.String,System.Type)">
            <summary>
            生成WebService代理。
            </summary>
            <param name="url">服务url。</param>
            <param name="interfaceType">接口类型。</param>
            <returns>代理对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator.GetAgentClassName(System.String)">
            <summary>
            取得Web service 代理类名称。
            </summary>
            <param name="url">Web service URL。</param>
            <returns>服务代理类名称。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory">
            <summary>
            系统默认的对象池工厂。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.IPoolFactory">
             <summary>
            对象池(Pool)生成工厂接口定义。
             </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPoolFactory.Create(System.Int32,System.Int32,EAS.Objects.IComponentAdapter)">
            <summary>
            创建一个对象池接口组件实例。
            </summary>
            <param name="initialsize">对象池的初始大小，即初始对象池在初始化时的容量。</param>
            <param name="maxSize">对象池的最大对象容量。</param>
            <param name="adapter">组件适配器对象。</param>
            <returns>对象池接口组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory.#ctor">
            <summary>
            初始化 DefaultPoolFactory　类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory.Create(System.Int32,System.Int32,EAS.Objects.IComponentAdapter)">
            <summary>
             创建一个对象池接口组件实例。
            </summary>
            <param name="initialsize">对象池的初始大小，即初始对象池在初始化时的容量。</param>
            <param name="maxSize">对象池的最大对象容量。</param>
            <param name="adapter">组件适配器对象。</param>
            <returns>对象池接口组件实例。</returns>
        </member>
        <member name="T:EAS.Objects.InjectionInfo">
            <summary>
            Objects容器中用于描述一个对象值入器的相关的属性。
            </summary>
        </member>
        <member name="M:EAS.Objects.InjectionInfo.#ctor">
            <summary>
            初始化 ObjectInfo 实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.InjectionInfo.Name">
            <summary>
            获取或设置一个值，批示对象名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.InjectionInfo.Assembly">
            <summary>
            获取或设置一个值，批示对象所在的程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.InjectionInfo.Type">
            <summary>
            获取或设置一个值，批示对象的类型。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SessionEventHandler">
            <summary>
            会话注册事件的委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SessionEventArgs">
            <summary>
            会话注册事件的参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SessionEventArgs.Session">
            <summary>
            获取注册的会话对象。
            </summary>
        </member>
        <member name="T:EAS.Messages.ISubscribeStorager">
            <summary>
            消息订阅存储接口。
            </summary>
        </member>
        <member name="M:EAS.Messages.ISubscribeStorager.Subscribe(System.String,System.String)">
            <summary>
            持久化订阅。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">消息主题。</param>
        </member>
        <member name="M:EAS.Messages.ISubscribeStorager.Unsubscribe(System.String,System.String)">
            <summary>
            持久化退订。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="topic">消息主题。</param>
        </member>
        <member name="M:EAS.Messages.ISubscribeStorager.LoadSubscribes">
            <summary>
            装载订阅信息。
            </summary>
            <returns>系统之中的订阅清单。</returns>
        </member>
        <member name="M:EAS.Messages.ISubscribeStorager.Write(System.String,EAS.Messages.QueueMessage)">
            <summary>
            写入消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Messages.ISubscribeStorager.Read(System.String,EAS.Messages.QueueMessage@)">
            <summary>
            读消息。
            </summary>
            <param name="subscriber">订阅者。</param>
            <param name="message">消息对象。</param>
            <returns>成功读取返回true,否则返回false。</returns>
        </member>
        <member name="T:EAS.Serialization.ISerializer">
            <summary>
            Bin序列化器接口。
            </summary>
        </member>
        <member name="M:EAS.Serialization.ISerializer.Initialize">
            <summary>
            初始化序列器。
            </summary>
        </member>
        <member name="M:EAS.Serialization.ISerializer.Serialize(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="instance">对象实例。</param>
            <returns>序列化流。</returns>
        </member>
        <member name="M:EAS.Serialization.ISerializer.Deserialize(System.Byte[])">
            <summary>
            反序列化对象。
            </summary>
            <param name="buffer">序列化流。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="T:EAS.Distributed.IAppService">
            <summary>
            应用程序服务。
            </summary>
        </member>
        <member name="M:EAS.Distributed.IAppService.Start">
            <summary>
            启动Socket服务。
            </summary>
        </member>
        <member name="M:EAS.Distributed.IAppService.Stop">
            <summary>
            停止Socket服务。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.StandardInterceptor">
            <summary>
            标准拦截器。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.#ctor">
            <summary>
            初始化StandardInterceptor对象实例。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.PreProceed(EAS.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            在方法调用之前的处理。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="args">调用参数。</param>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.PostProceed(EAS.DynamicProxy.IInvocation,System.Object@,System.Object[])">
            <summary>
            在方法调用之后的处理。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="retValue">返回值。</param>
            <param name="args">调用参数。</param>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.Intercept(EAS.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            拦截方法的执行。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="args">方法参数。</param>
            <returns>返回结果。</returns>
        </member>
        <member name="T:EAS.Distributed.Response">
            <summary>
            RIA响应消息。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Response.#ctor">
            <summary>
            初始化响应消息。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Response.#ctor(System.Exception)">
            <summary>
            使用一个错误初始化响应消息。
            </summary>
            <param name="exc">异常实例。</param>
        </member>
        <member name="M:EAS.Distributed.Response.#ctor(System.Object)">
            <summary>
            根据返回对象构造响应消息。
            </summary>
            <param name="Data">返回数据。</param>
        </member>
        <member name="M:EAS.Distributed.Response.Deserialize">
            <summary>
            反序列化响应消息为对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.Response.Serialize">
            <summary>
            序列化RIA响应为byte[]。
            </summary>
            <returns>byte[]。</returns>
        </member>
        <member name="M:EAS.Distributed.Response.Load(System.Byte[])">
            <summary>
            从字节流中加载Response对象。
            </summary>
            <param name="buffer">字节流。</param>
            <returns>Response对象。</returns>
        </member>
        <member name="M:EAS.Distributed.Response.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载消息对象。
            </summary>
            <param name="reader">BufferReader。</param>
        </member>
        <member name="M:EAS.Distributed.Response.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            保存到指定的BufferWriter。
            </summary>
            <param name="writer">BufferWriter。</param>
        </member>
        <member name="P:EAS.Distributed.Response.Message">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Response.Type">
            <summary>
            参数类型。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Response.Pack">
            <summary>
            是否包装。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Response.Body">
            <summary>
            对象。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Bus.AddPublisherMessageHandler">
            <summary>
            发布者注册。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Bus.PublisherSstatusChangedMessage">
            <summary>
            发布者状态变化消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.PublisherSstatusChangedMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.PublisherSstatusChangedMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Bus.PublisherSstatusChangedMessage.Publisher">
            <summary>
            发布者。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.PublisherSstatusChangedMessage.Topic">
            <summary>
            主题。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.PublisherSstatusChangedMessage.Online">
            <summary>
            在线。
            </summary>
        </member>
        <member name="T:EAS.Loggers.EmptyLogger">
            <summary>
            空日志实体，用于不需要输出任务日志的场景。
            </summary>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Info(System.String)">
            <summary>
            记录提示信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Warn(System.String)">
            <summary>
            记录警告信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Debug(System.String)">
            <summary>
            记录调试信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Error(System.String)">
            <summary>
            记录错误信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Error(System.Exception)">
            <summary>
            记录错误信息。
            </summary>
            <param name="exc">异常。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Write(System.String,System.String)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="message">日志信息。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Write(System.String,System.Exception)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="exc">错误信息。</param>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Open">
            <summary>
            打开日志记录器。
            </summary>
        </member>
        <member name="M:EAS.Loggers.EmptyLogger.Close">
            <summary>
            关闭日志记录器。
            </summary>
        </member>
        <member name="P:EAS.Loggers.EmptyLogger.Level">
            <summary>
            日志记录级别：0x01|仅错误,0x02|错误和调试信息,0x03|全部。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.SocketServiceLocator">
            <summary>
            Socket服务定位器。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.CreateProxy``1(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造socket代理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="timeout"></param>
            <param name="enableLogging"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Services.Locators.SocketServiceProxyInterceptor">
            <summary>
            服务代理拦截器。
            </summary>
        </member>
        <member name="T:EAS.Application">
            <summary>
            AgileEAS.NET中间件/平台中的插件平台(IApplication的抽像实现)。
            </summary>
        </member>
        <member name="T:EAS.Modularization.IApplication">
            <summary>
            定义AgileEAS.NET平台应用程序接口。
            </summary>
            <remarks>
            应用程序即插件的运行容器或者插件的运行环境。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.IApplication.StartModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.StartModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.StartModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.Demand(System.Guid)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.Modularization.IApplication.Demand(System.Guid,EAS.Security.Privileges)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <param name="privileges">权限值。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.Modularization.IApplication.OpenModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.OpenModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.OpenModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.CloseModule(System.Object)">
            <summary>
            关闭模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Modularization.IApplication.CloseModule">
            <summary>
            关闭当前模块。
            </summary>
        </member>
        <member name="M:EAS.Modularization.IApplication.CallScript(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行脚本。
            </summary>
            <param name="script">脚本代码。</param>
            <param name="args">调用参数。</param>
            <remarks>
            动态向用户提供平台的调用。
            </remarks>
        </member>
        <member name="P:EAS.Modularization.IApplication.Name">
            <summary>
            获取应用程序名称。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.Context">
            <summary>
            获取对象上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.Container">
            <summary>
            获取组件容器。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.Session">
            <summary>
            获取容器的当前会话。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.Time">
            <summary>
            当前系统时间/服务器时间。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.WorkflowRuntime">
            <summary>
            获取工作流运行时环境。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.ActiveAddIn">
            <summary>
            活动插件。
            </summary>
        </member>
        <member name="P:EAS.Modularization.IApplication.AddIns">
            <summary>
            插件集合。
            </summary>
        </member>
        <member name="E:EAS.Modularization.IApplication.Started">
            <summary>
            当平台启动完成后发生。
            </summary>
        </member>
        <member name="E:EAS.Modularization.IApplication.Notify">
            <summary>
            当平台发出通知时发生。
            </summary>
        </member>
        <member name="E:EAS.Modularization.IApplication.AddLoad">
            <summary>
            平台成功加载模块之后触发。
            </summary>
        </member>
        <member name="E:EAS.Modularization.IApplication.AddInClosing">
            <summary>
            平台关闭模块时触发。
            </summary>
        </member>
        <member name="M:EAS.Application.#ctor">
            <summary>
            初始化Platform对象实例。
            </summary>
        </member>
        <member name="M:EAS.Application.SetInstance(EAS.Modularization.IApplication)">
            <summary>
            设置AgileEAS.NET平台实例。
            </summary>
            <param name="instance">平台实例对象。</param>
        </member>
        <member name="M:EAS.Application.StartModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Application.StartModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.Application.StartModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.Application.Demand(System.Guid)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.Application.Demand(System.Guid,EAS.Security.Privileges)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <param name="privileges">权限值。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.Application.OpenModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Application.OpenModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.Application.OpenModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.Application.CloseModule(System.Object)">
            <summary>
            关闭模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Application.CloseModule">
            <summary>
            关闭当前模块。
            </summary>
        </member>
        <member name="M:EAS.Application.CallScript(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行脚本。
            </summary>
            <param name="script">脚本代码。</param>
            <param name="args">调用参数。</param>
            <remarks>
            动态向用户提供平台的调用。
            </remarks>
        </member>
        <member name="M:EAS.Application.OnStarted(System.EventArgs)">
            <summary>
            引发 Started 事件。
            </summary>
            <param name="e">一个 System.EventArgs，其中包含事件数据。</param>
        </member>
        <member name="M:EAS.Application.OnNotify(EAS.Messages.NotifyEventArgs)">
            <summary>
            引发 Notify 事件。
            </summary>
            <param name="e">一个 EAS.NotifyEventArgs，其中包含事件数据。</param>
        </member>
        <member name="M:EAS.Application.OnAddLoad(EAS.Modularization.AddInEventArgs)">
            <summary>
            引发 AddLoad 事件。
            </summary>
            <param name="e">一个 EAS.AddInEventArgs，其中包含事件数据。</param>
        </member>
        <member name="M:EAS.Application.OnAddInClosing(EAS.Modularization.AddInEventArgs)">
            <summary>
            引发 AddInClosing 事件。
            </summary>
            <param name="e">一个 EAS.AddInEventArgs，其中包含事件数据。</param>
        </member>
        <member name="P:EAS.Application.Instance">
             <summary>
            插件平台的唯一实例。
             </summary>
        </member>
        <member name="P:EAS.Application.Name">
            <summary>
            获取应用程序名称。
            </summary>
        </member>
        <member name="P:EAS.Application.Time">
            <summary>
            系统当前时间。
            </summary>
        </member>
        <member name="P:EAS.Application.Context">
            <summary>
            获取对象上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Application.Container">
            <summary>
            获取组件容器。
            </summary>
        </member>
        <member name="P:EAS.Application.Session">
            <summary>
            获取容器的当前会话。
            </summary>
        </member>
        <member name="P:EAS.Application.WorkflowRuntime">
            <summary>
            获取工作流运行时环境。
            </summary>
        </member>
        <member name="P:EAS.Application.ActiveAddIn">
            <summary>
            活动插件。
            </summary>
        </member>
        <member name="P:EAS.Application.AddIns">
            <summary>
            插件集合。
            </summary>
        </member>
        <member name="E:EAS.Application.Started">
            <summary>
            当平台启动完成后发生。
            </summary>
        </member>
        <member name="E:EAS.Application.Notify">
            <summary>
            当平台发出通知时发生。
            </summary>
        </member>
        <member name="E:EAS.Application.AddInClosing">
            <summary>
            平台关闭模块时触发。
            </summary>
        </member>
        <member name="E:EAS.Application.AddLoad">
            <summary>
            平台成功加载模块之后触发。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ErrorEventHandler">
            <summary>
            客户端发生错误时事件的委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ErrorEventArgs">
            <summary>
            客户发生错误时事件的参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ErrorEventArgs.Exception">
            <summary>
            获取已经发生的错误异常对象。
            </summary>
        </member>
        <member name="M:EAS.Reflection.MethodInvoker.GetMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            This function return a delgate to the target procedures.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="Method">The taget MethodName information</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.MethodInvoker.GetMethodInvoker(System.Type,System.String)">
             <summary>
             This function return a delgate to the target procedures.
             Using the returning deletege you can call the target procedures so fast.
             </summary>
            <param name="TargetType">Target object type.</param>
             <param name="MethodName">Method name.</param>
             <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="T:EAS.Sockets.Messages.MessageAttribute">
            <summary>
            消息ID属性。
            </summary>
            <remarks>
            标记网络消息，确定其唯一的ID。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageAttribute.#ctor(System.String)">
            <summary>
            初始化MessageAttribute对象实例。
            </summary>
            <param name="messageID">消息ID。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化MessageAttribute对象实例。
            </summary>
            <param name="messageID">消息ID。</param>
            <param name="description">消息说明。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageAttribute.MessageID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageAttribute.Description">
            <summary>
            消息说明。
            </summary>
        </member>
        <member name="T:EAS.Security.Cryptography.BufferWriter">
            <summary>
            基于字节流的消息编写器。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferWriter.#ctor">
            <summary>
            初始化MessageWriter对象实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferWriter.Write(System.Byte[])">
            <summary>
            写入字节流。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节流。
            </summary>
            <param name="value">字节流。</param>
            <param name="offset">便宜量。</param>
            <param name="Length">长度。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferWriter.Write(System.Int32)">
            <summary>
            写入整数。
            </summary>
            <param name="value">字节流。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferWriter.ToArray">
            <summary>
            将内容写入字节数组。
            </summary>
            <returns>字节数组。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferWriter.Dispose">
            <summary>
            释放占用的缓存区。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.BufferWriter.Length">
            <summary>
            消息流长度。
            </summary>
        </member>
        <member name="T:EAS.Security.Cryptography.BufferReader">
            <summary>
            基于字节流的消息读取器。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferReader.#ctor(System.Byte[])">
            <summary>
            初始化MessageReader对象实例。
            </summary>
            <param name="buffer">字节流。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            初始化MessageReader对象实例。
            </summary>
            <param name="buffer">字节流。</param>
            <param name="position">偏移量。</param>
            <param name="Length">长度。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferReader.ReadInt32">
            <summary>
            读32位整数。
            </summary>
            <returns>32位整数。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferReader.ReadBytes">
            <summary>
            读字节流。
            </summary>
            <returns>字节流。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.BufferReader.Dispose">
            <summary>
            释放占用的缓存区。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.BufferReader.Length">
            <summary>
            消息流长度。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.BufferReader.Position">
            <summary>
            当前读取便宜量。
            </summary>
        </member>
        <member name="T:EAS.Distributed.ICacheService">
            <summary>
            服务提供者接口。
            </summary>
        </member>
        <member name="M:EAS.Distributed.ICacheService.Set(System.String,System.Byte[])">
            <summary>
            添加缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:EAS.Distributed.ICacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">键</param>
            <returns>返回值</returns>
        </member>
        <member name="M:EAS.Distributed.ICacheService.Exist(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.ICacheService.Remove(System.String)">
            <summary>
            删除
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:EAS.Distributed.ICacheService.Count">
            <summary>
            键值对数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.ICacheService.Memory">
            <summary>
            程序占用内存
            </summary>
            <returns></returns>
        </member>
        <member name="T:EAS.Aspect.IAspectContext">
            <summary>
            定义Aspect的上下文接口。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Target">
            <summary>
            目标对象。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Method">
            <summary>
            调用方法。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Arguments">
            <summary>
            方法参数。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.ReturnValue">
            <summary>
            返回值。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Exception">
            <summary>
            异常信息。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.NowTime">
            <summary>
            当前时间。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.ServerContext.SessionAbandoned(System.Object,EAS.Sockets.SessionEventArgs)">
            <summary>
            会话终止事件/下线/转离线。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EAS.Sockets.Bus.ServerContext.Publish(EAS.Messages.QueueMessage,EAS.Sockets.SocketSession)">
            <summary>
            发布消息/如果不在线/存到离线消息。
            </summary>
            <param name="eventMessage">事件消息。</param>
            <param name="session">会话。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.ServerContext.SendOffLineEvents(System.String)">
            <summary>
            回发离线消息。
            </summary>
            <param name="subscriber">订阅者。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.ServerContext.Write(System.String,System.String)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="message">日志信息。</param>
        </member>
        <member name="M:EAS.Sockets.Bus.ServerContext.Write(System.String,System.Exception)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="exc">错误信息。</param>
        </member>
        <member name="P:EAS.Sockets.Bus.ServerContext.Publishers">
            <summary>
            在线发布者。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.ServerContext.OnSessions">
            <summary>
            在线会话/订阅者。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.ServerContext.OffSessions">
            <summary>
            持久化关系/离线订阅。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.ServerContext.SocketServer">
            <summary>
            Socket服务器。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.ServerContext.SubscribeStorager">
            <summary>
            订阅存储器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Bus.SessionInfo">
            <summary>
            会话信息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SessionInfo.Subscriber">
            <summary>
            订阅者。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Bus.SessionInfo.Topic">
            <summary>
            主题。
            </summary>
        </member>
        <member name="P:EAS.Data.EnumData.ValueKeys">
            <summary>
            值==>映射。
            </summary>
        </member>
        <member name="P:EAS.Data.EnumData.NameKeys">
            <summary>
            名称==>映射。
            </summary>
        </member>
        <member name="P:EAS.Data.EnumData.TextKeys">
            <summary>
            说明==>映射。
            </summary>
        </member>
        <member name="M:EAS.Data.EnumStorage.GetEnumInfo(System.Type)">
            <summary>
            求记录。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.EnumItem">
            <summary>
            枚举项目定义。
            </summary>
        </member>
        <member name="M:EAS.Data.EnumItem.ToString">
            <summary>
            ToString()。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.EnumItem.GetEnumInfo(System.Type)">
            <summary>
            根据枚举类型返回类型中的所有值，文本及描述。
            </summary>
            <param name="type">枚举类型。</param>
            <returns>枚举项目集合。</returns>
        </member>
        <member name="M:EAS.Data.EnumItem.GetEnumDescription(System.Enum)">
            <summary>
            根据枚举值返回该枚举的描述。
            </summary>
            <param name="enumValue">枚举值。</param>
            <returns>枚举值描述。</returns>
        </member>
        <member name="M:EAS.Data.EnumItem.GetEnumDescription(System.Type,System.String)">
            <summary>
            根据枚举类型和value值返回该值对应的描述。
            </summary>
            <param name="enumType">枚举类型。</param>
            <param name="value">枚举值。</param>
            <returns>枚举值描述。</returns>
        </member>
        <member name="M:EAS.Data.EnumItem.GetEnumValueByDescription(System.Type,System.String)">
            <summary>
            根据枚举类型和描述返回该值对应的枚举值。
            </summary>
            <param name="enumType">枚举类型。</param>
            <param name="description">枚举值描述。</param>
            <returns>枚举值。</returns>
        </member>
        <member name="P:EAS.Data.EnumItem.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Data.EnumItem.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="P:EAS.Data.EnumItem.Description">
            <summary>
            说明。
            </summary>
        </member>
        <member name="M:EAS.Distributed.MethodText.GetText(System.Reflection.MethodBase,System.Object[])">
            <summary>
            求出方法调用参数。
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Security.Hash">
            <summary>
            Hash对象。
            </summary>
            <remarks> 为提供散列算法支持，CA认证的基础。为散列提供方法支持。散列算法可以用于进行数字签名。</remarks>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[])">
            <summary>
            计算指定字节数组的哈希值。返回长度为32的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <returns>计算所得的哈希代码。该代码长度为32个字节。</returns>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[],System.Int32)">
            <summary>
            计算指定字节数组的哈希值。返回指定长度（20、32、48、64）的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <param name="length">指定希望的哈希代码的长度，单位为字节，目前支持的长度为20、32、48、64。</param>
            <returns>计算所得的哈希代码。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">length 不是20、32、48或者64。</exception>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.IO.Stream)">
            <summary>
            计算Stream的哈希值。返回长度为32的字节数组。
            </summary>
            <param name="stream">要计算其哈希代码的输入。</param>
            <returns>计算所得的哈希代码。该代码长度为32个字节。</returns>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.IO.Stream,System.Int32)">
            <summary>
            计算Stream的哈希值。返回指定长度（20、32、48、64）的字节数组。
            </summary>
            <param name="stream">要计算其哈希代码的输入。</param>
            <param name="length">指定希望的哈希代码的长度，单位为字节，目前支持的长度为20、32、48、64。</param>
            <returns>计算所得的哈希代码。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">length 不是20、32、48或者64。</exception>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算指定字节数组的指定区域的哈希值。返回长度为32的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <param name="offset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="count">数组中用作数据的字节数。</param>
            <returns>计算所得的哈希代码。该代码长度为32个字节。</returns>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            计算指定字节数组的指定区域的哈希值。返回指定长度（20、32、48、64）的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <param name="offset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="count">数组中用作数据的字节数。</param>
            <param name="length">指定希望的哈希代码的长度，单位为字节，目前支持的长度为20、32、48、64。</param>
            <returns>计算所得的哈希代码。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">length 不是20、32、48或者64。</exception>
        </member>
        <member name="T:EAS.Objects.NoComponentException">
            <summary>
            容器中无此组件。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor">
            <summary>
            初始化NoComponentException对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor(System.String)">
            <summary>
            初始化NoComponentException实例。
            </summary>
            <param name="componentKey">组件的key</param>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor(System.Type)">
            <summary>
            初始化NoComponentException实例。
            </summary>
            <param name="componentType">组件的类型信息。</param>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 NoComponentException 类的新实例。
            </summary>
            <param name="info">SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">StreamingContext，它包含有关源或目标的上下文信息</param>
        </member>
        <member name="T:EAS.Objects.NoComponentImplException">
            <summary>
            容器中无此组件。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentImplException.#ctor">
            <summary>
            初始化NoComponentImplException对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentImplException.#ctor(System.String)">
            <summary>
            初始化NoComponentException实例。
            </summary>
            <param name="componentKey">组件的key</param>
        </member>
        <member name="M:EAS.Objects.NoComponentImplException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 NoComponentImplException 类的新实例。
            </summary>
            <param name="info">SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">StreamingContext，它包含有关源或目标的上下文信息</param>
        </member>
        <member name="T:EAS.Objects.Injection.ConstructorInjector">
            <summary>
            构造器注入器，完成对象构造函数注入。
            </summary>
            <remarks> 构造注入完成Objects Type 2 构造子注入，两个对象实现的注册使用构造函数进行注入关联。 </remarks>
        </member>
        <member name="M:EAS.Objects.Injection.ConstructorInjector.#ctor">
            <summary>
            初始化 ConstructorInjector 类实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.ConstructorInjector.#ctor(System.Object)">
            <summary>
            使用接受注入对象实例创建 ConstructorInjector 类实例。
            </summary>
            <param name="parentInstance">注入对象实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.ConstructorInjector.Inject">
            <summary>
            完成对象的注入。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.ConstructorInjector.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="T:EAS.Objects.DefaultContainer">
            <summary>
            DefaultContainer 的摘要说明。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.m_ComponentInfos">
            <summary>
            组件配置定义。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.componentInstances">
            <summary>
            私有内部成员，组件容器中的所有注册组件实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.lifecycleManagers">
            <summary>
            私有内部成员，组件容器中的组件生存期管理对象集合。其值为组件键/生存期管理对象接口实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.componentAdapters">
            <summary>
            私有内部成员，组件容器中的组件适配器对象集合。其值为组件键/组件适配器接口实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.name">
            <summary>
            容器名称。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer._AssemblyLoader">
            <summary>
            程序集装载器。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.fInitialize">
            <summary>
            是否已初始化。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.#ctor">
            <summary>
            初始化 DefaultContainer 实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.#ctor(EAS.Objects.IClassLoader)">
            <summary>
            初始化 DefaultContainer 实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.Finalize">
            <summary>
            DefaultContainer 对象析构函数
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.Initialize">
            <summary>
            初始化组件容器。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(EAS.Objects.ComponentInfo)">
            <summary>
            根据组件组件信息向容器注册组件实现。
            </summary>
            <param name="componentInfo">组件信息。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type)">
            <summary>
            根据组件组件key及组件实现类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation"></param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            根据组件key、接口类型及实现类型中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
            <param name="lifestyleParameters"> 组件生命周期相关参数，参数为一个字符串，其中由“：”分隔。 </param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.Type)">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.Type,System.Type)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.Object)">
            <summary>
            根据组件实例向组件容器中注册组件。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.Type)">
            <summary>
            根据组件实现类型向组件容器中注册组件。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Type)">
            <summary>
            根据组件key、组件实现向组件容器中注册组件。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Object)">
            <summary>
            根据组件key及组件实现向组件容器中注册组件。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>
            根据组件key、接口类型及组件实例向组件容器中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Type,System.Object,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件key、接口类型、组件实例及组件生存类型向组件容器中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentInstance">组件实例。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
            <param name="lifestyleParameters"> 组件生命周期相关参数，参数为一个字符串，其中由“：”分隔。 </param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.RemoveComponent(System.String)">
            <summary>
            根据组件key从组件容器中移除组件实现。
            </summary>
            <param name="componentKey">组件key。</param>		
        </member>
        <member name="M:EAS.Objects.DefaultContainer.RemoveComponent(System.Object)">
            <summary>
            根据组件实例从组件容器中移除组件实现。
            </summary>
            <param name="componentInstance">组件实例。</param>		
        </member>
        <member name="M:EAS.Objects.DefaultContainer.RemoveComponent(System.String,System.Object)">
            <summary>
            根据组件key及组件实例从组件容器中移除组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentInstance">组件实例。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent(System.String)">
            <summary>
            根据组件key判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentKey">组件key。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent(System.Object)">
            <summary>
            根据组件实例判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent(System.Type)">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.ReleaseComponent(System.Object)">
            <summary>
            根据组件实例从组件容器中释放组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.ReleaseComponent(System.String)">
            <summary>
            根据组件Key从组件容器中释放组件实例。
            </summary>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance(System.Type)">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <param name="serviceType">组件类型。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetServiceComponentInstance(System.Type)">
            <summary>
            根据组件服务类型取得组件实例。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstances(System.Type)">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentAdapter(System.String)">
            <summary>
            根据组件key取得与组件相关的组件适配器。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>指定组件的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentAdapter(System.Type)">
            <summary>
            根据组件类型取得与组件相关的组件适配器。
            </summary>
            <param name="componentType">组件类型。</param>
            <returns>指定组件类型的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentAdapters(System.Type)">
            <summary>
            根据组件类类型获取组件适配器列表。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>指定组件类型的组件适配器列表。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetLifecycleManager(System.String)">
            <summary>
            根据组件key取得与组件相关的组件生命周期管理器。
            </summary>
            <param name="componentKey"> 组件的键。</param>
            <returns>指定组件键的生命周期管理器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetLifecycleManager(System.Type)">
            <summary>
            根据组件实现类型取得与组件相关的组件生命周期管理器。
            </summary>
            <param name="componentType"> 组件的实现类型。 </param>
            <returns>指定组件类型的生命周期管理器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetLifecycleManagers(System.Type)">
            <summary>
            根据组件接口类型取得与组件相关的组件生命周期管理器。
            </summary>
            <param name="serviceType"> 组件的接口类型。 </param>
            <returns>指定组件类型的生命周期管理器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``1">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``1(System.String)">
            <summary>
            根据组件组件key及组件实现类型向容器注册组件实现。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件key。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2">
            <summary>
            根据组件服务类型及实现类型向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2(System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
            <param name="lifestyleParameters">生命周期参数。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent``1">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>存在匹配的组件则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance``1(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance``1">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetServiceComponentInstance``1">
            <summary>
            根据组件服务类型取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstances``1">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String)">
            <summary>
            内部方法。
            </summary>
            <param name="componentKey"></param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.OutputAdapters">
            <summary>
            输出适配器定义。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.Name">
             <summary>
            获取容器名称。
             </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.ComponentInfos">
            <summary>
            组织配置信息。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.Item(System.String)">
            <summary>
            组件索引器，获取指定Key值的组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.Item(System.Type)">
            <summary>
            组件索引器，获取指定接口类型的组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.ComponentInstances">
            <summary>
            获取一个值，批示容器中所有的组件实例列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.ComponentAdapters">
            <summary>
            获取一个值，该值批示组件容器中的所有组件适配器列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.LifecycleManagers">
            <summary>
            获取一个值，该值批示组件容器中的所有组件生命周期管理器列表。
            </summary>
        </member>
        <member name="M:EAS.Objects.AssemblyCacheProvider.#ctor">
            <summary>
            初始化 AssemblyCacheProvider 对象实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.AssemblyCacheProvider.Instance">
            <summary>
            对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Objects.EmptyClassLoader">
            <summary>
            空的类加载器。
            </summary>
        </member>
        <member name="M:EAS.Objects.EmptyClassLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.EmptyClassLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketServer">
            <summary>
            Socket服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.#ctor">
            <summary>
            初始化TcpServer对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.#ctor(System.Int32)">
            <summary>
            初始化服务器端。
            </summary>
            <param name="numConcurrence">并发的连接数量。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AddMessage``1">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AddMessage``2">
            <summary>
            注册消息。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <typeparam name="THandler">消息处理器类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.Initialize">
            <summary>
            服务端初始化
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.StartServer">
            <summary>
            启动服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.StopServer">
            <summary>
            停止服务器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AbandonSession(System.Guid)">
            <summary>
            终止客户端会话。
            </summary>
            <param name="clientID">会话ID。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AbandonSession(EAS.Sockets.SocketSession)">
            <summary>
            供NetSession调用的方法。
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AbandonSocket(System.Net.Sockets.Socket)">
            <summary>
            终止会话。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.StartAccept">
            <summary>
            监听/接受连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.OnAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接接受完成。
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接受请求/开启会话。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.CreateSession(System.Net.Sockets.Socket)">
            <summary>
            创建客户会话。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.GetKeepAliveSetting(System.Int32,System.Int32,System.Int32)">
            <summary>
            建立 keepalive 作業所需的輸入資料
            </summary>
            <param name="onOff">是否啟用1:on ,0:off</param>
            <param name="keepAliveTime">當沒收到client的ack時，等待多久才通知斷線(millisecond)</param>
            <param name="keepAliveInterval">偵測間隔(millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.SocketServer.Send(System.Guid,EAS.Sockets.Messages.IMessage)">
            <summary>
            向指定客户端发送消息。
            </summary>
            <param name="clientID">客户端ID。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.SetProtocol``1">
            <summary>
            设置通信协议。
            </summary>
            <typeparam name="T">协议类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.SocketServer.P2pBind(System.Guid,System.Net.EndPoint)">
            <summary>
            p2p绑定。
            </summary>
            <param name="tcpSession"></param>
            <param name="remoteUdp"></param>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_TcpSocket">
            <summary>
            服务器端Socket
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_Connections">
            <summary>
            当前连接数
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_Concurrence">
            <summary>
            最大并发量，默认1024
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.WriteError(System.Exception)">
            <summary>
            写异常信息。
            </summary>
            <param name="exc"></param>
        </member>
        <member name="P:EAS.Sockets.SocketServer.NumConnections">
            <summary>
            获取当前的并发数
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.MaxConcurrence">
            <summary>
            最大并发数
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.ClientCount">
            <summary>
            总练接数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.ServerState">
            <summary>
            服务器状态。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.SessionsEx">
            <summary>
            会话记录。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Sessions">
            <summary>
            客户端会话集合。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.KeepAliveValue">
            <summary>
            心跳时间，秒。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Logger">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Item(System.String)">
            <summary>
            获取或设置指定名称的属性值。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Properties">
            <summary>
            属性集合。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.HanderManager">
            <summary>
            处理器。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.Error">
            <summary>
            发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.ServerStarted">
            <summary>
            服务器启动之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.ServerStopped">
            <summary>
            服务器停止之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.SessionStarted">
            <summary>
            会话开始后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.SessionAbandoned">
            <summary>
            会话结束后前触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Guid">
            <summary>
            通信引擎的全局唯一标识符号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.LocalEndPoint">
            <summary>
            IP终结点。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.TcpPort">
            <summary>
            端口号/tcp。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.UdpPort">
            <summary>
            端口号/udp。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.SocketUdp">
            <summary>
            关联的SocketUdp对象。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.SeaPool">
            <summary>
            Sea池。
            </summary>
        </member>
        <member name="T:EAS.Sockets.NetInvokeTask">
            <summary>
            网络异步 Invoke 任务，提供简单的异步通信调用。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetInvokeTask.CompleteAction">
            <summary>
            已重写，任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetInvokeTask.Complete(EAS.Sockets.Messages.IMessage)">
            <summary>
            异步网络调用返回消息。
            </summary>
            <param name="message">返回消息。</param>
        </member>
        <member name="P:EAS.Sockets.NetInvokeTask.Message">
            <summary>
            调用结果。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerStopEventHandler">
            <summary>
            服务器停止事件委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerStopEventArgs">
            <summary>
            服务器停止事件参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerStopEventArgs.Cancel">
            <summary>
            获取或者设置一个值，该值指示是否要取消停止过程。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketService">
            <summary>
            SocketService服务接口定义。
            </summary>
            <remarks>
            一个Socket服务器可以承载多种/个Socket服务，一个Socket服务处理一种业务，如IM SocketService 处理IM相关的即时通讯业务，而WF SocketService 处理工作流相关的服务，这两种Socket服务可以同时运行在一个Socket服务器之中。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.ISocketService.Initialize(EAS.Sockets.ISocketServer)">
            <summary>
            使用ServerEngine初始化SocketService。
            </summary>
            <param name="socketServer">Socket服务器对象。</param>
        </member>
        <member name="T:EAS.Serialization.JsonSerializer">
            <summary>
            Json格式序列化。
            </summary>
        </member>
        <member name="M:EAS.Serialization.JsonSerializer.Serialize``1(``0)">
            <summary>
            使用Json序列化对象
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>Json字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            使用Json反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">Json字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.JsonSerializer.Serialize(System.Type,System.Object)">
            <summary>
            使用Json序列化对象
            </summary>
            <param name="T">对象类型。</param>
            <param name="instance">对象。</param>
            <returns>Json字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.JsonSerializer.Deserialize(System.Type,System.String)">
            <summary>
            使用Json反序列化对象。
            </summary>
            <param name="T">对象类型。</param>
            <param name="json">Json字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="T:EAS.Security.Cryptography.RSA">
            <summary>
            非对称RSA加密类。
            </summary>
            <remarks>
            支持私匙加密/公钥解密，相对于微软提供的可以自由使用配对算法。
            </remarks>
        </member>
        <member name="F:EAS.Security.Cryptography.RSA.DWKEYSIZE">
            <summary>
            RSA的容器 可以解密的源字符串长度为 DWKEYSIZE/8-11。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.GetRASKey">
            <summary>
            得到RSA的解谜的密匙对
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.CheckSourceValidate(System.String)">
            <summary>
            检查明文的有效性 DWKEYSIZE/8-11 长度之内为有效 中英文都算一个字符
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.ComponentKey(System.Byte[],System.Byte[])">
            <summary>
            组合成密匙字符串
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.ComponentKeyBuffer(System.Byte[],System.Byte[])">
            <summary>
            组合成密匙字符串
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.ResolveKey(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            解析密匙
            </summary>
            <param name="key">密匙</param>
            <param name="b1">RSA的相应参数1</param>
            <param name="b2">RSA的相应参数2</param>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.ResolveKey(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            解析密匙
            </summary>
            <param name="buffer">密匙</param>
            <param name="b1">RSA的相应参数1</param>
            <param name="b2">RSA的相应参数2</param>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Encrypt(System.String,System.String)">
            <summary>
            字符串加密
            </summary>
            <param name="source">源字符串 明文</param>
            <param name="key">密匙</param>
            <returns>加密遇到错误将会返回原字符串</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Decrypt(System.String,System.String)">
            <summary>
            字符串解密
            </summary>
            <param name="encryptString">密文</param>
            <param name="key">密钥</param>
            <returns>遇到解密失败将会返回原字符串</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Encrypt(System.Byte[],System.String)">
            <summary>
            字符串加密
            </summary>
            <param name="source">源字符串 明文</param>
            <param name="key">密匙</param>
            <returns>加密遇到错误将会返回原字符串</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Decrypt(System.Byte[],System.String)">
            <summary>
            字符串解密
            </summary>
            <param name="source">密文</param>
            <param name="key">密钥</param>
            <returns>遇到解密失败将会返回原字符串</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Encrypt(System.String,EAS.Security.Cryptography.BigInteger,EAS.Security.Cryptography.BigInteger)">
            <summary>
            用指定的密匙加密 
            </summary>
            <param name="source">明文</param>
            <param name="d">可以是RSACryptoServiceProvider生成的D</param>
            <param name="n">可以是RSACryptoServiceProvider生成的Modulus</param>
            <returns>返回密文</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Decrypt(System.String,EAS.Security.Cryptography.BigInteger,EAS.Security.Cryptography.BigInteger)">
            <summary>
            用指定的密匙加密 
            </summary>
            <param name="source">密文</param>
            <param name="e">可以是RSACryptoServiceProvider生成的Exponent</param>
            <param name="n">可以是RSACryptoServiceProvider生成的Modulus</param>
            <returns>返回明文</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Encrypt(System.Byte[],EAS.Security.Cryptography.BigInteger,EAS.Security.Cryptography.BigInteger)">
            <summary>
            用指定的密匙加密。
            </summary>
            <param name="source">明文</param>
            <param name="d">可以是RSACryptoServiceProvider生成的D</param>
            <param name="n">可以是RSACryptoServiceProvider生成的Modulus</param>
            <returns>返回密文</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.RSA.Decrypt(System.Byte[],EAS.Security.Cryptography.BigInteger,EAS.Security.Cryptography.BigInteger)">
            <summary>
            用指定的密匙加密 
            </summary>
            <param name="source">密文</param>
            <param name="e">可以是RSACryptoServiceProvider生成的Exponent</param>
            <param name="n">可以是RSACryptoServiceProvider生成的Modulus</param>
            <returns>返回明文</returns>
        </member>
        <member name="T:EAS.Modularization.AddInEventHandler">
            <summary>
            定义模块处理代理。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">包含事件数据的 EAS.AddInEventArgs。</param>
        </member>
        <member name="T:EAS.Modularization.AddInEventArgs">
            <summary>
            模块加载和关闭事件。
            </summary>
        </member>
        <member name="M:EAS.Modularization.AddInEventArgs.#ctor(System.Object)">
            <summary>
            初始化AddInEventArgs对象实例。
            </summary>
            <param name="addIn"></param>
        </member>
        <member name="P:EAS.Modularization.AddInEventArgs.AddIn">
            <summary>
            获取模块插件。
            </summary>
        </member>
        <member name="T:EAS.Workflow.IWorkflowDataEntity">
            <summary>
            工作流数据实体接口定义。
            </summary>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.Eval``1(System.String)">
            <summary>
            对表达式进行计算/求值。
            </summary>
            <typeparam name="TValue">返回值类型。</typeparam>
            <param name="expression">要计算的表达式,如"1+2+3+4"。</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.Eval(System.String)">
            <summary>
            对表达式进行计算/求值。
            </summary>
            <param name="expression">要计算的表达式,如"1+2+3+4"。</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.SetValue(System.String,System.Object)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="name">名称名称。</param>
            <param name="value">属性值。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetValue(System.String)">
            <summary>
            获取指定表达式或者属性的值。
            </summary>
            <param name="expression">表达式或者属性名称。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetValue``1(System.String)">
            <summary>
            获取指定表达式或者属性的值。
            </summary>
            <typeparam name="TValue">返回值类型。</typeparam>
            <param name="expression">表达式或者属性名称。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetBoolean(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetDateTime(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetGuid(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetByte(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetInt16(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetInt32(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetInt64(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetDecimal(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetDouble(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetSingle(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetString(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="T:EAS.Security.PrivilegerType">
            <summary>
            定义权限所有者的类型。
            </summary>
        </member>
        <member name="F:EAS.Security.PrivilegerType.Account">
            <summary>
            拥有权限的是帐户。
            </summary>
        </member>
        <member name="F:EAS.Security.PrivilegerType.Role">
            <summary>
            拥有权限的是角色。
            </summary>
        </member>
        <member name="T:EAS.Security.Cryptography.MD5">
            <summary>
            MD5加密算法。
            </summary>
            <remarks>
            为AgileEAS.NET提供密码生成、密码验证等功能。
            </remarks>	
        </member>
        <member name="M:EAS.Security.Cryptography.MD5.Encrypt(System.String)">
            <summary>
            加密指定的密码。
            </summary>
            <param name="password">要加密的密码。该值不能为空引用。</param>
            <returns>返回加密后的密钥。该密钥的长度为64个字节。后32个字节为一个随机salt值。</returns>
            <exception cref="T:System.ArgumentNullException">password 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Cryptography.MD5.Verify(System.String,System.Byte[])">
            <summary>
            验证给定的密码是否和指定的密钥匹配。
            </summary>
            <param name="password">要验证的密码。</param>
            <param name="key">要验证的密钥。密钥的长度为16个字节。</param>
            <returns>如果可以通过指定的密钥生成和key相匹配的密钥，则返回true；否则返回false。</returns>
            <exception cref="T:System.ArgumentNullException">password 或者 key 为空引用。</exception>
        </member>
        <member name="P:EAS.Security.Cryptography.MD5.EmptyPassword">
            <summary>
            代表一个空密码（String.Empty 对应的密码）。每次使用该值都会返回一个不同的结果。
            </summary>
            <remarks>每次使用该值都会返回一个不同的结果。</remarks>
        </member>
        <member name="T:EAS.Objects.Lifecycle.PoolableLifestyleManager">
            <summary>
            组件生存管理周期之Pooled，组件池，初始时分配一定数量的组件，客户请求时，分配一个空闲组件，用户使用完后交由池中。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.#ctor">
            <summary>
            初始化 PoolableLifestyleManager 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.#ctor(System.Int32,System.Int32)">
            <summary>
            使用组件池初始容量及最大容量初始化 PoolableLifestyleManager 对象实例。 
            </summary>
            <param name="initialSize">组件池初始容量。</param>
            <param name="maxSize">组件池最大容量。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Init(EAS.Objects.IComponentAdapter,EAS.Objects.IContainer)">
            <summary>
            组件生命周期管理，初始化组件。
            </summary>
            <param name="componentAdapter">组件激励器对象。</param>
            <param name="container">组件容器对象。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.InitPool(System.Int32,System.Int32)">
            <summary>
            初始化组件池，生成一个组件池（IPool）接口实例。
            </summary>
            <param name="initialSize">组件池初始容量。</param>
            <param name="maxSize">组件池最在容量。</param>
            <returns>组件池对象。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.ILifestyleManagerFactory">
            <summary>
            ILifestyleManager接口工厂。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifestyleManagerFactory.Create(EAS.Objects.ComponentInfo)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="componentInfo">组件相关属性描述。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <param name="parameters" >组件生存周期相关参数。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="T:EAS.Objects.ContainerBuilder">
            <summary>
            构件容器构造器，用于完成构件容器的构造功能。
            </summary>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder">
            <summary>
            从系统配置文件自动构造容器实例。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.GetDefaultContainer">
            <summary>
            获取系统上下文环境默认的构件容器实例。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.BuilderDefault">
            <summary>
            从系统配置文件自动构造容器实例。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.BuilderDefault(System.String)">
            <summary>
            从系统配置文件自动构造容器实例。
            </summary>
            <param name="name"> 名称。</param>
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.BuilderEmpty">
            <summary>
            构造构件容器实例（空容器、不包括任何实例）。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder(EAS.Objects.IClassLoader)">
            <summary>
            根据程序集装载器构造构件容器。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder(System.String)">
            <summary>
            使用xml配置构造构件容器实例。
            </summary>
            <param name="m_Url">配置信息url。</param>
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder(System.Xml.XmlNode)">
            <summary>
            使用xml配置构造构件容器实例。
            </summary>
            <param name="m_Node">XML节点。</param>
            <returns>构件容器实例。</returns>
        </member>
        <member name="T:EAS.Objects.ComponentConfig">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Objects.ComponentConfig.instance">
            <summary>
            保存成员，单实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentConfig.#ctor">
            <summary>
            初始化 Config 类实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentConfig.Initialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="M:EAS.Objects.ComponentConfig.GetComponentInfo(System.String)">
            <summary>
            根据对象名称（索引键）获取对象配置信息。
            </summary>
            <param name="name">对象名称。</param>
            <returns>对象配置信息。</returns>
        </member>
        <member name="P:EAS.Objects.ComponentConfig.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentConfig.Components">
            <summary>
            获取Objects中配置的对象配置信息。
            </summary>
        </member>
        <member name="T:EAS.Services.ITimeService">
            <summary>
            时间同步服务接口。
            </summary>
        </member>
        <member name="M:EAS.Services.ITimeService.GetCurrentTime">
            <summary>
            获取系统当前时间。
            </summary>
            <returns>系统当前时间。</returns>
        </member>
        <member name="T:EAS.Reflection.FastInvokeHandler">
            <summary>
            快速反射调用委托。
            </summary>
            <param name="target">目标对象。</param>
            <param name="paramters">调用参数。</param>
            <returns>方法返回值。</returns>
        </member>
        <member name="T:EAS.Reflection.FastInvoker">
            <summary>
            快速翻身调用。
            </summary>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            创建方法调用快速访问委托。
            </summary>
            <param name="method">目标方法。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateMethodInvoker(System.Type,System.String)">
            <summary>
            创建方法调用快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="methodName">方法名称。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateGetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建GetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="property">目标属性。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateGetPropertyInvoker(System.Type,System.String)">
            <summary>
            创建GetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="PropertyName">属性名称。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateSetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建SetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="property">目标属性。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateSetPropertyInvoker(System.Type,System.String)">
            <summary>
            创建SetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="PropertyName">属性名称。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="T:EAS.Sockets.Messages.P2pSessionResponse">
            <summary>
            Udp端口响应消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pSessionResponse.#ctor">
            <summary>
            初始化P2pSessionResponse对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pSessionResponse.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pSessionResponse.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pSessionResponse.IpAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pSessionResponse.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pSessionResponse.TcpSession">
            <summary>
            Tcp会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pSessionResponse.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ByteArraySegment">
            <summary>
            数据段,一次发送IO的单元。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ByteArraySegment.InstanceID">
            <summary>
            消息实例ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ByteArraySegment.Index">
            <summary>
            索引。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ByteArraySegment.Count">
            <summary>
            总数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ByteArraySegment.Message">
            <summary>
            消息源。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ByteArraySegment.EndPoint">
            <summary>
            远程节点。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceExposureAttribute">
            <summary>
            服务暴露/导出属性。
            </summary>
            <remarks>
            标记在服务定义之上，用于标记服务可以被AgileEAS.NET SOA 服务容器进行WCF服务导出，即可以把一个Service/BLL Service 翻译为一个WCF服务。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceExposureAttribute.#ctor">
            <summary>
            初始化ServiceExposureAttribute实例。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceExposureAttribute.#ctor(System.String)">
            <summary>
            初始化ServiceExposureAttribute实例。
            </summary>
            <param name="url">服务名称</param>
        </member>
        <member name="M:EAS.Services.ServiceExposureAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ServiceExposureAttribute实例。
            </summary>
            <param name="url">服务Url地址。</param>
            <param name="description">服务描述</param>
        </member>
        <member name="P:EAS.Services.ServiceExposureAttribute.Url">
            <summary>
            Url地址。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceExposureAttribute.Restful">
            <summary>
            是否启用Restful支持。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceExposureAttribute.Rest">
            <summary>
            是否启用Restful支持。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceExposureAttribute.Description">
            <summary>
            获取服务名称。
            </summary>
        </member>
        <member name="T:EAS.Distributed.SmartFile">
            <summary>
            升级文件定义。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartFile.FileName">
            <summary>
            文件名称。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartFile.Version">
            <summary>
            版本。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartFile.Time">
            <summary>
            时间。
            </summary>
        </member>
        <member name="T:EAS.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:EAS.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:EAS.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:EAS.Properties.Resources._default">
             <summary>
               查找类似 &lt;script&gt;
              &lt;reference assembly=&quot;System.Windows.Forms.dll&quot; /&gt;
              &lt;scriptCode&gt;
                &lt;![CDATA[
            
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows.Forms;
            
            namespace CSharpScript
            {
                public class Hello
                {
                    /// &lt;summary&gt;
                    /// 默认测试代码入口。
                    /// &lt;/summary&gt;
                    public static void Main()
                    {
                        var v = new Hello();
                        v.SayHello();
                    }
            
                    /// &lt;summary&gt;
                    /// 功能函数。
                  [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="T:EAS.Collections.KeyValueStruct`2">
            <summary>
            TKey, TValue字典XML序列化结构。
            </summary>
            <typeparam name="TKey">Key类型。</typeparam>
            <typeparam name="TValue">Value类型。</typeparam>
        </member>
        <member name="P:EAS.Collections.KeyValueStruct`2.Key">
            <summary>
            Key。
            </summary>
        </member>
        <member name="P:EAS.Collections.KeyValueStruct`2.Value">
            <summary>
            Value。
            </summary>
        </member>
        <member name="T:EAS.Data.RefEnumAttribute">
            <summary>
            枚举关联属性。
            </summary>
        </member>
        <member name="M:EAS.Data.RefEnumAttribute.#ctor">
            <summary>
            初始化RefEnumAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.RefEnumAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            初始化RefEntityAttribute对象实例。
            </summary>
            <param name="refProperty">引用属性。</param>
            <param name="caption">标题。</param>
            <param name="refType">引用枚举类型。</param>
        </member>
        <member name="M:EAS.Data.RefEnumAttribute.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            初始化RefEntityAttribute对象实例。
            </summary>
            <param name="refProperty">引用属性。</param>
            <param name="caption">标题。</param>
            <param name="refType">引用枚举类型。</param>
            <param name="textProperty">显示属性。</param>
        </member>
        <member name="P:EAS.Data.RefEnumAttribute.RefProperty">
            <summary>
            引用属性。
            </summary>
        </member>
        <member name="P:EAS.Data.RefEnumAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.RefEnumAttribute.RefType">
            <summary>
            引用枚举类型。
            </summary>
        </member>
        <member name="P:EAS.Data.RefEnumAttribute.TextProperty">
            <summary>
            显示属性。
            </summary>
        </member>
        <member name="T:EAS.ListExtensions">
            <summary>
            集合扩展。
            </summary>
        </member>
        <member name="M:EAS.ListExtensions.ToSortable``1(System.Collections.Generic.IList{``0})">
            <summary>
            转换普通泛型集合为可绑定排序集合。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="source">源集合。</param>
            <returns>目标集合。</returns>
        </member>
        <member name="T:EAS.Services.Locators.ServiceFactory">
            <summary>
            服务工厂。
            </summary>
            <remarks>
            完成对服务的动态调用。
            </remarks>
        </member>
        <member name="M:EAS.Services.Locators.ServiceFactory.GetService(System.String)">
            <summary>
             获取指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceFactory.GetService``1(System.String)">
            <summary>
             获取指定的服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceFactory.GetService``1(EAS.Services.Locators.IServiceInfo)">
            <summary>
             获取指定的服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceInfo">服务定义。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="T:EAS.Services.Locators.WebServiceLocator">
            <summary>
            Web服务定位器。
            </summary>
            <remarks>
            用于动态管理web service代理。
            </remarks>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="T:EAS.Runtime.TypeHelper">
            <summary>
            类型辅助类。
            </summary>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.CanCastTo(System.Type,System.Type)">
            <summary>
            检测两个类型之间是否可以转换,即类似(objec obj is T)。
            </summary>
            <param name="fromType">要进行强制转换的类型。</param>
            <param name="toType">要进行强制转换的目标类型。</param>
            <returns>如果可以进行强制转换则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfProperty(System.Object,System.String)">
            <summary>
            取得属性所在类型。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="propertyName">属性名称。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfProperty(System.Type,System.String)">
            <summary>
            取得属性所在类型。
            </summary>
            <param name="type">对象类型。</param>
            <param name="propertyName">属性名称。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfMethod(System.Object,System.String,System.Object[])">
            <summary>
            取得方法所在类型。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="methodName">方法名称。</param>
            <param name="args">方法参数。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfMethod(System.Type,System.String,System.Type[])">
            <summary>
            取得方法所在类型。
            </summary>
            <param name="type">对象类型。</param>
            <param name="methodName">方法名称。</param>
            <param name="types">方法参数类型列表。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetMethod(System.Object,System.String,System.Object[])">
            <summary>
            取得指定的方法。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="method">方法名称。</param>
            <param name="args">方法参数。</param>
            <returns>与参数相符合的方法。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetMethod(System.Type,System.String,System.Object[])">
            <summary>
            取得指定的方法。
            </summary>
            <param name="type">对象类型。</param>
            <param name="method">方法名称。</param>
            <param name="args">方法参数。</param>
            <returns>与参数相符合的方法。</returns>
        </member>
        <member name="T:EAS.Objects.PropertyInfo">
            <summary>
            对象属性定义。
            </summary>
        </member>
        <member name="M:EAS.Objects.PropertyInfo.#ctor">
            <summary>
            初始化 PropertyInfo 类实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.PropertyInfo.Name">
            <summary>
            获取或设置一个值，批示属性名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.PropertyInfo.Type">
            <summary>
            获取或设置一个值，批示属性的数据类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.PropertyInfo.Expression">
            <summary>
            获取或设置一个值，批示属性值的表达式。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory">
            <summary>
            系统默认的接口ILifestyleManagerFactory实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.#ctor">
            <summary>
            初始化 DefaultLifestyleManagerFactory 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.Create(EAS.Objects.ComponentInfo)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="componentInfo">组件相关属性描述。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <param name="parameters" >组件生存周期相关参数。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="T:EAS.Objects.XmlInterpreter">
            <summary>
            XML配置翻译器。
            </summary>
        </member>
        <member name="M:EAS.Objects.XmlInterpreter.Interpret(System.String)">
            <summary>
            翻译指定URL配置信息。
            </summary>
            <param name="m_Url">配置信息url。</param>
            <returns>组件配置记录。</returns>
        </member>
        <member name="M:EAS.Objects.XmlInterpreter.Interpret(System.Xml.XmlNode)">
            <summary>
            翻译指定XML节点配置信息。
            </summary>
            <param name="m_Node">XML节点。</param>
            <returns>组件配置记录。</returns>
        </member>
        <member name="T:EAS.Threading.IWorkerEngine">
            <summary>
            工作者引擎。
            </summary>
        </member>
        <member name="M:EAS.Threading.IWorkerEngine.Initialize">
            <summary>
            初始化工作者引擎。
            </summary>
        </member>
        <member name="M:EAS.Threading.IWorkerEngine.Start">
            <summary>
            启动引擎。
            </summary>
        </member>
        <member name="M:EAS.Threading.IWorkerEngine.Stop">
            <summary>
            停止引擎。
            </summary>
        </member>
        <member name="T:EAS.Collections.SortableBindingList`1">
            <summary>
            提供支持排序数据绑定的泛型集合。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <!-- 对于成员“M:EAS.Collections.SortableBindingList`1.#ctor”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:EAS.Collections.SortableBindingList`1.#ctor(System.Collections.Generic.IList{`0})”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Collections.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            已重写，则对项进行排序。
            </summary>
            <param name="prop">指定要用于排序的属性的 PropertyDescriptor。</param>
            <param name="direction">System.ComponentModel.ListSortDirection 值之一。</param>
        </member>
        <member name="M:EAS.Collections.SortableBindingList`1.Sort(System.String,System.Boolean)">
            <summary>
            按指定属性进行排序。
            </summary>
            <param name="sortPropertyName"></param>
            <param name="isAscending"></param>
        </member>
        <member name="P:EAS.Collections.SortableBindingList`1.SupportsSortingCore">
            <summary>
            获取一个值，该值指示列表是否支持排序。
            </summary>
        </member>
        <member name="P:EAS.Collections.SortableBindingList`1.SortPropertyCore">
            <summary>
            获取用于对列表排序的属性说明符。
            </summary>
        </member>
        <member name="P:EAS.Collections.SortableBindingList`1.SortDirectionCore">
            <summary>
            获取列表的排序方向。
            </summary>
        </member>
        <member name="P:EAS.Collections.SortableBindingList`1.IsSortedCore">
            <summary>
            获取一个值，指示列表是否已排序。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceAssemblyAttribute">
            <summary>
            服务程序集属性，用于标准程序集是否为服务程序集。
            </summary>
        </member>
        <member name="T:EAS.Security.Cryptography.BigInteger">
            <summary>
            大数类，支持RSA算法。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.BigInteger.ToBytes">
            <summary>
            转换为Bytes。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EAS.Distributed.SmartConfig">
            <summary>
            升级配置信息。
            </summary>
        </member>
        <member name="M:EAS.Distributed.SmartConfig.#ctor">
            <summary>
            初始化SmartConfig对象实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.SmartConfig.LoadXML(System.String)">
            <summary>
            装载智能升级配置。
            </summary>
            <param name="xml">xml。</param>
            <returns>智能升级配置。</returns>
        </member>
        <member name="M:EAS.Distributed.SmartConfig.ToString">
            <summary>
            转换为XML字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.SmartConfig.Save(EAS.Distributed.SmartConfig,System.String)">
            <summary>
            保存智能升级配置信息到
            </summary>
            <param name="config">智能升级配置。</param>
            <param name="file">文件名。</param>
        </member>
        <member name="M:EAS.Distributed.SmartConfig.Load(System.String)">
            <summary>
            装载智能升级配置。
            </summary>
            <param name="file">文件名。</param>
            <returns>智能升级配置。</returns>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.URI">
            <summary>
            URL地址。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.Description">
            <summary>
            说明。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.StartEx">
            <summary>
            下载完后执行。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.Time">
            <summary>
            最后更新时间。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.Files">
            <summary>
            系统运行必须的一些文件。
            </summary>
        </member>
        <member name="P:EAS.Distributed.SmartConfig.DefaultConfgiFile">
            <summary>
            系统默认配置文件。
            </summary>
        </member>
        <member name="T:EAS.Distributed.ResultValue">
            <summary>
            分布式调用返回结果。
            </summary>
        </member>
        <member name="M:EAS.Distributed.ResultValue.#ctor">
            <summary>
            初始化ResultValue对象实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.ResultValue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Distributed.ResultValue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Distributed.ResultValue.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Distributed.ResultValue.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Distributed.ResultValue.Value">
            <summary>
            结果。
            </summary>
        </member>
        <member name="P:EAS.Distributed.ResultValue.Error">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="P:EAS.Distributed.ResultValue.UserToken">
            <summary>
            用户令牌。
            </summary>
        </member>
        <member name="T:EAS.Configuration.Config">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Configuration.Config.instance">
            <summary>
            保存成员，单实例。
            </summary>
        </member>
        <member name="M:EAS.Configuration.Config.#ctor">
            <summary>
            初始化 Config 类实例。
            </summary>
        </member>
        <member name="F:EAS.Configuration.Config.configRoot">
            <summary>
            配置根节点。
            </summary>
        </member>
        <member name="F:EAS.Configuration.Config.items">
            <summary>
            系统配置项。
            </summary>
        </member>
        <member name="M:EAS.Configuration.Config.Initialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="M:EAS.Configuration.Config.GetRoot">
            <summary>
            取得的系统配置根节点。
            </summary>
            <returns>的系统配置根节点。</returns>
        </member>
        <member name="M:EAS.Configuration.Config.GetValue(System.String)">
            <summary>
            取得指定配置项目的配置值。
            </summary>
            <param name="key"> 系统配置项名称。</param>
            <returns>系统配置项配置值。</returns>
        </member>
        <member name="M:EAS.Configuration.Config.SetValue(System.String,System.String)">
            <summary>
            取得指定配置项目的配置值。
            </summary>
            <param name="key"> 系统配置项名称。</param>
            <param name="value">配置项值。</param>
            <returns>系统配置项配置值。</returns>
        </member>
        <member name="M:EAS.Configuration.Config.Add(System.String,System.String)">
            <summary>
            增加一个系统配置项及其项值。
            </summary>
            <param name="key">配置项名称。</param>
            <param name="value">配置项值。</param>
        </member>
        <member name="M:EAS.Configuration.Config.Remove(System.String)">
            <summary>
            删除一个系统配置项及其项值。
            </summary>
            <param name="key">配置项名称。</param>
        </member>
        <member name="M:EAS.Configuration.Config.Save">
            <summary>
            保存系统配置项的更改到系统配置文件。
            </summary>
        </member>
        <member name="M:EAS.Configuration.Config.Save(System.String)">
            <summary>
            保存系统配置到指定系统配置文件中。
            </summary>
            <param name="file">配置文件名称。</param>
        </member>
        <member name="P:EAS.Configuration.Config.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Configuration.Config.Count">
            <summary>
            获取系统配置项汇总。
            </summary>
        </member>
        <member name="P:EAS.Configuration.Config.Keys">
            <summary>
            获取所有系统配置项目名称（键）。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.GetAspectInvoke(System.Collections.Generic.List{EAS.Aspect.IAspect})">
            <summary>
            获取相关的IAspectInvoke。
            </summary>
            <param name="aspects">相关的Aspects。</param>
            <returns>IAspectInvoke对象。</returns>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.GetAspect(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            获取相关的Aspect。
            </summary>
            <param name="msg">IMessage，包含有关方法调用的信息。</param>
            <returns>Aspect集合。</returns>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.GetAspect(System.Type,System.Reflection.MethodBase)">
            <summary>
            获取相关的Aspect。
            </summary>
            <param name="targetType">目标类型。</param>
            <param name="method">方法。</param>
            <returns>Aspect集合。</returns>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.GetServiceAspect(System.Type,System.Reflection.MethodBase)">
            <summary>
            获取服务相关的Aspect。
            </summary>
            <param name="targetType">目标类型。</param>
            <param name="method">方法。</param>
            <returns>Aspect集合。</returns>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.InternalGetAspect(System.Type,System.Reflection.MethodBase,System.Boolean)">
            <summary>
            获取服务相关的Aspect。
            </summary>
            <param name="targetType">目标类型。</param>
            <param name="method">方法。</param>
            <param name="aspectCrosscut">可切面对象。</param>
            <returns>Aspect集合。</returns>
        </member>
        <member name="P:EAS.Aspect.AspectsManager.AspectInfos">
            <summary>
            所有的Aspect集合
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectsManager.Aspects">
            <summary>
            所有的Aspect集合
            </summary>
        </member>
        <member name="T:EAS.Sockets.Bus.GetSubscribeMessageHandler">
            <summary>
            求订阅信息。
            </summary>
        </member>
        <member name="M:EAS.Services.License.CreateEmpty">
            <summary>
            空白授权。
            </summary>
        </member>
        <member name="M:EAS.Services.License.GetXCode(System.String)">
            <summary>
            求出XCode。
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.License.GetHost">
            <summary>
            求主机信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.License.#ctor(System.String)">
            <summary>
            初始化授权。
            </summary>
            <param name="mLicense"></param>
        </member>
        <member name="P:EAS.Services.License.Exception">
            <summary>
            许可证错误。
            </summary>
        </member>
        <member name="P:EAS.Services.License.OrganCode">
            <summary>
            机构编码。
            </summary>
        </member>
        <member name="P:EAS.Services.License.OrganName">
            <summary>
            机构名称。
            </summary>
        </member>
        <member name="P:EAS.Services.License.SN">
            <summary>
            序列号。
            </summary>
        </member>
        <member name="P:EAS.Services.License.LimitDate">
            <summary>
            授权限期。
            </summary>
        </member>
        <member name="P:EAS.Services.License.BeginDate">
            <summary>
            授权开始时间。
            </summary>
        </member>
        <member name="P:EAS.Services.License.MaxConcurrent">
            <summary>
            许可并发。
            </summary>
        </member>
        <member name="P:EAS.Services.License.Host">
            <summary>
            主机。
            </summary>
        </member>
        <member name="P:EAS.Services.License.SkipCpu">
            <summary>
            跳过CPU。
            </summary>
        </member>
        <member name="P:EAS.Services.License.SkipDisk">
            <summary>
            跳过主机。
            </summary>
        </member>
        <member name="P:EAS.Services.License.SkipMAC">
            <summary>
            跳过MAC。
            </summary>
        </member>
        <member name="P:EAS.Services.License.AllowDirect">
            <summary>
            是否充许直连。
            </summary>
        </member>
        <member name="M:EAS.Services.License.Manage.Load">
            <summary>
            读许可证。
            </summary>
            <returns>许可证。</returns>
        </member>
        <member name="M:EAS.Services.License.LM.CheckLicense(System.String)">
            <summary>
            检测授权信息。
            </summary>
            <param name="license"></param>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.IPoolObject">
            <summary>
            池化对象接口。
            </summary>
            <remarks>
            可以以LifestyleType.Pooled生存于IOC容器之中的对象，主要用于管理对象成本比较大的对象，比如数据库连接对象。
            </remarks>
        </member>
        <member name="P:EAS.Objects.Lifecycle.Pool.IPoolObject.CanAllot">
            <summary>
            是否可分配。
            </summary>
        </member>
        <member name="M:EAS.NetClass.GetHostName">
            <summary>
            取计算机名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.NetClass.GetIPAddress">
            <summary>
            取IP地址。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.NetClass.GetMacAddress">
            <summary>
            取MAC地址。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.NetClass.MacToBytes(System.String)">
            <summary>
            MAC转字节数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.NetClass.BytesToMac(System.Byte[])">
            <summary>
            字节数组转MAC。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.NetClass.IPToUInt(System.String)">
            <summary>
            将IPv4格式的字符串转换为int型表示
            </summary>
            <param name="strIPAddress">IPv4格式的字符</param>
            <returns></returns>
        </member>
        <member name="M:EAS.NetClass.UIntToIP(System.Int32)">
            <summary>
            将int型表示的IP还原成正常IPv4格式。
            </summary>
            <param name="intIPAddress">int型表示的IP</param>
            <returns></returns>
        </member>
        <member name="T:EAS.Services.TimeVerificationAspect">
            <summary>
            服务调用时间验证切面。
            </summary>
            <remarks>
            实现对服务调用之前。
            </remarks>
        </member>
        <member name="M:EAS.Services.TimeVerificationAspect.BeforeInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="M:EAS.Services.TimeVerificationAspect.AfterInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="T:EAS.Threading.ThreadSafeObject`1">
            <summary>
            提供多线程安全访问内部成员Value。    
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="F:EAS.Threading.ThreadSafeObject`1._tObject">
            <summary>
            值
            </summary>
        </member>
        <member name="F:EAS.Threading.ThreadSafeObject`1._lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:EAS.Threading.ThreadSafeObject`1.#ctor">
            <summary>
            线程安全访问内部成员Value类型
            </summary>
        </member>
        <member name="M:EAS.Threading.ThreadSafeObject`1.#ctor(`0)">
            <summary>
            线程安全访问内部成员Value类型
            </summary>
            <param name="defaultValue">内部成员Value成员初始值</param>
        </member>
        <member name="P:EAS.Threading.ThreadSafeObject`1.Value">
            <summary>
            获取或设置内部成员
            </summary>
        </member>
        <member name="T:EAS.Services.TimeService">
            <summary>
            时间同步服务。
            </summary>
        </member>
        <member name="M:EAS.Services.TimeService.GetCurrentTime">
            <summary>
            获取系统当前时间。
            </summary>
            <returns>系统当前时间。</returns>
        </member>
        <member name="T:EAS.Services.ServiceContainer">
            <summary>
            服务组件容器。
            </summary>
            <remarks>
            用于取得服务组件实例或者服务组件的代理，根据系统当前不同的ServiceBridger桥接完成服务代理组件与服务组件的通信。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService``1">
            <summary>
            从容器中取得一个服务/代理组件。
            </summary>
            <typeparam name="T">服务/接口类型。</typeparam>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService``1(System.String)">
            <summary>
            从容器中取得一个服务/代理组件。
            </summary>
            <typeparam name="T">服务/接口类型。</typeparam>
            <param name="serviceBridger">服务桥(Ioc配置中的Key。)</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService``1(EAS.Services.IServiceBridger)">
            <summary>
            从容器中取得一个服务/代理组件。
            </summary>
            <typeparam name="T">服务/接口类型。</typeparam>
            <param name="serviceBridger">服务桥。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService(System.Type)">
            <summary>
            根据服务/接口类型从容器中取得一个服务/代理组件。
            </summary>
            <param name="serviceType">服务/接口类型。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService(System.Type,System.String)">
            <summary>
            根据服务/接口类型从容器中取得一个服务/代理组件。
            </summary>
            <param name="serviceType">服务/接口类型。</param>
            <param name="serviceBridger">服务桥。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService(System.Type,EAS.Services.IServiceBridger)">
            <summary>
            根据服务/接口类型从容器中取得一个服务/代理组件。
            </summary>
            <param name="serviceType">服务/接口类型。</param>
            <param name="serviceBridger">服务桥。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="T:EAS.Services.Locators.ServiceConfig">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.#ctor">
            <summary>
            初始化 ServiceConfig 类实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig.m_ServiceTypes">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig.m_Services">
            <summary>
            服务。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.Initialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.GetServiceType(System.String)">
            <summary>
            取得服务类型配置信息。
            </summary>
            <param name="serviceType">服务类型。</param>
            <returns>服务类型配置。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.GetServiceType2(System.String)">
            <summary>
            取得服务类型信息。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务配置信息。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.GetServiceInfo(System.String)">
            <summary>
            取得服务配置信息。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务配置信息。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.AddSerice(EAS.Services.Locators.IServiceInfo)">
            <summary>
            注册服务信息。
            </summary>
            <param name="serviceInfo">服务定义。</param>
        </member>
        <member name="P:EAS.Services.Locators.ServiceConfig.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.DotNetRemotingLocator">
            <summary>
            Net Remoting 服务定位器。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="T:EAS.Security.IPrivileger">
            <summary>
            系统权限所有者(角色，账户)的基本规范。
            </summary>
        </member>
        <member name="P:EAS.Security.IPrivileger.Type">
            <summary>
            获取权限所有者类型，返回权限所有者IPrivilegerOwner枚举。
            </summary>
            <remarks>该值用于说明权限所有者的类型。</remarks>
        </member>
        <member name="P:EAS.Security.IPrivileger.Name">
            <summary>
            获取IDDP系统对象权限所有者名称。
            </summary>
            <remarks>该值用于说明权限所有者的名称。</remarks>
        </member>
        <member name="T:EAS.Security.Cryptography.Rijndael">
            <summary>
            对称加密算法。
            </summary>
            <remarks>为提供对称加密算法，提供字符串、字节数据加解密功能，扩展在(Rijndael)之上。</remarks>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.#ctor">
            <summary>
            初始化Cryptor类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.Byte[])">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的字节数组。
            </summary>
            <param name="bytes">要解密的字节数组。</param>
            <returns>返回解密后的字节数组。如果bytes为空引用，则返回空引用；在其他情况下，返回的字节数组的长度和要解密的字节数组的长度相同。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的字节流。
            <remarks>当前方法不负责关闭inStream和outStream流。</remarks>
            </summary>
            <param name="inStream">要解密的字节流。</param>
            <param name="outStream">解密后的字节流。该参数用于接收解密后的字节流数据。</param>
            <exception cref="T:System.ArgumentNullException">inStream 或者 outStream 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.String,System.String)">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的文件。
            </summary>
            <param name="inName">要解密的文件名称。</param>
            <param name="outName">解密后的文件名称。如果指定的文件不存在，则自动创建该文件。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.String)">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的字符串。
            </summary>
            <param name="s">要解密的字符串。</param>
            <returns>返回解密后的字符串。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.Byte[])">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的字节数组。
            </summary>
            <param name="bytes">要加密的字节数组。</param>
            <returns>返回加密后的字节数组。如果bytes为空引用，则返回空引用；在其他情况下，返回的字节数组的长度和要加密的字节数组的长度相同。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的字节流。
            <remarks>当前方法不负责关闭inStream和outStream流。</remarks>
            </summary>
            <param name="inStream">要加密的字节流。</param>
            <param name="outStream">加密后的字节流。该参数用于接收加密后的字节流数据。</param>
            <exception cref="T:System.ArgumentNullException">inStream 或者 outStream 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.String,System.String)">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的文件。
            </summary>
            <param name="inName">要加密的文件名称。</param>
            <param name="outName">加密后的文件名称。如果指定的文件不存在，则自动创建该文件。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.String)">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的字符串。
            </summary>
            <param name="s">要加密的字符串。</param>
            <returns>返回已经加密的字符串。</returns>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.StringKey">
            <summary>
            设置加密的字符串密码。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.StringIV">
            <summary>
            设置加密的字符串初始化向量。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.Key">
            <summary>
            获取或者设置Cryptor的加密或者解密密钥。不能将密钥设置为空引用。
            密钥的长度为32个字节。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.IV">
            <summary>
            获取或者设置Cryptor的初始化向量。如果将该属性设置为空引用，则自动创建随机的初始化向量。
            初始化向量的长度为32个字节。
            </summary>
        </member>
        <member name="T:EAS.Objects.StandardClassLoader">
            <summary>
            标准IOC容器程序类装载器。
            </summary>
        </member>
        <member name="M:EAS.Objects.StandardClassLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.StandardClassLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="T:EAS.Objects.ExceptionStackManager">
            <summary>
            容器异常管理器。
            </summary>
        </member>
        <member name="P:EAS.Objects.ExceptionStackManager.Instance">
            <summary>
            唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.EmptyMessageHandler`1">
            <summary>
            空的消息处理器。
            </summary>
            <typeparam name="TMessage">消息类型。</typeparam>
        </member>
        <member name="M:EAS.Sockets.Messages.EmptyMessageHandler`1.Process(EAS.Sockets.SocketSession,System.Net.EndPoint,`0)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">Socket会话。</param>
            <param name="remoteEndPoint">远程终节点。</param>
            <param name="message">消息。</param>
        </member>
        <member name="T:EAS.Distributed.Request">
            <summary>
            RIAService的请求消息。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Request.#ctor">
            <summary>
            初始化Request对象实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Request.#ctor(System.Type,System.Reflection.MethodBase,System.Object[])">
            <summary>
            初始化Request对象实例。
            </summary>
            <param name="serviceType">服务方法。</param>
            <param name="method">方法信息。</param>
            <param name="args">实参信息。</param>
        </member>
        <member name="M:EAS.Distributed.Request.Serialize">
            <summary>
            序列化RIA请求为byte[]。
            </summary>
            <returns>byte[]。</returns>
        </member>
        <member name="M:EAS.Distributed.Request.Load(System.Byte[])">
            <summary>
            从字节流中加载Request对象。
            </summary>
            <param name="buffer">字节流。</param>
            <returns>Request对象。</returns>
        </member>
        <member name="M:EAS.Distributed.Request.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载消息对象。
            </summary>
            <param name="reader">BufferReader。</param>
        </member>
        <member name="M:EAS.Distributed.Request.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            保存到指定的BufferWriter。
            </summary>
            <param name="writer">BufferWriter。</param>
        </member>
        <member name="P:EAS.Distributed.Request.ServiceType">
            <summary>
            服务定义类型。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.DeclaringType">
            <summary>
            方法定义类型。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.Method">
            <summary>
            方法名称。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.Mac">
            <summary>
            MAC地址。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.HostName">
            <summary>
            主机名称。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.SessionID">
            <summary>
            会话ID。
            </summary> 
        </member>
        <member name="P:EAS.Distributed.Request.DataSet">
            <summary>
            帐套。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.Parameters">
            <summary>
            方法的形参。
            </summary>
        </member>
        <member name="P:EAS.Distributed.Request.Arguments">
            <summary>
            方法的实参。
            </summary>
        </member>
        <member name="T:EAS.TypeExtensions">
            <summary>
            类型扩展方法
            </summary>
        </member>
        <member name="M:EAS.TypeExtensions.GetTName(System.Type)">
            <summary>
            获取类型的文本。
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.TypeExtensions.GetAssemblyName(System.Type)">
            <summary>
            获取类型的文本。
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.TypeExtensions.CreateType(System.String,System.String)">
            <summary>
            创建类型。
            </summary>
            <param name="Type"></param>
            <param name="Assembly"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.TypeExtensions.GetBytes(System.Type)">
            <summary>
            求类型的二进制表示。
            </summary>
            <param name="type">类型信息。</param>
            <returns>类型的二进制流表示。</returns>
        </member>
        <member name="M:EAS.TypeExtensions.FormBytes(System.Byte[])">
            <summary>
            从二进制流读取类型信息。
            </summary>
            <param name="buffer">类型的二进制流表示。</param>
            <returns>类型信息。</returns>
        </member>
        <member name="M:EAS.TypeExtensions.GetBytes2(System.Type)">
            <summary>
            求类型的二进制表示。
            </summary>
            <param name="type">类型信息。</param>
            <returns>类型的二进制流表示。</returns>
        </member>
        <member name="M:EAS.TypeExtensions.FormBytes2(System.Byte[])">
            <summary>
            从二进制流读取类型信息。
            </summary>
            <param name="buffer">类型的二进制流表示。</param>
            <returns>类型信息。</returns>
        </member>
        <member name="T:EAS.Context.DefaultContext">
            <summary>
            DefaultContex 的摘要说明。
            </summary>
        </member>
        <member name="T:EAS.Context.IContext">
            <summary>
            对象上下文，定义IOC组件的上下文。
            </summary>
        </member>
        <member name="M:EAS.Context.IContext.IsSingleton(System.String)">
            <summary>
            判定指定名称的组件是生存周期是否为Singleton模式。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生存周期是否为Singleton模式，是则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetLifestyleType(System.String)">
            <summary>
            根据组件名称获取指定组件的生命周期类型。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生命周期类型。</returns>
        </member>
        <member name="M:EAS.Context.IContext.ContainsObject(System.String)">
            <summary>
            上下文中是否包含指定名称的组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.IContext.ContainsObject(System.Type)">
            <summary>
            上下文中是否包含指定类型的组件实例。
            </summary>
            <param name="type">组件接口类型。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetObject(System.String)">
            <summary>
            根据组件的名称返回一个组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetObject(System.Type)">
            <summary>
            根据组件的类型返回一个组件实例。
            </summary>
            <param name="type">组件的类型。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetType(System.String)">
            <summary>
            根据组件的名称返回组件实例的类型。
            </summary>
            <param name="name">组件名称。</param>
            <returns>组件类型。</returns>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Object)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Object,System.String)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Type)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="type">组件类型。</param>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Type,System.String)">
            <summary>
            在容器中配置组件。
            </summary>		
            <param name="type">组件类型</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="P:EAS.Context.IContext.Container">
            <summary>
            组件容器，获取系统上下文中的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Context.IContext.Item(System.String)">
            <summary>
            索引器，根据名称获取指定的组件实例。
            </summary>
        </member>
        <member name="F:EAS.Context.DefaultContext.container">
            <summary>
            私有内部成员，组件容器工厂，为应用上下文提供组件容器的容器对象。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContext.#ctor">
            <summary>
            初始化 DefaultContex 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContext.IsSingleton(System.String)">
            <summary>
            判定指定名称的组件是生存周期是否为Singleton模式。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生存周期是否为Singleton模式，是则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetLifestyleType(System.String)">
            <summary>
            根据组件名称获取指定组件的生命周期类型。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生命周期类型。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.ContainsObject(System.String)">
            <summary>
            上下文中是否包含指定名称的组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.ContainsObject(System.Type)">
            <summary>
            上下文中是否包含指定类型的组件实例。
            </summary>
            <param name="type">组件接口类型。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetObject(System.String)">
            <summary>
            根据组件的名称返回一个组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetObject(System.Type)">
            <summary>
            根据组件的类型返回一个组件实例。
            </summary>
            <param name="type">组件的类型。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetType(System.String)">
            <summary>
            根据组件的名称返回组件实例的类型。
            </summary>
            <param name="name">组件名称。</param>
            <returns>组件类型。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.ConfigureObject(System.Object)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
        </member>
        <member name="M:EAS.Context.DefaultContext.EAS#Context#IContext#ConfigureObject(System.Object,System.String)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="M:EAS.Context.DefaultContext.ConfigureObject(System.Type)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="type">组件类型。</param>
        </member>
        <member name="M:EAS.Context.DefaultContext.ConfigureObject(System.Type,System.String)">
            <summary>
            在容器中配置组件。
            </summary>		
            <param name="type">组件名称</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="P:EAS.Context.DefaultContext.Container">
            <summary>
            组件容器，获取系统上下文中的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Context.DefaultContext.Item(System.String)">
            <summary>
            索引器，根据名称获取指定的组件实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Bus.ClientContext.Add(EAS.Sockets.Bus.SocketBus)">
            <summary>
            注册。
            </summary>
            <param name="bus"></param>
        </member>
        <member name="T:EAS.Script.ScriptCompileException">
            <summary>
            表示脚本构造、执行过程这中的错误。
            </summary>
        </member>
        <member name="M:EAS.Script.ScriptCompileException.#ctor">
            <summary>
            初始化 ScriptCompileException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Script.ScriptCompileException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 ScriptCompileException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:EAS.Script.ScriptCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 ScriptCompileException 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Script.ScriptCompileException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 ScriptException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:EAS.Messages.SubscribeItem">
            <summary>
            订阅信息。
            </summary>
        </member>
        <member name="P:EAS.Messages.SubscribeItem.Subscriber">
            <summary>
            订阅者。
            </summary>
        </member>
        <member name="P:EAS.Messages.SubscribeItem.Topic">
            <summary>
            事件主题。
            </summary>
        </member>
        <member name="T:EAS.LicenseException">
            <summary>
            许可证错误。
            </summary>
        </member>
        <member name="M:EAS.LicenseException.#ctor">
            <summary>
            初始化LicenseException对象实例。
            </summary>
        </member>
        <member name="M:EAS.LicenseException.#ctor(System.String)">
            <summary>
            初始化LicenseException对象实例。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化LicenseException对象实例。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EAS.LicenseException.#ctor(System.String,System.Exception)">
            <summary>
            初始化LicenseException对象实例。
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:EAS.Distributed.ResultValue2">
            <summary>
            为Socket调用提供的返回消息，默认消息超过4K则进行压缩传输。
            </summary>
        </member>
        <member name="M:EAS.Distributed.ResultValue2.#ctor">
            <summary>
            初始化ResultValue2对象实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.ResultValue2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Distributed.ResultValue2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Distributed.ResultValue2.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Distributed.ResultValue2.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Distributed.ResultValue2.AllowCompress">
            <summary>
            是否充许压缩。
            </summary>
        </member>
        <member name="P:EAS.Distributed.ResultValue2.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.SocketServiceInfo">
            <summary>
            Socket服务配置信息。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceInfo.#ctor">
            <summary>
            初始化SocketServiceInfo实例。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceInfo.GetHashCode">
            <summary>
            已重写，获取哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="P:EAS.Services.Locators.SocketServiceInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.SocketServiceInfo.ConnectionTimeout">
            <summary>
            连接超时。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.SocketServiceInfo.CommandTimeout">
            <summary>
            命令超时。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.SocketServiceInfo.EnableLogging">
            <summary>
            超时设置。
            </summary>
        </member>
        <member name="T:EAS.Loggers.ConsoleLogger">
            <summary>
            控制台日志记录器。
            </summary>
            <remarks>
            日志向控制台打印输出。
            </remarks>
        </member>
        <member name="M:EAS.Loggers.ConsoleLogger.#ctor">
            <summary>
            初始化ConsoleLogger对象实例。
            </summary>
        </member>
        <member name="M:EAS.Loggers.ConsoleLogger.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing">为 true，则释放托管资源和非托管资源；为 false，则仅释放非托管资源。</param>
        </member>
        <member name="P:EAS.Loggers.ConsoleLogger.Level">
            <summary>
            日志记录级别：0x01|仅错误,0x02|错误和调试信息,0x03|全部。
            </summary>
        </member>
        <member name="T:EAS.Sockets.DefaultProtocol">
            <summary>
            AgileEAS.NET SOA 中间件平台默认的协议。
            </summary>
            <remarks>
            采用4字节的消息长度+消息Body的方式进行协议拆解。
            </remarks>
        </member>
        <member name="P:EAS.Sockets.DefaultProtocol.Logger">
            <summary>
            获取或设置日志记录器。
            </summary>
        </member>
        <member name="T:EAS.Serialization.BinarySerializer">
            <summary>
            基于微软BinaryFormatter的序列化器
            </summary>
        </member>
        <member name="M:EAS.Serialization.BinarySerializer.Initialize">
            <summary>
            初始化序列器。
            </summary>
        </member>
        <member name="M:EAS.Serialization.BinarySerializer.Serialize(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="instance">对象实例。</param>
            <returns>序列化流。</returns>
        </member>
        <member name="M:EAS.Serialization.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            反序列化对象。
            </summary>
            <param name="buffer">序列化流。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="T:EAS.Security.Cryptography.RSAKey">
            <summary>
            RSA密匙对。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.RSAKey.GetKeyBuffer(System.String)">
            <summary>
            获取密钥的二进制表示。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.RSAKey.PublicKey">
            <summary>
            公钥。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.RSAKey.PrivateKey">
            <summary>
            私钥。
            </summary>
        </member>
        <member name="T:EAS.Distributed.IRMIService">
            <summary>
            对象远程方法调用接口。
            </summary>
        </member>
        <member name="M:EAS.Distributed.IRMIService.RemotingCall(System.Byte[])">
            <summary>
            远程方法调用。
            </summary>
            <param name="callPackage">打包的消息。</param>
            <returns>返回消息。</returns>
        </member>
        <member name="T:EAS.Messages.PublisherSstatusChangedEventArgs">
            <summary>
            发布者状态变化参数。
            </summary>
        </member>
        <member name="P:EAS.Messages.PublisherSstatusChangedEventArgs.Publisher">
            <summary>
            发布者。
            </summary>
        </member>
        <member name="P:EAS.Messages.PublisherSstatusChangedEventArgs.Online">
            <summary>
            在线。
            </summary>
        </member>
        <member name="T:EAS.Distributed.NlbException">
            <summary>
            负载错误。
            </summary>
        </member>
        <member name="M:EAS.Distributed.NlbException.#ctor">
            <summary>
            初始化 System.Exception 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Distributed.NlbException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 System.Exception 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:EAS.Distributed.NlbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 System.Exception 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Distributed.NlbException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 System.Exception 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:EAS.Hosting.MetaDesignApp">
            <summary>
            领域模型设计Application引导类。
            </summary>
        </member>
        <member name="M:EAS.Hosting.MetaDesignApp.Start">
            <summary>
            启动应用程序。
            </summary>
        </member>
        <member name="T:EAS.Hosting.WinApp">
            <summary>
            Windows Application 引导类。
            </summary>
        </member>
        <member name="M:EAS.Hosting.WinApp.ConfigTimeFunc(System.Func{System.DateTime})">
            <summary>
            配置系统时间函数。
            </summary>
            <param name="timeFunc">时间函数。</param>
        </member>
        <member name="M:EAS.Hosting.WinApp.Start">
            <summary>
            正常启动。
            </summary>
        </member>
        <member name="M:EAS.Hosting.WinApp.Start(System.String)">
            <summary>
            启动平台。
            </summary>
            <param name="assemblyName">调试启动。</param>
        </member>
        <member name="M:EAS.Hosting.WinApp.Start(System.String,System.Boolean)">
            <summary>
            启动平台。
            </summary>
            <param name="assemblyName">调试启动。</param>
            <param name="needLogin">需要登录。</param>
        </member>
        <member name="M:EAS.Hosting.WinApp.Start(System.String,System.Boolean,System.String,System.String)">
            <summary>
            启动平台。
            </summary>
            <param name="assemblyName">调试启动。</param>
            <param name="needLogin">需要登录。</param>
            <param name="LoginID">登录ID。</param>
            <param name="Password">密码。</param>
        </member>
        <member name="M:EAS.Hosting.WinApp.Start(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            启动平台。
            </summary>
            <param name="assemblyName">调试启动。</param>
            <param name="needLogin">需要登录。</param>
            <param name="organization">组织机构。</param>
            <param name="LoginID">登录ID。</param>
            <param name="Password">密码。</param>
        </member>
        <member name="M:EAS.Hosting.WinApp.AnalogLogin(System.String,System.String)">
            <summary>
             模拟登录(启动程序不弹出登录窗口进行登录)。 
            </summary>
            <param name="organization">组织机构。</param>
            <param name="LoginID">登录ID。</param>
        </member>
        <member name="M:EAS.Hosting.WinApp.CachePrepare">
            <summary>
            缓存预热。
            </summary>
        </member>
        <member name="M:EAS.Hosting.WinApp.Upgrade">
            <summary>
            启动升级。
            </summary>
        </member>
        <member name="M:EAS.Hosting.WinApp.DllRegisterServer">
            <summary>
            实现自注册。
            </summary>
        </member>
        <member name="M:EAS.Hosting.WinApp.GetAppStrap">
            <summary>
            求启动对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Hosting.WinApp.AllowSocket">
            <summary>
            允许会用Socket进行协调。
            </summary>
        </member>
        <member name="P:EAS.Hosting.WinApp.AllowIM">
            <summary>
            允许使用即时通讯。
            </summary>
        </member>
        <member name="P:EAS.Hosting.WinApp.AllowKicking">
            <summary>
            是否允许踢人。
            </summary>
        </member>
        <member name="T:EAS.DecimalConver">
            <summary>
            用于将Decimal对象与字节数组之间的转换。
            </summary>
        </member>
        <member name="M:EAS.DecimalConver.ToBytes(System.Decimal)">
            <summary>
            将Decimal对象转换为字节数组。
            </summary>
            <param name="value">要转换的对象。</param>
            <returns>表示Decimal对象的字节数组。</returns>
        </member>
        <member name="M:EAS.DecimalConver.FromBytes(System.Byte[])">
            <summary>
            将字节数组转换为Decimal对象。
            </summary>
            <param name="array">要转换的字节数组。</param>
            <returns>所转换的Decimal对象。</returns>
        </member>
        <member name="T:EAS.Task.InvokeTask">
            <summary>
            普通任务回调/无返回值。
            </summary>
        </member>
        <member name="M:EAS.Task.InvokeTask.CompleteAction">
            <summary>
            已重写，任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.WebServiceInfo">
            <summary>
            Web 服务配置信息。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceInfo.#ctor">
            <summary>
            初始化WebServiceInfo实例。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceInfo.GetHashCode">
            <summary>
            已重写，获取哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="P:EAS.Services.Locators.WebServiceInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.PoolException">
            <summary>
            组件池异常。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.PoolException.#ctor(System.String)">
            <summary>
            使用错误消息初始化 PoolException 组件实例。
            </summary>
            <param name="message">错误消息。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.PoolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化初始化 PoolException 组件实例。
            </summary>
            <param name="info">PoolException反序列化信息。</param>
            <param name="context">反序列化上下文环境。</param>
        </member>
        <member name="T:EAS.Objects.Lifecycle.LifestyleType">
            <summary>
            枚举 LifestyleType 组件的生存方式，即组件以何种生存周期在容器中生存。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Transient">
            <summary>
            Transient，组件在使用时创建、使用后销毁。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Singleton">
            <summary>
            Singleton，组件一旦自在，则在所有的客商端中共享。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Thread">
            <summary>
            Thread，每一个客户端线程拥有单独的一个实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Pooled">
            <summary>
            Pooled，组件池，初始时分配一定数量的组件，客户请求时，分配一个空闲组件，用户使用完后交由池中。
            </summary>
        </member>
        <member name="T:EAS.Modularization.IModule">
            <summary>
            定义EAS.NET模块插件的基本规范。
            </summary>
            <remarks>
            定义一个模块的接口规范，基于EAS的所有应用程序模块应该遵守IModle接口的约定。
            </remarks>
        </member>
        <member name="T:EAS.Sockets.Messages.MessageExtensions">
            <summary>
            Message扩展方法定义
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageExtensions.GetMessageID(EAS.Sockets.Messages.IMessage)">
            <summary>
            求消息ID
            </summary>
            <param name="message">消息对象。</param>
            <returns>消息ID。</returns>
        </member>
        <member name="T:EAS.Sockets.Messages.P2pBindRequest">
            <summary>
            p2p绑定消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pBindRequest.#ctor">
            <summary>
            初始化P2pBindRequest对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pBindRequest.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.P2pBindRequest.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pBindRequest.TcpSession">
            <summary>
            Tcp会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.P2pBindRequest.InvokeID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="T:EAS.Loggers.Logger">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="M:EAS.Loggers.Logger.GetLogger">
            <summary>
            取得日志记录器。
            </summary>
        </member>
        <member name="M:EAS.Loggers.Logger.GetWorker">
            <summary>
            获取当前工作者（日志记录器）对象。
            </summary>
            <returns>日志记录器。</returns>
        </member>
        <member name="M:EAS.Loggers.Logger.Info(System.String)">
            <summary>
            记录提示信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.Logger.Warn(System.String)">
            <summary>
            记录警告信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.Logger.Debug(System.String)">
            <summary>
            记录调试信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.Logger.Error(System.String)">
            <summary>
            记录错误信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Loggers.Logger.Error(System.Exception)">
            <summary>
            记录错误信息。
            </summary>
            <param name="exc">异常。</param>
        </member>
        <member name="M:EAS.Loggers.Logger.Write(System.String,System.String)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="message">日志信息。</param>
        </member>
        <member name="M:EAS.Loggers.Logger.Write(System.String,System.Exception)">
            <summary>
            书写日志/用于自定义日志。
            </summary>
            <param name="type">日志类型。</param>
            <param name="exc">错误信息。</param>
        </member>
        <member name="T:EAS.Data.IStructDbProvider">
            <summary>
            结构化数据库提供者接口定义。
            </summary>
            <remarks>
            为AgileEAS.NET SOA 中间件NoSQL数据访问提供标准接口定义。
            </remarks>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Connect">
            <summary>
            打开连接。
            </summary>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Close">
            <summary>
            关闭连接。
            </summary>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Insert``1(``0)">
            <summary>
            对象插入。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="item">对象实例。</param>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.InsertBatch``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对象批量插入。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="items">对象实例。</param>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Update``1(System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件执行更新操作。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="updater">更新表达式。</param>
            <param name="func">查询条件。</param>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件执行更新操作。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="item">更新对象。</param>
            <param name="func">查询条件。</param>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="func">条件表达式。</param>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Linq``1">
            <summary>
            求出Linq查询表达式。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>对象表达式包装。</returns>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.List``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            根据条件查询数制。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="where">条件。</param>
            <param name="skip">跳过记录数。</param>
            <param name="take">取记录数。</param>
            <returns>查询结构。</returns>
        </member>
        <member name="M:EAS.Data.IStructDbProvider.Single``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件求单条记录。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="where">条件。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="P:EAS.Data.IStructDbProvider.IsOpen">
            <summary>
            连接是否打开。
            </summary>
        </member>
        <member name="T:EAS.TextValueParser">
            <summary>
            值类型转换工具。
            </summary>
        </member>
        <member name="M:EAS.TextValueParser.Parser(System.Type,System.String)">
            <summary>
            根据对象类型及对象文本值构造对象。
            </summary>
            <param name="type">对象类型。</param>
            <param name="val">对象值。</param>
            <returns>值类型实例。</returns>
        </member>
        <member name="M:EAS.TextValueParser.Parser(System.String,System.String)">
            <summary>
            根据对象类型及对象文本值构造对象。
            </summary>
            <param name="typeName">对象类型名称。</param>
            <param name="val">对象值。</param>
            <returns>值类型实例。</returns>
        </member>
        <member name="T:EAS.Services.Locators.ServiceCache">
            <summary>
            实例缓存。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceCache.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceCache._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceCache.#ctor">
            <summary>
            初始化 ServiceHelper 类实例。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceCache.Contains(System.String)">
            <summary>
            判断是否包含特定实例。
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceCache.Get(System.String)">
            <summary>
            获取服务实例。
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:EAS.Services.Locators.ServiceCache.Add(System.String,System.Object)">
            <summary>
            注册服务实例。
            </summary>
            <param name="Key"></param>
            <param name="instance"></param>
        </member>
        <member name="M:EAS.Services.Locators.ServiceCache.Remove(System.String)">
            <summary>
            注册服务实例。
            </summary>
            <param name="Key"></param>
        </member>
        <member name="P:EAS.Services.Locators.ServiceCache.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Security.PermissionException">
            <summary>
            权限异常。
            </summary>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor">
            <summary>
            初始化 PermissionException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 PermissionException 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 PermissionException 类的新实例。
            </summary>
            <param name="info">它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor(EAS.Services.ServiceMethodAttribute)">
            <summary>
            初始化 PermissionException 类的新实例。
            </summary>
            <param name="servieMethod">服务方法定义。</param>
        </member>
        <member name="T:EAS.Objects.ComponentInfo">
            <summary>
            用于描述一个动态加载的类对象的属性，构造器信息的类。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.#ctor">
            <summary>
            初始化 ComponentInfo 实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.#ctor(System.Type,System.Type)">
            <summary>
            初始化 ComponentInfo 实例。
            </summary>
            <param name="TService">服务类型。</param>
            <param name="T">实例类型。</param>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.#ctor(System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            初始化 ComponentInfo 实例。
            </summary>
            <param name="TService">服务类型。</param>
            <param name="T">实例类型。</param>
            <param name="lifestyle">生命周期。</param>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.GetComponentType">
            <summary>
            取对象类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.ToString">
            <summary>
            返回表示当前对象的的System.String。
            </summary>
            <returns>System.String，表示当前的 System.Object。</returns>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Name">
            <summary>
            获取或设置一个值，批示对象名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Assembly">
            <summary>
            获取或设置一个值，批示对象所在的程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Type">
            <summary>
            获取或设置一个值，批示对象的类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Lifestyle">
            <summary>
            获取或设置一个值，批示对象的生命周期方式。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Properties">
            <summary>
            获取或设置一个值，指示对象的属性列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Constructors">
            <summary>
            获取或设置一个值，批示对象的构造器列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Parameters">
            <summary>
            获取或设置一个值，批示对象的构造过程需要的相关参数。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.TService">
            <summary>
            组件服务类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.T">
            <summary>
            组件服务类型。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketExtensions">
            <summary>
            Socket扩展方法定义。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketExtensions.CreateP2p(EAS.Sockets.SocketTcp)">
            <summary>
            创建Peer-to-Peer连接。
            </summary>
            <remarks>
            创建一个Udp连接并进行P2p绑定：        
            1.请求服务端Tcp会话及Udp端口。
            2.创建一个Udp连接。
            3.执行Udp绑定，向服务器发送P2p绑定请求，绑定Tcp会话和Udp会话。
            </remarks>
            <param name="socketTcp">Tcp连接。</param>
            <returns>udp连接。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketExtensions.GetP2pEndPoint(EAS.Sockets.SocketSession)">
            <summary>
            求出服务端会话的p2p终节点。
            </summary>
            <param name="socketSession"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Serialization.XmlSerializer">
            <summary>
            Xml格式序列化。
            </summary>
        </member>
        <member name="M:EAS.Serialization.XmlSerializer.Serialize``1(``0)">
            <summary>
            使用Xml序列化对象
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>Xml字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="xml">Xml字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.XmlSerializer.Serialize(System.Type,System.Object)">
            <summary>
            使用Xml序列化对象
            </summary>
            <param name="T">对象类型。</param>
            <param name="instance">对象。</param>
            <returns>Xml字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.XmlSerializer.Deserialize(System.Type,System.String)">
            <summary>
            反序列化对象。
            </summary>
            <param name="T">对象类型。</param>
            <param name="xml">Xml字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="T:EAS.Security.SecurityServiceAttribute">
            <summary>
            安全服务特性。
            </summary>
            <remarks>
            用于标准那些服务是安全的，即不经通行令牌进行检查。
            </remarks>
        </member>
        <member name="T:EAS.Security.SecurityMethodAttribute">
            <summary>
            安全方法特性。
            </summary>
            <remarks>
            用于标准那些服务方法是安全的，即不经通行令牌进行检查。
            </remarks>
        </member>
        <member name="T:EAS.Security.IssuedTokenAttribute">
            <summary>
            颁发令牌特性。
            </summary>
            <remarks>
            向客户端颁发通信令牌。
            </remarks>
        </member>
        <member name="T:EAS.Distributed.Parameter">
            <summary>
            RIA形参。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Parameter.#ctor">
            <summary>
            初始化Parameter对象。
            </summary>
        </member>
        <member name="M:EAS.Distributed.Parameter.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            根据参数初始化Parameter对象。
            </summary>
            <param name="info">参数。</param>
        </member>
        <member name="M:EAS.Distributed.Parameter.Deserialize">
            <summary>
            反序列化Parameter对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Distributed.Parameter.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载消息对象。
            </summary>
            <param name="reader">BufferReader。</param>
        </member>
        <member name="M:EAS.Distributed.Parameter.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            保存到指定的BufferWriter。
            </summary>
            <param name="writer">BufferWriter。</param>
        </member>
        <member name="P:EAS.Distributed.Parameter.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="T:EAS.ConfigHandler">
            <summary>
            EAS配置读取程序。 
            </summary>
        </member>
        <member name="M:EAS.ConfigHandler.#ctor">
            <summary>
            初始化 ConfigHandler 类实例。
            </summary>
        </member>
        <member name="M:EAS.ConfigHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建一个配置对象，由所有配置节处理程序实现，以分析配置节的 XML。
            </summary>
            <param name="parent">对应父配置节中的配置设置。</param>
            <param name="context">在从 ASP.NET 配置系统中调用 Create 时为 HttpConfigurationContext。否则，该参数是保留参数，并且为空引用（Visual Basic 中为 Nothing）。</param>
            <param name="section">一个 XmlNode，它包含配置文件中的配置信息。</param>
            <returns>配置对象。</returns>
        </member>
        <member name="T:EAS.Messages.QueueMessage">
            <summary>
            队列消息，用于实现Socket的发布订阅通信。
            </summary>
        </member>
        <member name="M:EAS.Messages.QueueMessage.#ctor">
            <summary>
            初始化QueueMessage对象实例。
            </summary>
        </member>
        <member name="M:EAS.Messages.QueueMessage.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Messages.QueueMessage.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="M:EAS.Messages.QueueMessage.SetData(System.Object)">
            <summary>
            设置消息对象。
            </summary>
            <param name="Data">消息对象。</param>
        </member>
        <member name="M:EAS.Messages.QueueMessage.GetData">
            <summary>
            获取消息对象。
            </summary>
            <returns>消息对象。</returns>
        </member>
        <member name="P:EAS.Messages.QueueMessage.Topic">
            <summary>
            事件主题。
            </summary>
        </member>
        <member name="P:EAS.Messages.QueueMessage.Body">
            <summary>
            消息内容。
            </summary>
        </member>
        <member name="P:EAS.Messages.QueueMessage.Time">
            <summary>
            消息时间。
            </summary>
        </member>
        <member name="T:EAS.Data.EnumMapAttribute">
            <summary>
            枚举映射属性。
            </summary>
        </member>
        <member name="M:EAS.Data.EnumMapAttribute.#ctor(System.String)">
            <summary>
            初始化EnumMapAttribute属性。
            </summary>
            <param name="caption">枚举标题。</param>
        </member>
        <member name="M:EAS.Data.EnumMapAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化EnumMap属性。
            </summary>
            <param name="caption">枚举标题。</param>
            <param name="baseType">数据类型。</param>
        </member>
        <member name="P:EAS.Data.EnumMapAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.EnumMapAttribute.BaseType">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="T:EAS.Data.EnumItemMapAttribute">
            <summary>
            枚举项映射属性。
            </summary>
        </member>
        <member name="M:EAS.Data.EnumItemMapAttribute.#ctor(System.String)">
            <summary>
            初始化EnumItemMapAttribute属性。
            </summary>
            <param name="caption">枚举项标题。</param>
        </member>
        <member name="P:EAS.Data.EnumItemMapAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="T:EAS.Hosting.HostContext">
            <summary>
            引导程序上下文环境。
            </summary>
        </member>
        <member name="M:EAS.Hosting.HostContext.#ctor">
            <summary>
            初始化 HostContext 对象实例。
            </summary>
        </member>
        <member name="P:EAS.Hosting.HostContext.ServiceName">
            <summary>
            服务名称。
            </summary>
        </member>
        <member name="T:EAS.Hosting.ServiceAppInstaller">
            <summary>
            服务安装程序。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceAppInstaller.#ctor">
            <summary>
            初始化ServiceAppInstaller对象实例。
            </summary>
        </member>
        <member name="F:EAS.Hosting.ServiceAppInstaller.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:EAS.Hosting.ServiceAppInstaller.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:EAS.Hosting.ServiceAppInstaller.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:EAS.Hosting.NLBAppInstaller">
            <summary>
            NLB服务安装程序。
            </summary>
        </member>
        <member name="M:EAS.Hosting.NLBAppInstaller.#ctor">
            <summary>
            初始化NlpAppInstaller对象实例。
            </summary>
        </member>
        <member name="F:EAS.Hosting.NLBAppInstaller.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:EAS.Hosting.NLBAppInstaller.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:EAS.Hosting.NLBAppInstaller.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:EAS.Hosting.NLBApp">
            <summary>
            NLB Service Application 引导类。
            </summary>
        </member>
        <member name="M:EAS.Hosting.NLBApp.Main(System.String[])">
            <summary>
            外部调用函数，即全功能调：安装、卸载、运行。
            </summary>
            <param name="args">调用参数。</param>
        </member>
    </members>
</doc>
