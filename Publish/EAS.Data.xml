<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EAS.Data</name>
    </assembly>
    <members>
        <member name="T:EAS.Data.ORM.ColumnAttribute">
            <summary>
            数据列映射属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ColumnAttribute.#ctor(System.String)">
            <summary>
            使用列名初始化ColumnAttribute属性。
            </summary>
            <param name="name">表名。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnAttribute.#ctor(System.String,System.String)">
            <summary>
            使用列名和标题初始化ColumnAttribute属性。
            </summary>
            <param name="name">表名。</param>
            <param name="caption">标题。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnAttribute.#ctor(System.String,System.Data.DbType)">
            <summary>
            初始化ColumnAttribute属性。
            </summary>
            <param name="name">列名。</param>
            <param name="dataType">数据类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnAttribute.#ctor(System.String,System.String,System.Data.DbType)">
            <summary>
            初始化ColumnAttribute属性。
            </summary>
            <param name="name">列名。</param>
            <param name="caption">标题。</param>
            <param name="dataType">数据类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnAttribute.#ctor(System.String,System.String,System.UInt16)">
            <summary>
            初始化ColumnAttribute属性。
            </summary>
            <param name="name">列名。</param>
            <param name="caption">标题。</param>
            <param name="sequenceNo">顺序号。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnAttribute.#ctor(System.String,System.String,System.Data.DbType,System.UInt16)">
            <summary>
            初始化ColumnAttribute属性。
            </summary>
            <param name="name">列名。</param>
            <param name="caption">标题。</param>
            <param name="dataType">数据类型。</param>
            <param name="sequenceNo">顺序号。</param>
        </member>
        <member name="P:EAS.Data.ORM.ColumnAttribute.Name">
            <summary>
            列名。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ColumnAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ColumnAttribute.DataType">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ColumnAttribute.SequenceNo">
            <summary>
            列顺序号。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.PrimaryKeyAttribute">
            <summary>
            主键属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.NotNullAttribute">
            <summary>
            值不可能为空。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IdentityAttribute">
            <summary>
            自增属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.VirtualAttribute">
            <summary>
            虚拟属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.VirtualAttribute.#ctor">
            <summary>
            初始化VirtualAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.VirtualAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化VirtualAttribute对象实例。
            </summary>
            <param name="refEntity">依赖实体。</param>
            <param name="refProperty">关联属性。</param>
        </member>
        <member name="P:EAS.Data.ORM.VirtualAttribute.RefEntity">
            <summary>
            关联实体。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.VirtualAttribute.RefProperty">
            <summary>
            引用属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.TimestampAttribute">
            <summary>
            行版本列属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.NowTimeAttribute">
            <summary>
            当前时间列属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.DefaultValueAttribute">
            <summary>
            主键属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            使用列名初始化ableMapping属性。
            </summary>
            <param name="value">默认值。</param>
        </member>
        <member name="P:EAS.Data.ORM.DefaultValueAttribute.Value">
            <summary>
            默认值。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.DataSizeAttribute">
            <summary>
            数据长度限定。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataSizeAttribute.#ctor(System.Int32)">
            <summary>
            使用长度初始化DataSize属性。
            </summary>
            <param name="Size">字段长度。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataSizeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            使用长度初始化DataSize属性。
            </summary>
            <param name="Size">字段长度。</param>
            <param name="Scale">小数位数。</param>
        </member>
        <member name="P:EAS.Data.ORM.DataSizeAttribute.Size">
            <summary>
            数据长度。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.DataSizeAttribute.Scale">
            <summary>
            小数位置。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.CacheUpdatedAttribute">
            <summary>
            缓存更新字段。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.RefEntityAttribute">
            <summary>
            引用实体属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.RefEntityAttribute.#ctor">
            <summary>
            初始化RefEntityAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.RefEntityAttribute.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            初始化RefEntityAttribute对象实例。
            </summary>
            <param name="refProperty">引用属性。</param>
            <param name="caption">标题。</param>
            <param name="refType">引用实体类型。</param>
            <param name="refKey">引用实体主键类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.RefEntityAttribute.#ctor(System.String,System.String,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            初始化RefEntityAttribute对象实例。
            </summary>
            <param name="refProperty">引用属性。</param>
            <param name="caption">标题。</param>
            <param name="refType">引用实体类型。</param>
            <param name="refKey">引用实体主键类型。</param>
            <param name="nullable">是否为可空引用。</param>
            <param name="cache">使用缓存。</param>
        </member>
        <member name="P:EAS.Data.ORM.RefEntityAttribute.RefProperty">
            <summary>
            引用属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntityAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntityAttribute.RefType">
            <summary>
            引用实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntityAttribute.RefKey">
            <summary>
            引用实体主键。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntityAttribute.Nullable">
            <summary>
            可空引用。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntityAttribute.Cache">
            <summary>
            是否缓存。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.ChildEntityAttribute">
            <summary>
            子实体属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ChildEntityAttribute.#ctor">
            <summary>
            初始化ChildEntityAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ChildEntityAttribute.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            初始化ChildEntityAttribute对象实例。
            </summary>
            <param name="parentKey">父实体主键。</param>
            <param name="caption">标题。</param>
            <param name="childType">子实体类型。</param>
            <param name="childProperty">子实体属性。</param>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntityAttribute.ParentKey">
            <summary>
            父实体属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntityAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntityAttribute.ChildType">
            <summary>
            子实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntityAttribute.ChildProperty">
            <summary>
            子实体属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.NotGenerateAttribute">
            <summary>
            不反向生成到SDM。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.CalcPropertyAttribute">
            <summary>
            计算属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.CalcPropertyAttribute.#ctor(System.String)">
            <summary>
            初始化CalcPropertyAttribute对象实例。
            </summary>
            <param name="expression">计算属性表达式。</param>
        </member>
        <member name="P:EAS.Data.ORM.CalcPropertyAttribute.Expression">
            <summary>
            计算表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ProjectedColumns">
            <summary>
            Result from calling ColumnProjector.ProjectColumns
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ColumnProjector">
            <summary>
            Splits an expression into two parts
              1) a list of column declarations for sub-expressions that must be evaluated on the server
              2) a expression that describes how to combine/project the columns back together into the correct result
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionVisitor">
            <summary>
            DbExpression访问器。
            </summary>
            <remarks>
            包含DbExpression节点的扩展表达式访问器。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.ExpressionVisitor">
            <summary>
            抽象的表达式访问器。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ColumnProjector.Nominator">
            <summary>
            Nominator is a class that walks an expression tree bottom up, determining the set of 
            candidate expressions that are possible columns of a select expression
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ColumnMapper">
            <summary>
            Rewrite all column references to one or more aliases to a new single alias
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.QueryMapping">
            <summary>
            抽象的查询映射。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.IsEntity(System.Type)">
            <summary>
            Determines if a give CLR type is mapped as a database entity
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.IsMapped(System.Reflection.MemberInfo)">
            <summary>
            Deterimines is a property is mapped onto a column or relationship
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.IsColumn(System.Reflection.MemberInfo)">
            <summary>
            Determines if a property is mapped onto a column
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.IsIdentity(System.Reflection.MemberInfo)">
            <summary>
            Determines if a property represents or is part of the entities unique identity (often primary key)
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.IsRelationship(System.Reflection.MemberInfo)">
            <summary>
            Determines if a property is mapped as a relationship
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetRelatedType(System.Reflection.MemberInfo)">
            <summary>
            The type of the entity on the other side of the relationship
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetTableName(System.Type)">
            <summary>
            The name of the corresponding database table
            </summary>
            <param name="rowType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            The name of the corresponding table column
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetMappedMembers(System.Type)">
            <summary>
            A sequence of all the mapped members
            </summary>
            <param name="rowType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.IsSingletonRelationship(System.Reflection.MemberInfo)">
            <summary>
            Determines if a relationship property refers to a single optional entity (as opposed to a collection.)
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetTableQuery(System.Type)">
            <summary>
            Get a query expression that selects all entities from a table
            </summary>
            <param name="rowType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetTypeProjection(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Gets an expression that constructs an entity instance relative to a root.
            The root is most often a TableExpression, but may be any other experssion such as
            a ConstantExpression.
            </summary>
            <param name="root"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetAssociationKeys(System.Reflection.MemberInfo,System.Collections.Generic.List{System.Reflection.MemberInfo}@,System.Collections.Generic.List{System.Reflection.MemberInfo}@)">
            <summary>
            Get the members for the key properities to be joined in an association relationship
            </summary>
            <param name="association"></param>
            <param name="declaredTypeMembers"></param>
            <param name="associatedMembers"></param>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetMemberExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            Get an expression for a mapped property relative to a root expression. 
            The root is either a TableExpression or an expression defining an entity instance.
            </summary>
            <param name="root"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.GetAggregator(System.Type,System.Type)">
            <summary>
            Get a function that coerces an a sequence of one type into another type.
            This is primarily used for aggregators stored in ProjectionExpression's, which are used to represent the 
            final transformation of the entire result set of a query.
            </summary>
            <param name="expectedType"></param>
            <param name="projector"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryMapping.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Apply mapping translations to this expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Linq.QueryMapping.Language">
            <summary>
            The language related to the mapping
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionReplacer">
            <summary>
            Replaces references to one specific instance of an expression node with another node.
            Supports DbExpression nodes
            </summary>
            <remarks>
            替换表达节点与其他节点的一个特定的实例的引用。支持ÐB表达节点。
            </remarks>
        </member>
        <member name="T:EAS.Data.Caching.CacheDeleted">
            <summary>
            实体对象 CacheDeleted(缓存删除记录)。
            </summary>
            <summary>
            实体对象 CacheDeleted(缓存删除记录)。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.DataEntity`1">
            <summary>
            数据实体对象定义。
            </summary>
            <typeparam name="T">类型信息。</typeparam>
        </member>
        <member name="T:EAS.Data.ORM.BaseDataEntity">
            <summary>
            数据实例基类，所有实体对象都间接的继承自本类。
            </summary>
            <remarks>
            BaseDataEntity是增加了新的数据实体DataEntity之后为兼容原有ORM体系的一个产物，实际使用中并不直接使用本类。
            </remarks>
        </member>
        <member name="T:EAS.Data.ORM.IBaseDataEntity">
            <summary>
            数据实体基础接口。
            </summary>
            <remarks>
            该接口为对旬关系映射提供支持，实现本接口的对象映谢为一条数据库记录。
            </remarks>
        </member>
        <member name="T:EAS.Data.ORM.IDataContext">
            <summary>
            数据上下文接口。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IDataContext.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IDataContext.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IGetValue">
            <summary>
            定义数据库记录的数据据读取接口。	
            </summary>
            <remarks>
            该接口为数据对象，数据表对其数据读取提借接口。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.IGetValue.GetValue(System.UInt16)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="sequenceNo">列序号。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IGetValue.GetValue(System.String)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="name">列名称。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IGetValue.GetValue(EAS.Data.ORM.Column)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="column">列定义。</param>
            <returns>列的值。</returns>
        </member>
        <member name="T:EAS.Data.ORM.ISetValue">
            <summary>
            定义数据库记录的数据据写入接口。	
            </summary>
            <remarks>
            该接口为数据对象，数据表对其数据写入提供接口。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.ISetValue.SetValue(System.UInt16,System.Object)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="sequenceNo">列序号。</param>
            <param name="value">列的值。</param>
        </member>
        <member name="M:EAS.Data.ORM.ISetValue.SetValue(System.String,System.Object)">
            <summary>
            设定指定字段的值。
            </summary>
            <param name="name">列名称。</param>
            <param name="value">列的值。</param>
        </member>
        <member name="M:EAS.Data.ORM.ISetValue.SetValue(EAS.Data.ORM.Column,System.Object)">
            <summary>
            设定指定字段的值。
            </summary>
            <param name="col">列定义。</param>
            <param name="value">列的值。</param>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetColumns">
            <summary>
            获取IEntity对象的列集合，我们定义了表/行/列的数据表格模型，目前是以表行为结构进行整理的。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetPropertys">
            <summary>
            获取IEntity对象的属性集合，列集合（GetColumns）的同义词。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetPrimaryKeys">
            <summary>
            获取IEntity对象中的主键集合。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.ContainsProperty(System.String)">
            <summary>
            获取一个值，该值指示对象是否存在指定名称的属性。
            </summary>
            <param name="name">要确定的属性的名称。名称比较不区分大小写。</param>
            <returns>返回属性是否存在的指示。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.ContainsProperty2(System.String)">
            <summary>
            获取一个值，该值指示对象是否存在指定标题的属性。
            </summary>
            <param name="caption">要确定的属性的标题。标题比较不区分大小写。</param>
            <returns>返回属性是否存在的指示。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetProperty(System.Int32)">
            <summary>
            获取指定索引位置处的属性对象。
            </summary>
            <param name="index">属性索引。</param>
            <returns>返回在对象属性列表中指定位置处的属性对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetProperty(System.String)">
            <summary>
            获取指定属性名称的属性对象。
            </summary>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <returns>返回具有指定名称的 Property 对象。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetProperty2(System.String)">
            <summary>
            获取指定属性标题的属性对象。
            </summary>
            <param name="caption">属性标题。名称比较不区分大小写。</param>
            <returns>返回具有指定标题的 Property 对象。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.SetState(EAS.Data.ORM.EntityState)">
            <summary>
            设置实体的状态。
            </summary>
            <param name="state">状态。</param>
        </member>
        <member name="M:EAS.Data.ORM.IBaseDataEntity.GetState">
            <summary>
            获取实体的状态。
            </summary>
            <returns>状态。</returns>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.Session">
            <summary>
            获取或者设置会话对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.DbTableName">
            <summary>
            获取数据对象存储的表的名称。
            </summary>
            <remarks>该值可以是完全限定名称。名称比较不区分大小写。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.Changed">
            <summary>
            该值指示从上次调用构造函数、Refresh方法以来，内存中的对象属性值是否曾经改变。调用 Save 方法后，应该将该属性设置为 false。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.Exists">
            <summary>
            该值指示当前对象在数据库中是否存在。默认实现总是返回 false。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.Item(System.UInt16)">
            <summary>
            获取或者设置指定列序号的属性值。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.Item(EAS.Data.ORM.Column)">
            <summary>
            获取或者设置指定列的属性值。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.Item(System.String)">
            <summary>
            获取或者设置指定名称的属性值。
            </summary>
            <remarks>名称比较不区分大小写。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.IBaseDataEntity.PropertyCount">
            <summary>
            获取对象中已经建立的所有属性的数目。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.ormAccessor">
            <summary>
            内部私有变量，ORM访问器。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.dataAccessor">
            <summary>
            内部私有变量，数据访问器。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.Items">
            <summary>
            数据项目。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.m_Index">
            <summary>
            是否使用索引。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.m_Checked">
            <summary>
            时否选中。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.m_Changed">
            <summary>
            受保护的内部数据变量，指示数据是否发生了变更。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.m_Exists">
            <summary>
            受保护的内部数据变量，指示数据是否发生了变更。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.m_State">
            <summary>
            受保护的内部数据变量，指示数据是否发生了变更。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.BaseDataEntity.MaxSN">
            <summary>
            最大小标。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetMetaData">
            <summary>
            获取元数据定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.#ctor">
            <summary>
            初始化数据实体对象。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.SetState(EAS.Data.ORM.EntityState)">
            <summary>
            设置实体的状态。
            </summary>
            <param name="state">状态。</param>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetState">
            <summary>
            获取实体的状态。
            </summary>
            <returns>状态。</returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetColumns">
            <summary>
            获取数据实体对象中的列集合（Column集合）。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetPropertys">
            <summary>
            获取数据实体对象的属性集合。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetPrimaryKeys">
            <summary>
            获取实体对象的主键名称及其值的集合。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.ContainsProperty(System.String)">
            <summary>
            获取一个值，该值指示对象是否存在指定名称的属性。
            </summary>
            <param name="name">要确定的属性的名称。名称比较不区分大小写。</param>
            <returns>返回属性是否存在的指示。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.ContainsProperty2(System.String)">
            <summary>
            获取一个值，该值指示对象是否存在指定标题的属性。
            </summary>
            <param name="caption">要确定的属性的标题。标题比较不区分大小写。</param>
            <returns>返回属性是否存在的指示。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.PropertyIndexOf(System.String)">
            <summary>
            获取指定名称的属性在对象属性列表中的索引位置。
            </summary>
            <param name="name">要确定位置的属性的名称。名称比较不区分大小写。</param>
            <returns>返回属性在属性列表中的从 0 开始的索引位置，如果不存在相应的属性，则返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.PropertyIndexOf2(System.String)">
            <summary>
            获取指定标题的属性在对象属性列表中的索引位置。
            </summary>
            <param name="caption">要确定位置的属性的标题。名称比较不区分大小写。</param>
            <returns>返回属性在属性列表中的从 0 开始的索引位置，如果不存在相应的属性，则返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.PropertyIndexOf(EAS.Data.ORM.Property)">
            <summary>
            获取指定的属性在对象属性列表中的索引位置。
            </summary>
            <param name="prop">要确定位置的属性对象引用。</param>
            <returns>返回对象在列表中的从 0 开始的索引位置。</returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetProperty(System.Int32)">
            <summary>
            获取指定位置处的属性对象。
            </summary>
            <param name="sequenceNo">列序号。</param>
            <returns>返回在对象属性列表中指定位置处的属性对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetProperty(System.String)">
            <summary>
            获取指定属性名称的属性对象。
            </summary>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <returns>返回具有指定名称的 Property 对象。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetProperty2(System.String)">
            <summary>
            获取指定属性标题的属性对象。
            </summary>
            <param name="caption">属性标题。名称比较不区分大小写。</param>
            <returns>返回具有指定标题的 Property 对象。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetValue(System.UInt16)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="sequenceNo">列序号。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetValue(EAS.Data.ORM.Column)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="column">列定义。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetValue(System.String)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="name">列名称。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.SetValue(System.UInt16,System.Object)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="sequenceNo">列序号。</param>
            <param name="value">列的值。</param>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.SetValue(EAS.Data.ORM.Column,System.Object)">
            <summary>
            设定指定字段的值。
            </summary>KunLun.HIS
            <param name="column">列名称。</param>
            <param name="value">列的值。</param>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.SetValue(System.String,System.Object)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="name">列名称。</param>
            <param name="value">列的值。</param> 
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.ORM.BaseDataEntity.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Index">
            <summary>
            是否为索引方式。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Changed">
            <summary>
            对象属性值是否曾经改变。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Exists">
            <summary>
            当前对象在数据库中是否存在。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Checked">
            <summary>
            当前对象是否选中。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.EAS#Data#ORM#IBaseDataEntity#DbTableName">
            <summary>
            数据库表名。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Item(System.String)">
            <summary>
            获取或者设置指定名称的属性值。
            </summary>
            <exception cref="T:System.ArgumentException">不存在指定的属性。</exception>
            <exception cref="T:System.ArgumentNullException">试图将主键属性的值设置为空值。</exception>
            <remarks>名称比较不区分大小写。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Item(System.UInt16)">
            <summary>
            获取或者设置指定列序号的属性值。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Item(EAS.Data.ORM.Column)">
            <summary>
            获取或者设置指定列的属性值。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.PropertyCount">
            <summary>
            获取对象中已经建立的所有属性的数目。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.PropertyNames">
            <summary>
            获取所有属性的名称数组。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.PrimaryKeyNames">
            <summary>
            主键名称集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Context">
            <summary>
            上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.Session">
            <summary>
            获取或者设置对象所依附的 ISession。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.BaseDataEntity.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IDataEntity`1">
            <summary>
            数据实体接口。
            </summary>
            <remarks>
            该接口为对旬关系映射提供支持，实现本接口的对象映谢为一条数据库记录
            </remarks>
        </member>
        <member name="T:EAS.Data.ORM.IDataEntity">
            <summary>
            数据实体接口。
            </summary>
            <remarks>
            该接口为对旬关系映射提供支持，实现本接口的对象映谢为一条数据库记录
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.IDataEntity.CreateCondition">
            <summary>
            创建一个查询条件。
            </summary>
            <returns>条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataEntity.OnLoad">
            <summary>
            完成实体加载后触发此方法。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IDataEntity.OnSubmit">
            <summary>
            提交（插入|更新）之前触发此方法。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IDataEntity.GetPrimaryKeyText">
            <summary>
            返回表示当前实体的关键字符串表示。
            </summary>
            <returns>System.String，表示当前的实体。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataEntity.GetFullText">
            <summary>
            返回表示当前实体的完整字符串表示。
            </summary>
            <returns>System.String，表示当前的实体。</returns>
        </member>
        <member name="F:EAS.Data.ORM.DataEntity`1.Empty">
            <summary>
            默认的空实体对象。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.#ctor">
            <summary>
            初始化 Entity 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Clone">
            <summary>
            克隆一个新的数据实体对象。
            </summary>
            <returns> 新的数据实体对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.GetColumns">
            <summary>
            获取数据实体对象中的列集合（Column集合）。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Create">
            <summary>
            创建一个数据实体对象。
            </summary>
            <returns>数据实体对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Lazy(System.Object[])">
            <summary>
            延迟加载。
            </summary>
            <param name="primaryKeyValues">对象主键值。</param>
            <returns>延迟加载对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Lazy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            延迟加载。
            </summary>
            <param name="predicate">延迟加载条件。</param>
            <returns>延迟加载对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.LazyCache(System.Object[])">
            <summary>
            延迟加载。
            </summary>
            <param name="primaryKeyValues">对象主键值。</param>
            <returns>延迟加载对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.LazyCache(System.Func{`0,System.Boolean})">
            <summary>
            延迟加载。
            </summary>
            <param name="predicate">延迟加载条件。</param>
            <returns>延迟加载对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Select">
            <summary>
            查询。
            </summary>
            <returns>符合条件的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Select(EAS.Data.ORM.Condition)">
            <summary>
            查询。
            </summary>
            <param name="condition">数据查询条件。</param>
            <returns>符合条件的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Select(System.Int32,System.Int32)">
            <summary>
            查询。
            </summary>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Select(EAS.Data.ORM.Condition,System.Int32,System.Int32)">
            <summary>
            查询。
            </summary>
            <param name="condition">数据查询条件。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Select(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            查询。
            </summary>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Select(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            查询。
            </summary>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Update(EAS.Data.ORM.ColumnCollection,EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="colValues">要更新的列及指定的值。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Update(System.Collections.Generic.Dictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="colValues">要更新的列及指定的值。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Delete(EAS.Data.ORM.Condition)">
            <summary>
            从数据库中删除数据表记录。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.GetValue``1(System.UInt16)">
            <summary>
            返回指定字段的值。
            </summary>
            <typeparam name="TValue">类型信息。</typeparam>
            <param name="sequenceNo">列序号。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.GetValue``1(System.String)">
            <summary>
            返回指定字段的值。
            </summary>
            <typeparam name="TValue">类型信息。</typeparam>
            <param name="name">列名称。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.CreateSelectCondition">
            <summary>
            创建一个查询条件。
            </summary>
            <returns>条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.CreateCondition">
            <summary>
            创建一个查询条件。
            </summary>
            <returns>条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.NotifyPropertyChanged(System.String)">
            <summary>
            写成PropertyChanged事件通知。
            </summary>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.OnLoad">
            <summary>
            完成实体加载后触发此方法。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.OnSubmit">
            <summary>
            提交（插入|更新）之前触发此方法。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Eval(System.String)">
            <summary>
            对表达式进行计算/求值。
            </summary>
            <param name="expression">要计算的表达式,如"1+2+3+4"。</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.Eval``1(System.String)">
            <summary>
            对表达式进行计算。
            </summary>
            <typeparam name="TValue">返回值类型。</typeparam>
            <param name="expression">字符表达式。</param>
            <returns>表达式结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#SetValue(System.String,System.Object)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="name">名称名称。</param>
            <param name="value">属性值。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetValue(System.String)">
            <summary>
            获取指定表达式或者属性的值。
            </summary>
            <param name="expression">表达式或者属性名称。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetValue``1(System.String)">
            <summary>
            取指定名称的属性值。
            </summary>
            <typeparam name="TValue">返回值类型。</typeparam>
            <param name="expression">表达式。</param>
            <returns>对应表达式的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetBoolean(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetDateTime(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetGuid(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetByte(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetInt16(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetInt32(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetInt64(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetDecimal(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetDouble(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetSingle(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.EAS#Workflow#IWorkflowDataEntity#GetString(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.GetPrimaryKeyText">
            <summary>
            返回表示当前实体的关键字符串表示。
            </summary>
            <returns>System.String，表示当前的实体。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntity`1.GetFullText">
            <summary>
            返回表示当前实体的完整字符串表示。
            </summary>
            <returns>System.String，表示当前的实体。</returns>
        </member>
        <!-- 对于成员“M:EAS.Data.ORM.DataEntity`1.ToString”忽略有格式错误的 XML 注释 -->
        <member name="P:EAS.Data.ORM.DataEntity`1.DbTableName">
            <summary>
            获取数据表的名称。
            </summary>
        </member>
        <member name="E:EAS.Data.ORM.DataEntity`1.PropertyChanged">
            <summary>
            在更改属性值时发生。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheDeleted.ID">
            <summary>
            ID 。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheDeleted.Type">
            <summary>
            类型 。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheDeleted.LMTime">
            <summary>
            最后更新时间 。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheDeleted.LDTime">
            <summary>
            最后删除时间 。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.AbstractProvider">
            <summary>
            抽象的数据库访问器。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.IDbProvider">
            <summary>
            数据库访问程序提供者。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Open">
            <summary>
            打开数据连接。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Close">
            <summary>
            关闭数据连接。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.BeginTransaction">
            <summary>
            开始一个新的数据库事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始一个新的数据库事务。
            </summary>
            <param name="il">事务隔离级别。</param>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.CommitTransaction">
            <summary>
            提交挂起的数据库事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Commit">
            <summary>
            提交挂起的数据库事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.RollbackTransaction">
            <summary>
            回滚挂起的数据库事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Rollback">
            <summary>
            回滚挂起的数据库事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Execute(EAS.Data.Access.DbCommand)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装。</param>		
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Query(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.CreateTransaction">
            <summary>
            在当前操作环境中启动一个事务，显示的支持简单的事务调用。 
            </summary>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            在当前操作环境中启动一个事务，显示的支持简单的事务调用。 
            </summary>
            <param name="il">事务隔离级别。</param>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.Execute(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令类型。</param>
            <param name="parameters">要执行的命令的参数集合。</param>
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.QueryScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果的第一行第一列。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.QueryDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.QueryDataSet(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDbProvider.QueryDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <!-- 对于成员“M:EAS.Data.Access.IDbProvider.DelegateQuery(System.Action{System.Data.IDataReader},System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})”忽略有格式错误的 XML 注释 -->
        <member name="P:EAS.Data.Access.IDbProvider.IsOpen">
             <summary>
            指示数据库连接是否打开。
             </summary>
        </member>
        <member name="P:EAS.Data.Access.IDbProvider.ConnectionString">
            <summary>
            连接字符串。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.IDbProvider.ConnectionTimeout">
            <summary>
            连接超时时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.IDbProvider.CommandTimeout">
            <summary>
            命令超时时间。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.#ctor">
            <summary>
            初始化 AbstractDbProvider 类实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.CreateCommand">
            <summary>
            根据当前访问环境中的数据库连接，创建一个新的数据库操作命令对象。
            </summary>
            <returns>返回已经创建的数据库命令对象 System.Data.IDbCommand。调用方可以直接使用该命令对象执行数据库操作。</returns>
            <exception cref="T:System.InvalidOperationException">数据访问环境还没有打开。</exception>
            <remarks>该方法仅在 Accessor 对象中使用。</remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.BeginTransaction">
            <summary>
            在当前操作环境中启动一个数据库事务。
            </summary>
            <exception cref="T:System.InvalidOperationException">数据访问环境还没有打开或者已经释放。</exception>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            在当前操作环境中启动一个数据库事务。
            </summary>
            <param name="il">事务隔离级别。</param>
            <exception cref="T:System.InvalidOperationException">数据访问环境还没有打开或者已经释放。</exception>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.CommitTransaction">
            <summary>
            提交已经通过 BeginTransaction 方法开始的事务。
            </summary>
            <remarks>如果事务还没有启动，则不会产生任何效果，也不会抛出异常。</remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.RollbackTransaction">
            <summary>
            回滚已经通过 BeginTransaction 方法开始的事务。
            </summary>
            <remarks>CommitTransaction，则不会产生任何效果，也不会抛出异常。</remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Commit">
            <summary>
            提交，和CommitTransaction等同。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Rollback">
            <summary>
            回滚事务，和RollbackTransaction等同。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Close">
            <summary>
            关闭当前已经通过 Open 方法打开的数据访问环境，并将相应的 Connection 对象返回到连接池中。
            </summary>
            <exception cref="T:System.InvalidOperationException">在当前数据访问环境中仍然存在活动事务。</exception>
            <remarks>如果环境还没有打开或者已经关闭，则不会产生任何效果，也不会抛出异常。已经关闭的环境可以使用Open方法再次打开。</remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Open">
            <summary>
            从连接池中获取一个数据库连接对象或者创建一个新的数据库连接对象，并打开当前数据访问环境，以进行数据库操作。
            </summary>
            <exception cref="T:System.InvalidOperationException">数据访问环境已经释放。</exception>
            <remarks>如果已经调用 Dispose 方法释放环境，则不能再次通过该方法打开环境。</remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.InternalFillDataSet(System.Data.DataSet,System.Data.IDbCommand)">
            <summary>
            填充数据集，把数据查询结果填充到某一数据集。
            </summary>
            <param name="ds">要填充的数据集。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.ToIDbDataParameter(EAS.Data.Access.Parameter,System.Data.IDbCommand)">
            <summary>
            转换通用参数为数据库相关参数。
            </summary>
            <param name="parameter">通用参数。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Execute(EAS.Data.Access.DbCommand)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装。</param>		
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Query(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.CreateTransaction">
            <summary>
            在当前操作环境中启动一个事务，显式的支持简单的事务调用。 
            </summary>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            在当前操作环境中启动一个事务，显式的支持简单的事务调用。 
            </summary>
            <param name="il">事务隔离级别。</param>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.GetHashCode">
            <summary>
            已重写，获取哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.Execute(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令类型。</param>
            <param name="parameters">要执行的命令的参数集合。</param>
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.QueryScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果的第一行第一列。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.QueryDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.QueryDataSet(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.AbstractProvider.QueryDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <!-- 对于成员“M:EAS.Data.Access.AbstractProvider.DelegateQuery(System.Action{System.Data.IDataReader},System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.IDataParameter})”忽略有格式错误的 XML 注释 -->
        <member name="P:EAS.Data.Access.AbstractProvider.Connection">
            <summary>
            获取或设置 AbstractDbProvider 对象的 IDbConnection 实例。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.Transaction">
            <summary>
            获取或设置 AbstractConnection 对象的 IDbTransaction 实例。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.IsOpen">
            <summary>
            是否已经处在打开状态。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.ConnectionString">
            <summary>
            获取或设置连接的数据库连接字符串。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.ConnectionTimeout">
            <summary>
            获取连接的数据库连接超时时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.CommandTimeout">
            <summary>
            获取或者数据库命令超时时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.DbConnection">
            <summary>
            获取原始数据库连接。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.DbCommandDispatchers">
            <summary>
            命令分配器清单。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.DbCommandDispatcher">
            <summary>
            命命分配器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.CanAllot">
            <summary>
            是否可分配。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.AbstractProvider.Busy">
            <summary>
            工作中。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.Parameter">
            <summary>
            统一的数据库访问参数，提供给系统数据库访问参数，此参数可以为不同的数据库提供。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor">
            <summary>
            初始化　Parameter　类实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor(System.String,System.Data.DbType)">
            <summary>
             初始化　Parameter　类实例。
            </summary>
            <param name="Name">参数名称。</param>
            <param name="DbType">数据类型。</param>	
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor(System.String,System.Object)">
            <summary>
             初始化　Parameter　类实例。
            </summary>
            <param name="Name">参数名称。</param>
            <param name="Value">参数值。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            初始化　Parameter　类实例。
            </summary>
            <param name="Name">参数名称。</param>
            <param name="DbType">数据类型。</param>	
            <param name="Size">参数大小。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            初始化　Parameter　类实例。
            </summary>
            <param name="Name">参数名称。</param>
            <param name="DbType">数据类型。</param>	
            <param name="Size">参数大小。</param>
            <param name="SourceColumn">源列的名称。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            初始化　Parameter　类实例。
            </summary>
            <param name="Name">参数名称。</param>
            <param name="DbType">数据类型。</param>
            <param name="Size">参数大小。</param>
            <param name="Direction">参数是只可输入、只可输出、双向还是存储过程返回值参数。</param>
            <param name="IsNullable">参数是否接受空值。</param>
            <param name="Precision">参数的精度。</param>
            <param name="Scale">参数的小数位数。</param>
            <param name="SourceColumn">源列的名称。</param>
            <param name="SourceVersion">加载 Value 时使用的 DataRowVersion。</param>
            <param name="Value">参数的值。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.ToIDbDataParameter(System.Data.IDbCommand)">
            <summary>
            转换为特定的数据库访问接口参数。
            </summary>
            <param name="cmd">执行数据库访问的数据连接对象。</param>
            <returns>与特定数据库访问接口相关的数据库访问参数。</returns>
        </member>
        <member name="M:EAS.Data.Access.Parameter.Clone">
            <summary>
            克隆一个 Parameter 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.Parameter.System#ICloneable#Clone">
            <summary>
            克隆一个 Parameter 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.Parameter.ToString">
            <summary>
            重写基类　ToString 方法。
            </summary>
            <returns>返回参数名称。</returns>
        </member>
        <member name="M:EAS.Data.Access.Parameter.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Access.Parameter.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Precision">
            <summary>
            获取或设置一个值，指示数值参数的精度。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Scale">
            <summary>
            获取或设置一个值，指示数值参数的小数位数。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Size">
            <summary>
            获取或设置一个值，参数的大小。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Direction">
            <summary>
            获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Name">
            <summary>
            获取或设置参数名称
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.DbType">
            <summary>
            获取或设置参数的 DbType
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Value">
            <summary>
            获取或设置该参数的值。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Text">
            <summary>
            参数值/XML。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.IsNullable">
            <summary>
            获取一个值，该值指示参数是否接受空值。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.SourceVersion">
            <summary>
            获取或设置在加载 Value 时使用的 DataRowVersion。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.ParameterName">
            <summary>
            获取或设置 IDataParameter 的名称。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.SourceColumn">
            <summary>
            获取或设置源列的名称，该源列映射到 DataSet 并用于加载或返回 Value。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.Rewriter">
            <summary>
            IDbProvider执行命令之前是否重写命。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.Parameter.IsTable">
            <summary>
            是否为表值参数，应对OracleType.Cursor。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IDataTag">
            <summary>
            数据Tag接口。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IDataTag.Tag">
            <summary>
            获取或设置包含有特定数据的对象。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.Column">
            <summary>
            数据库实体列定义。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Column.SetValue(EAS.Data.ORM.IBaseDataEntity,System.Object)">
            <summary>
            为数据实体设置属性值。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <param name="value">属性值。</param>
        </member>
        <member name="M:EAS.Data.ORM.Column.GetValue(EAS.Data.ORM.IBaseDataEntity)">
            <summary>
            获取数据实体属性值。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>属性值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Column.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.ORM.Column.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.ORM.Column.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="M:EAS.Data.ORM.Column.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Column.CreateSetAction">
            <summary>
            生成赋值表达式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.Column.CreateGetFunc">
            <summary>
            生成取值表达式。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.ORM.Column.Caption">
            <summary>
            获取列的标题。
            </summary>
            <remarks>该标题用来对用户显示友好的名称。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Column.Name">
            <summary>
            获取列的名称。
            </summary>
            <remarks>该名称对应 Entity 在数据库中的相应字段的名称，或者是对聚合列等的名称。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Column.DataType">
            <summary>
            获取列数据的数据类型。
            </summary>
            <remarks>该值由 System.Data.DbType 定义，并映射到相应的数据库数据类型和 .NET 公共类型。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Column.SequenceNo">
            <summary>
            列顺序号。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.DefaultValue">
            <summary>
            获取列的默认值。
            </summary>
            <remarks>该值不会是空引用，空值被映射为 System.DBNull.Value。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Column.PrimaryKey">
            <summary>
            获取列是否为否数据库主键。
            </summary>
            <remarks>该值不会是空引用，空值被映射为true。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Column.Identity">
            <summary>
            获取列是否为自动增加列。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Virtual">
            <summary>
            是否为虚拟列。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.RefEntity">
            <summary>
            关联实体。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.RefProperty">
            <summary>
            引用属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Timestamp">
            <summary>
            是否为时间戳列。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.NowTime">
            <summary>
            是否为当前时间列。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.CacheUpdated">
            <summary>
            是否为缓存更新字段。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Size">
            <summary>
            数据长度。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Scale">
            <summary>
            小数位置。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Tag">
            <summary>
            获取或设置包含有特定数据的对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Property">
            <summary>
            映射属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.TData">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.Serializable">
            <summary>
            序列化。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.GetFunc">
            <summary>
            读数据方法。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.SetAction">
            <summary>
            写数据方法。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Column.PropertyName">
            <summary>
            属性名。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.ICacheAccessor">
            <summary>
            缓存访问器接口。
            </summary>
            <remarks>
            为ORM对象提供缓存查询能力。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.ICacheAccessor.CacheRefresh(EAS.Data.ORM.IEntity)">
            <summary>
            缓存刷新实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.ICacheAccessor.CacheQuery(EAS.Data.ORM.ITable)">
            <summary>
            表缓存查询。
            </summary>
            <param name="table">表。</param>
        </member>
        <member name="M:EAS.Data.ORM.ICacheAccessor.CacheQuery(EAS.Data.ORM.ITable,EAS.Data.ORM.Condition)">
            <summary>
            表缓存查询。
            </summary>
            <param name="table">表。</param>
            <param name="condition">数据查询条件。</param>
        </member>
        <member name="T:EAS.Data.Linq.ExpressionComparer">
            <summary>
            表达式比较。
            </summary>
            <remarks>
            比较两个表达式，以确定它们是否是等价的。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.IDeferLoadable">
            <summary>
            控制的延迟可装载类型的通用接口。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DeferredList`1">
            <summary>
            IDeferLoadable的简单实现。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EAS.InternalExpression.ExpressionEvaluator">
            <summary>
            表达式计算器
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.ParseExpression(System.String)">
            <summary>
            将算术表达式转换为逆波兰表达式
            </summary>
            <param name="expression">要计算的表达式,如"1+2+3+4"</param>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.CalcExpression(System.Collections.Generic.List{EAS.InternalExpression.ExpressionNode})">
            <summary>
            对逆波兰表达式进行计算
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.Calculate(EAS.InternalExpression.ExpressionNodeType,System.Object[])">
            <summary>
            计算节点的值
            </summary>
            <param name="nodeType">节点的类型</param>
            <param name="data">要计算的值,有可能是两位或一位数</param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.ConvertToBool(System.Object)">
            <summary>
            将某个值转换为bool值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.ConvertToDecimal(System.Object)">
            <summary>
            将某个值转换为decimal值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.Eval(System.String)">
            <summary>
            对表达式进行计算
            </summary>
            <param name="expression">要计算的表达式,如"1+2+3+4"</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数值</returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionEvaluator.Eval(System.String,System.Object)">
            <summary>
            对表达式进行计算
            </summary>
            <param name="expression">要计算的表达式,如"1+2+3+4"</param>
            <param name="instance">实例。</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数值</returns>
        </member>
        <member name="T:EAS.Data.Caching.DbCacheProvider">
            <summary>
            基于数据库的缓存服务提供者。
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.ICacheProvider">
            <summary>
            缓存提供者接口。
            </summary>
            <remarks>
            用于向系统提供基本的数据实体缓存服务。
            </remarks>
        </member>
        <member name="T:EAS.Data.Caching.ICacheService">
            <summary>
            数据缓存服务。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.ICacheService.GetData(System.String,System.String,System.DateTime,System.Guid)">
            <summary>
            获取数据更新，获取dataType对象updateProperty的值大于updateTime的数据集合。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="updateProperty">更新属性。</param>
            <param name="updateTime">更新时间。</param>
            <returns>发生更新的数据集合。</returns>
            <param name="sessionID">会话ID。</param>
        </member>
        <member name="M:EAS.Data.Caching.ICacheService.GetData(System.String,EAS.Data.ORM.Condition,System.Int32)">
            <summary>
            检索数据，根据指定条件检索，不使用缓存。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="condition">检索条件。</param>
            <param name="count">记录数。</param>
            <returns>符合条件的数据。</returns>
        </member>
        <member name="M:EAS.Data.Caching.DbCacheProvider.GetData(System.String,EAS.Data.ORM.Condition,System.Int32)">
            <summary>
            检索数据，根据指定条件检索，不使用缓存。
            </summary>
            <param name="dataType">实体类型。</param>
            <param name="condition">检索条件。</param>
            <param name="count">记录数。</param>
            <returns>符合条件的数据。</returns>
        </member>
        <member name="M:EAS.Data.Caching.DbCacheProvider.GetData(System.String,System.String,System.DateTime,System.Guid)">
            <summary>
            获取数据更新，获取dataType对象updateProperty的值大于updateTime的数据集合。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="updateProperty">更新属性。</param>
            <param name="updateTime">更新时间。</param>
            <returns>发生更新的数据集合。</returns>
            <param name="sessionID">会话ID。</param>
        </member>
        <member name="M:EAS.Data.Caching.DbCacheProvider.GetCacheFromDb(System.String,System.String,System.DateTime,System.Type)">
            <summary>
            从数据库读缓存。
            </summary>
            <param name="dataType"></param>
            <param name="updateProperty"></param>
            <param name="updateTime"></param>
            <param name="TDataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.DbCacheProvider.NeedReload(System.String,System.DateTime)">
            <summary>
            是否需要重新加载。
            </summary>
            <param name="dataType"></param>
            <param name="updateTime"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Caching.ICacheSerializable">
            <summary>
            缓存读写接口、自定义序列化机制。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.ICacheSerializable.LastTime">
            <summary>
            最后更新时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.ICacheSerializable.Data">
            <summary>
            关联数据。
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.CacheRoot`1">
            <summary>
            缓存存储根对象。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <remarks>
            在内存缓存之中存储的对象的根Pack，数据被包裹在CacheRoot之中，CacheRoot是本地持久化读写的最小单位。
            </remarks>
        </member>
        <member name="M:EAS.Data.Caching.CacheRoot`1.#ctor">
            <summary>
            初始化CacheRoot实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheRoot`1.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheRoot`1.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheRoot`1.LoadColumns(EAS.IO.BufferReader)">
            <summary>
            读头信息。
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheRoot`1.WriteColumns(EAS.IO.BufferWriter,System.Collections.Generic.List{EAS.Data.ORM.SerializeColumn})">
            <summary>
            写头信息。
            </summary>
            <param name="writer"></param>
            <param name="columns"></param>
        </member>
        <member name="M:EAS.Data.Caching.CacheRoot`1.ColumnsComparison(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.Collections.Generic.List{EAS.Data.ORM.SerializeColumn})">
            <summary>
            比对头信息与|实体序列化元数据列。
            </summary>
            <param name="columns"></param>
            <param name="serializeColumns"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Caching.CacheRoot`1.LastTime">
            <summary>
            最后更新时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheRoot`1.Data">
            <summary>
            关联数据。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheRoot`1.Items">
            <summary>
            缓存项目。
            </summary>
        </member>
        <member name="T:EAS.SAAS.XMLMultiTenant">
            <summary>
            基于XML配置文件的多租户切换构件。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.IMultiTenant">
            <summary>
            多租户上下文切换接口。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.IMultiTenant.GetProvider(System.String)">
            <summary>
            根据帐套名称取指定租户数据连接提供者程序。
            </summary>
            <param name="dataSet">帐套名称，数据库连接提供者。</param>
            <returns>数据库连接程序。</returns>
        </member>
        <member name="M:EAS.Data.Access.IMultiTenant.Release(System.Object)">
            <summary>
            释放连接。
            </summary>
            <param name="instance">对象实例。</param>
        </member>
        <member name="M:EAS.SAAS.XMLMultiTenant.#ctor">
            <summary>
            初始化XMLMultiTenant对象实例。
            </summary>
        </member>
        <member name="M:EAS.SAAS.XMLMultiTenant.GetProvider(System.String)">
            <summary>
            求出数据连接。
            </summary>
            <param name="dataSet">帐套。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.SAAS.XMLMultiTenant.Release(System.Object)">
            <summary>
            施放对象。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:EAS.Data.Linq.ExpressionReplacer">
            <summary>
            表达式替换。
            </summary>
            <remarks>
            替换到一个特定的实例表达式节点。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.ClientJoinedProjectionRewriter">
            <summary>
            rewrites nested projections into client-side joins
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.LinqExpressionParser`1">
            <summary>
            Linq查询表达式/解析后结构。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EAS.Data.Linq.LinqExpressionParser`1.ProcessSkip(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            处理Skip。
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExpressionParser`1.ProcessTop(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            处理Top/Take。
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExpressionParser`1.AddOrderBy(System.Linq.Expressions.MethodCallExpression,System.Boolean,EAS.Data.ORM.MappingMetaData)">
            <summary>
            处理排序。
            </summary>
            <param name="expression"></param>
            <param name="desc"></param>
            <param name="mmd"></param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExpressionParser`1.ProcessSelectColumns(System.Linq.Expressions.Expression)">
            <summary>
            处理列名选择。
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.CalcRecords">
            <summary>
            是否处理记录总数。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.First">
            <summary>
            第一条记录。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Last">
            <summary>
            最后一条记录。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Default">
            <summary>
            默认对象。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Condition">
            <summary>
            条件表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Orders">
            <summary>
            排序表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Propertys">
            <summary>
            条件表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Skip">
            <summary>
            跳过前面N条记录。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.LinqExpressionParser`1.Count">
            <summary>
             记录总数。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.LinqException">
            <summary>
            Linq异常。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.LinqException.#ctor">
            <summary>
            初始化 LinqException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.LinqException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 LinqException 类的新实例。
            </summary>
            <param name="errorMessage">描述错误的消息。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 System.Exception 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 System.Exception 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:EAS.Data.Caching.Cache">
            <summary>
            数据实体缓存。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.Cache.#ctor">
            <summary>
            初始化DataEntityCache。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add``1(System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            注册实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="updater">更新字段。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add``1(System.Linq.Expressions.Expression{System.Func{``0,``0}},System.TimeSpan)">
            <summary>
            注册实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="updater">更新字段。</param>
            <param name="updateCycle">缓存更新周期。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            注册实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="updater">更新字段。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.TimeSpan)">
            <summary>
            注册实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="updater">更新字段。</param>
            <param name="updateCycle">缓存更新周期。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add``1(System.String)">
            <summary>
            注册实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="updateProperty">新字段。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add``1(System.String,System.TimeSpan)">
            <summary>
            注册实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="updateProperty">新字段。</param>
            <param name="updateCycle">缓存更新周期。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add(System.Type,System.String)">
            <summary>
            注册实体缓存。
            </summary>
            <param name="TData">实体类型。</param>
            <param name="updateProperty">新字段。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Add(System.Type,System.String,System.TimeSpan,System.Boolean)">
            <summary>
            注册实体缓存。
            </summary>
            <param name="TData">实体类型。</param>
            <param name="updateProperty">新字段。</param>
            <param name="updateCycle">缓存更新周期。</param>
            <param name="sync">同步加载。</param>
        </member>
        <!-- 对于成员“M:EAS.Data.Caching.Cache.Add(System.Type,System.String,System.TimeSpan,System.Action,System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Data.Caching.Cache.Remove``1">
            <summary>
            移除实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Remove(System.Type)">
            <summary>
            移除实体缓存。
            </summary>
            <param name="TData">实体类型。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.GetKeys">
            <summary>
            列出已缓存的所有CacheKey。
            </summary>
            <returns>已缓存的CacheKey清单。</returns>
        </member>
        <member name="M:EAS.Data.Caching.Cache.GetKey``1">
            <summary>
            根据类型求CacheKey。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>CacheKey。</returns>
        </member>
        <member name="M:EAS.Data.Caching.Cache.GetKey(System.Type)">
            <summary>
            求缓存Key。
            </summary>
            <param name="TData">实体类型。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Get``1">
            <summary>
            获取实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>实体数据集合。</returns>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Get(System.Type)">
            <summary>
            获取实体缓存。
            </summary>
            <param name="T">实体类型。</param>
            <returns>实体数据集合。</returns>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Update``1">
            <summary>
            强制更新缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
        </member>
        <member name="M:EAS.Data.Caching.Cache.Load(System.Reflection.Assembly)">
            <summary>
            预加载/缓存预热。
            </summary>
            <param name="assembly">程序集。</param>
        </member>
        <member name="M:EAS.Data.Caching.Cache.InternalGet``1">
            <summary>
            获取实体缓存。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>实体数据集合。</returns>
        </member>
        <member name="M:EAS.Data.Caching.Cache.InternalGet(System.Type)">
            <summary>
            获取实体缓存。
            </summary>
            <param name="TData">实体类型。</param>
            <returns>实体数据集合。</returns>
        </member>
        <member name="M:EAS.Data.Caching.Cache.GetCacheKey(System.Type)">
            <summary>
            求缓存Key/内部使用。
            </summary>
            <param name="TData"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Caching.Cache.SessionID">
            <summary>
            缓存的会话ID。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.Cache.WorkerThread">
            <summary>
            工作线程。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DataReaderHandler">
            <summary>
            定义以DataReader作为结果返回时的数据访问委托。
            </summary>
            <param name="dataReader">数据调取器。</param>
        </member>
        <member name="T:EAS.Data.Access.TransactionHandler">
            <summary>
            定义数据库操作的事务处理委托。
            </summary>
            <param name="Accessor">数据访问器对象。</param>
        </member>
        <member name="T:EAS.Data.Access.TransactionHandler2">
            <summary>
            定义数据库操作的事务处理委托。
            </summary>
            <param name="Accessor">数据访问器对象。</param>
            <param name="parameters">委托参数。</param>
        </member>
        <member name="T:EAS.Data.Access.IDataAccessor">
            <summary>
            数据访问提供者/数据访问器。
            </summary>
            <remarks>
            本接口是数据访问的一个基础接口，用于完成最基础的数据访问。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Execute(System.String)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <returns>返回命令影响的行数。</returns>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Execute(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">要执行的命令的参数集合。</param>
            <returns>返回命令影响的行数。</returns>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Execute(System.String,System.Data.CommandType)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令类型。</param>
            <returns>返回命令影响的行数。</returns>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Execute(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令类型。</param>
            <param name="parameters">要执行的命令的参数集合。</param>
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Execute(EAS.Data.Access.DbCommand)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装。</param>		
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Query(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Query(System.String,EAS.Data.Access.ResultType)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="resultType">调用方要求的返回结果的类型。</param>
            <returns>返回查询到的数据结果。</returns>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Query(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询到的数据结果。</returns>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Query(System.String,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型。</param>
            <returns>返回查询到的数据结果。</returns>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Query(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.Query(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryScalar(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果的第一行第一列。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryScalar(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果的第一行第一列。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryScalar(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果的第一行第一列。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryScalar(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果的第一行第一列。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataReader(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataReader(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataReader(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataReader(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataSet(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataSet(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataSet(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataSet(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataTable(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataTable(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataTable(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDataTable(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryList(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一列的值。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryList(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一列的值。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryList(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一列的值。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryList(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一列的值。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDictionary(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一行的Key-Value。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDictionary(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一行的Key-Value。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDictionary(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一行的Key-Value。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryDictionary(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一行的Key-Value。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryMatrix(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果Matrix。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryMatrix(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果Matrix。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryMatrix(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果Matrix。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QueryMatrix(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果Matrix。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QuerySchema(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QuerySchema(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QuerySchema(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.QuerySchema(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.TransactionExecute(EAS.Data.Access.TransactionHandler)">
            <summary>
            在事务环境中执行给定的 EAS.Data.Access.TransactionHandler，该EAS.Data.Access.TransactionHandler中包括了要在事务中执行的所有数据库操作。
            </summary>
            <param name="handler">要执行的 EAS.Data.Access.TransactionHandler 对象。</param>
            <returns>返回受影响的行数，该值为 EAS.Data.Access.TransactionHandler 返回的结果，默认返回 0。</returns>
            <exception cref="T:System.ArgumentNullException">handler 为空引用。</exception>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            不要在 EAS.Data.Access.TransactionHandler 对象中处理事务，事务的开始和结束都由该方法负责，即使执行中出现异常，该方法也会正确地回滚事务。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.TransactionExecute(EAS.Data.Access.TransactionHandler2,System.Object[])">
            <summary>
            在事务环境中执行给定的 TransactionHandler，该TransactionHandler中包括了要在事务中执行的所有数据库操作。
            </summary>
            <param name="handler">要执行的 TransactionHandler 对象。</param>
            <param name="parameters">调用参数。</param>
            <returns>返回受影响的行数，该值为 TransactionHandler 返回的结果，默认返回 0。</returns>
            <exception cref="T:System.ArgumentNullException">handler 为空引用。</exception>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            不要在 EAS.Data.Access.TransactionHandler 对象中处理事务，事务的开始和结束都由该方法负责，即使执行中出现异常，该方法也会正确地回滚事务。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.DelegateQuery(EAS.Data.Access.DataReaderHandler,System.String)">
            <summary>
            委托查询。当调用方需要返回DataReader时，如果使用Query，则必须自行打开环境和关闭环境以及DataReader的关闭。
            </summary>
            <param name="handler">需要由DelegateQuery方法代为调用的EAS.Data.Access.DataReaderHandler委托对象。</param>
            <param name="commandText">要执行的查询命令文本。</param>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.DelegateQuery(EAS.Data.Access.DataReaderHandler,System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            委托查询。当调用方需要返回DataReader时，如果使用Query，则必须自行打开环境和关闭环境以及DataReader的关闭。
            </summary>
            <param name="handler">需要由DelegateQuery方法代为调用的EAS.Data.Access.DataReaderHandler委托对象。handler中的方法可以关闭DataReader对象，也可以不关闭DataReader对象。</param>
            <param name="commandText">要执行的查询命令文本。</param>
            <param name="commandType">查询命令类型。</param>
            <param name="parameters">命令参数。</param>
            <exception cref="T:System.ArgumentNullException">handler 为空引用。</exception>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <!-- 对于成员“M:EAS.Data.Access.IDataAccessor.DelegateQuery(System.Action{System.Data.IDataReader},System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Data.Access.IDataAccessor.CreateTransaction">
            <summary>
            在当前操作环境中启动一个事务，显示的支持简单的事务调用。 
            </summary>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            在当前操作环境中启动一个事务，显示的支持简单的事务调用。 
            </summary>
            <param name="il">事务隔离级别。</param>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.IDataAccessor.GetQueryLanguage">
            <summary>
            获取相关的查询语言。
            </summary>
            <returns>查询语言类型。</returns>
        </member>
        <member name="P:EAS.Data.Access.IDataAccessor.Language">
            <summary>
            查询语言/用于Linq解析。
            </summary>
        </member>
        <member name="T:EAS.Data.DataService">
            <summary>
            数据门户服务。
            </summary>
        </member>
        <member name="P:EAS.Data.DataService.Context">
            <summary>
            上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Data.DataService.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.DataService.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.DataColumnPropertyDescriptor">
            <summary>
            DataColumnPropertyDescriptor 的摘要说明。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IDataChannel">
            <summary>
            数据通道契约，为分布式Orm/Linq提供基础支持，分布式Orm/Linq操作经由DataChannel操作。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.ExistsInDb2(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据实体是否在数据库存在。
            </summary>
            <param name="dataEntity">主键值。</param>
            <returns>指定键值的实体存在返回true,否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Read2(EAS.Data.ORM.IDataEntity)">
            <summary>
            读数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>从数据库读出的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Insert2(EAS.Data.ORM.IDataEntity)">
            <summary>
            插入数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Update2(EAS.Data.ORM.IDataEntity)">
            <summary>
            修改数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Save2(EAS.Data.ORM.IDataEntity)">
            <summary>
            保存数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Delete2(EAS.Data.ORM.IDataEntity)">
            <summary>
            删除数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Delete2(System.String,EAS.Data.ORM.Condition)">
            <summary>
            根据条件删除数据表中记录。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据过滤条件。</param> 
            <returns>删除的记录数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Update2(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <returns>更新操作所影响的数据行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Select2(System.String,EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            表查询。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IDataChannel.Count2(System.String,EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            计算表的记录总数。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="T:EAS.Data.MatrixDataAdapter">
            <summary>
            Matrix数据适当配器。
            </summary>
            <remarks>
            向Linq查询提供者提供基于矩阵数据源的数据填写。
            </remarks>
        </member>
        <member name="T:EAS.Data.DataAdapter">
            <summary>
            Linq查询结果填充适配器。
            </summary>
            <remarks>
            向Linq查询提供者提供数据填写操作。
            </remarks>
        </member>
        <member name="M:EAS.Data.DataAdapter.GetName(System.Int32)">
            <summary>
            获取指定列的名称。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>字段名称或空字符串。</returns>
        </member>
        <member name="M:EAS.Data.DataAdapter.IsDBNull(System.Int32)">
            <summary>
            当前行指定列是否为空。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>指定单元格的值为 Null，则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Data.DataAdapter.GetValue(System.Int32)">
            <summary>
            获取当前行指定单元列的值。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>指定单元格的值。</returns>
        </member>
        <member name="M:EAS.Data.DataAdapter.GetValue(System.Int32,System.Type)">
            <summary>
            获取当前行指定单元列的值。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <param name="conversionType">目标类型。</param>
            <returns>指定单元格的值。</returns>
        </member>
        <member name="M:EAS.Data.DataAdapter.Reset">
            <summary>
            将读写索引移动到数据源开始行。
            </summary>
        </member>
        <member name="M:EAS.Data.DataAdapter.Read">
            <summary>
            读写索引移动到下一行。
            </summary>
            <returns>如果成功地推进到适配器下一行，则为 true；如果越过适配器的结尾，则为 false。</returns>
        </member>
        <member name="M:EAS.Data.DataAdapter.MoveNext">
            <summary>
            读写索引移动到下一行。
            </summary>
            <returns>如果成功地推进到适配器下一行，则为 true；如果越过适配器的结尾，则为 false。</returns>
        </member>
        <member name="P:EAS.Data.DataAdapter.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.#ctor">
            <summary>
            初始化MatrixReader对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.#ctor(EAS.Data.Matrix)">
            <summary>
            初始化MatrixReader对象实例。
            </summary>
            <param name="matrix">Matrix对象实例。</param>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.GetName(System.Int32)">
            <summary>
            获取指定列的名称。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>字段名称或空字符串。</returns>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.IsDBNull(System.Int32)">
            <summary>
            当前行指定单元格是否为空。
            </summary>
            <param name="iColumn">从零开始的列索引。</param>
            <returns>指定单元格的值为 Null，则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.GetValue(System.Int32)">
            <summary>
            获取当前行指定单元格的值。
            </summary>
            <param name="iColumn">从零开始的列索引。</param>
            <returns>指定单元格的值。</returns>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.GetValue(System.Int32,System.Type)">
            <summary>
            获取当前行指定单元列的值。
            </summary>
            <param name="iColumn">从零开始的列索引。</param>
            <param name="conversionType">目标类型。</param>
            <returns>指定单元格的值。</returns>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.Reset">
            <summary>
            将读写索引移动到矩阵开始行。
            </summary>
        </member>
        <member name="M:EAS.Data.MatrixDataAdapter.MoveNext">
            <summary>
            移动到下一行。
            </summary>
            <returns>如果成功地推进矩阵下一行，则为 true；如果越过矩阵的结尾，则为 false。</returns>
        </member>
        <member name="P:EAS.Data.MatrixDataAdapter.Matrix">
            <summary>
            获取矩阵对象。
            </summary>
        </member>
        <member name="P:EAS.Data.MatrixDataAdapter.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.TypeHelper">
            <summary>
            类型相关的辅助方法。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.LinqExtensions">
            <summary>
            Linq扩展方法定义
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.DynamicSorting``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            动态排序。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="sortExpression"></param>
            <param name="sortDirection"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Update``1(EAS.Data.Linq.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            批量更新
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="predicate">查询条件表达式</param>
            <param name="updater">更新表达式</param>
            <returns>更新影响的行数</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.GetOperator(System.Linq.Expressions.Expression)">
            <summary>
            求运算符号。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.ParseUpdater(System.Linq.Expressions.Expression,EAS.Data.Access.ParameterCollection,EAS.Data.ORM.MappingMetaData)">
            <summary>
            解析更新表达式。
            </summary>
            <param name="expression"></param>
            <param name="pc"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Update``1(EAS.Data.Linq.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            批量更新
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="updater">更新表达式</param>
            <param name="predicate">查询条件表达式</param>
            <returns>更新影响的行数</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Delete``1(EAS.Data.Linq.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            批量删除
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="predicate">查询条件表达式。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Insert``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.DataEntity{``0})">
            <summary>
            向数据库插入数据实体。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Update``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.DataEntity{``0})">
            <summary>
            更新数据实体值到数据库。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Save``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.DataEntity{``0})">
            <summary>
            保存数据实体值到数据库。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Delete``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.DataEntity{``0})">
            <summary>
            从数据库中删除当前数据。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Read``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.DataEntity{``0})">
            <summary>
            从数据库读取/同步数据对象的值。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Refresh``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.DataEntity{``0})">
            <summary>
            从数据库读取/同步数据对象的值。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Select``1(EAS.Data.Linq.Query{``0})">
            <summary>
            查询实体记录。
            </summary>        
            <typeparam name="T">表类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Select``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.Condition)">
            <summary>
            根据条件查询实体记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="condition">数据查询条件。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Select``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件查询实体记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Select``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.Condition,System.Int32,System.Int32)">
            <summary>
            根据条件查询实体记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="condition">数据查询条件。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.Linq.LinqExtensions.Select``1(EAS.Data.Linq.Query{``0},EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            根据条件查询实体记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="queryable">数据实体查询对象。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="T:EAS.Data.Access.DbTransaction">
            <summary>
            数据事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbTransaction.Commit">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbTransaction.Rollback">
            <summary>
            回滚事务。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.DbTransaction.Completed">
            <summary>
            事务完成时触发。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.DbTransaction.Failed">
            <summary>
            事务失败时触发。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbTransaction.Dispose">
            <summary>
            释放事务，如果事务未提交，只直接回滚。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbTransaction.GetTransaction(System.Guid)">
            <summary>
            根据事务ID求出数据事务。
            </summary>
            <param name="transactionId">事务ID。</param>
            <returns>事务对象。</returns>
        </member>
        <member name="P:EAS.Data.Access.DbTransaction.TransactionId">
            <summary>
            事务ID。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.Entity">
            <summary>
            定义数据库记录的映射对象。
            </summary>
            <remarks>可以通过该类的继承类的对象表达一个数据库记录，并通过该对象对相应的数据库记录进行各种操作。</remarks>
            <summary>
            实体分部类，定义保护方法。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IEntity">
            <summary>
            实体对象接口。
            </summary>
            <remarks>
            从2005开始使用的ORM技术体系，采用Table-Entity的结构，目前不再提供新的扩展和支持。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Clone">
            <summary>
            复制 一个新的IEntity对象。
            </summary>
            <returns> Entity对象的复制。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.ExistsInDb">
            <summary>
            实在是否在数据库存在。
            </summary>
            <exception cref="T:System.InvalidOperationException">  DbConnection 为空引用、DbTableName 为空、还没有定义对象的属性、还没有定义对象的主键属性（更新时）、或者主键属性的值为空值。</exception>
            <remarks>从数据库中加载当前数据对象的值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Refresh">
            <summary>
            刷新当前数据对象。
            </summary>
            <remarks>从数据库中加载当前数据对象的值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Read">
            <summary>
            刷新当前数据对象。
            </summary>
            <remarks>从数据库中加载当前数据对象的值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Save">
            <summary>
            保存当前数据对象。
            </summary>
            <remarks>根据当前数据对象的值更新相应数据库记录的值。如果没有为对象添加任何属性，则不会产生任何效果。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Insert">
            <summary>
            插入当前数据对象。
            </summary>
            <remarks>根据当前数据对象的值向数据库插入一条数据库记录。如果没有为对象添加任何属性，则不会产生任何效果。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Update">
            <summary>
            更新当前数据对象。
            </summary>
            <remarks>根据当前数据对象的值更新相应数据库记录的值。如果没有为对象添加任何属性，则不会产生任何效果。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IEntity.Delete">
            <summary>
            从数据库中删除当前数据对象（对应的数据库记录）。
            </summary>
            <remarks>删除后仍然可以使用 Save 方法将对象再次保存到数据库。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.TableType">
            <summary>
            获取IEntity对象所属于的ITable对象的类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.Columns">
            <summary>
            获取IEntity对象的列集合，我们定义了表/行/列的数据表格模型，目前是以表行为结构进行整理的。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.Propertys">
            <summary>
            获取IEntity对象的属性集合，列集合（Columns）的同义词。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.PrimaryKeys">
            <summary>
            获取IEntity对象中的主键集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.Table">
            <summary>
            实体所在的表，实体对象可以是独立于表对象、也可依附于一个表对象这上。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.Tag">
            <summary>
            数据标记。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.IEntity.State">
            <summary>
            实体的状态，即对于数据源来说，指示实现数据是否要同步到数据库。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Entity.#ctor">
            <summary>
            初始化 Entity 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Entity.#ctor(EAS.Data.ORM.ITable)">
            <summary>
            使用Table对象初始化Entity类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Clone">
            <summary>
            复制一个新的Entity对象。
            </summary>
            <returns> IEntity对象的复制。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Entity.GetColumns">
            <summary>
            获取数据实体对象中的列集合（Column集合）。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Save">
            <summary>
            保存当前数据对象。
            </summary>
            <exception cref="T:System.InvalidOperationException"> DbConnection 为空引用、DbTableName 为空、还没有定义对象的属性、还没有定义对象的主键属性（更新时）、或者主键属性的值为空值。</exception>
            <remarks>根据当前数据对象的值更新相应数据库记录的值。如果没有为对象添加任何属性，则不会产生任何效果。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Insert">
            <summary>
            插入当前数据对象。
            </summary>
            <remarks>
            根据当前数据对象的值向数据库插入一条数据库记录。如果没有为对象添加任何属性，则不会产生任何效果。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Update">
            <summary>
            更新当前数据对象。
            </summary>
            <remarks>
            根据当前数据对象的值更新相应数据库记录的值。如果没有为对象添加任何属性，则不会产生任何效果。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Read">
            <summary>
            刷新当前数据对象。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Refresh">
            <summary>
            刷新当前数据对象。
            </summary>
            <remarks>从数据库中加载当前数据对象的值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.ExistsInDb">
            <summary>
            实在是否在数据库存在。
            </summary>
            <remarks>从数据库中加载当前数据对象的值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.CacheRefresh">
            <summary>
            缓存刷新，根据实体对象依附的表对象缓存刷新实体数据。
            </summary>
            <returns>缓存中是否存在实体数据。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Entity.Delete">
            <summary>
            从数据库中删除当前数据对象（对应的数据库记录）。
            </summary>
            <remarks>删除后仍然可以使用 Save 方法将对象再次保存到数据库。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="F:EAS.Data.ORM.Entity.table">
            <summary>
            受保护的内部数据变量，指示实体依附的表对象。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Entity.cacheAccessor">
            <summary>
            内部私有变量，缓存访问器。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Entity.AddProperty(System.String,System.String,System.Data.DbType)">
            <summary>
            为 Entity 添加一个新的属性。
            </summary>
            <param name="caption">属性的显示标题。如果该值为空引用或者空字符串，则使用 name 作为标题。</param>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>如果 Caption 为空引用或者空字符串，则使用 name 设置该值。属性的 Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.AddProperty(System.String,System.String,System.Data.DbType,System.Object)">
            <summary>
            为 Entity 添加一个新的属性。
            </summary>
            <param name="caption">属性的显示标题。如果该值为空引用或者空字符串，则使用 name 作为标题。</param>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <param name="defaultValue">属性的默认值。可以是空引用，在内部自动转换为 System.DBNull.Value。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>如果 Caption 为空引用或者空字符串，则使用 name 设置该值。属性的 Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.AddProperty(System.String,System.Data.DbType)">
            <summary>
            为 Entity 添加一个新的属性。
            </summary>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>属性的 Caption、Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.AddProperty(System.String,System.Data.DbType,System.Object)">
            <summary>
            为 Entity 添加一个新的属性。
            </summary>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <param name="defaultValue">属性的默认值。可以是空引用，在内部自动转换为 System.DBNull.Value。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>属性的 Caption、Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Entity.RemoveProperty(System.String)">
            <summary>
            从Entity中删除一个属性。
            </summary>
            <param name="name">要删除的属性名称。</param>
            <returns>成功被删除的属性。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Entity.RemoveProperty(System.Int32)">
            <summary>
            从Entity中删除一个属性。
            </summary>
            <param name="index">要删除属性索引。</param>
            <returns>成功被删除的属性。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Entity.RemoveProperty(EAS.Data.ORM.Property)">
            <summary>
            从Entity中删除一个属性。
            </summary>
            <param name="prop">要删除的属性。</param>
            <returns>成功被删除的属性。</returns>
        </member>
        <member name="P:EAS.Data.ORM.Entity.Table">
            <summary>
            实体所在的表，实体对象可以是独立于表对象、也可依附于一个表对象这上。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.State">
            <summary>
            对象状态。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.CacheAccessor">
            <summary>
            缓存访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.TableType">
            <summary>
            获取IEntity对象所属于的ITable对象的类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.DbTableName">
            <summary>
            获取数据表的名称。
            </summary>
            <remarks>该值可以是完全限定名称。名称比较不区分大小写。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Entity.Columns">
            <summary>
            获取 Entity 对象中的列集合（Column集合）。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.Propertys">
            <summary>
            获取 Entity 对象中的属性集合（Column同义词）。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.PrimaryKeys">
            <summary>
            获取实体对象的主键名称及其值的集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Entity.PrimaryKeyNames">
            <summary>
            获取或者设置和数据库表主键对应的 Entity 属性的名称（Name）。
            </summary>
            <exception cref="T:System.ArgumentException">当前对象的属性中不包含数组中包含的属性名称。</exception>
            <exception cref="T:System.ArgumentNullException">将主键属性设置为空引用，或者属性数组中包含空的属性名称。</exception>
            <exception cref="T:System.InvalidOperationException">还没有定义任何对象属性。</exception>
        </member>
        <member name="P:EAS.Data.ORM.Entity.Tag">
            <summary>
            数据标记。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ScopedDictionary`2">
            <summary>
            作用域词典。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:EAS.Data.Linq.DbQueryProvider">
            <summary>
            基于数据库的IQueryProvider实现。
            </summary>
            <remarks>
            依托于不同的QueryLanguage实现对不同数据库的访问支持。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.QueryProvider">
            <summary>
            抽象的LINQ查询提供者程序。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.IQueryText">
            <summary>
            IQueryText接口。 
            </summary>
            <remarks>
            实现GetQueryText处理。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.IQueryText.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            获取查询文本。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式对应的查询文本。</returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.#ctor">
            <summary>
            未实现。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            Converts the query expression into text that corresponds to the command that would be executed.
            Useful for debugging.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Execute the query expression (does translation, etc.)
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.GetExecutionPlan(System.Linq.Expressions.Expression)">
            <summary>
            Convert the query expression into an execution plan
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Do all query translations execpt building the execution plan
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether a given expression can be executed locally. 
            (It contains no parts that should be translated to the target System.Environment.)
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.Execute``1(EAS.Data.Linq.QueryCommand{``0},System.Object[])">
            <summary>
            Execute an actual query specified in the target language using the sADO connection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="paramValues"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.Project``1(EAS.Data.DataAdapter,System.Func{EAS.Data.DataAdapter,``0})">
            <summary>
            Converts a data reader into a sequence of objects using a projector function on each row
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="fnProject"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.ExecuteDeferred``1(EAS.Data.Linq.QueryCommand{``0},System.Object[])">
            <summary>
            Get an IEnumerable that will execute the specified query when enumerated
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="paramValues"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.GetCommand(System.String,System.Collections.Generic.IList{System.String},System.Object[])">
            <summary>
            Get an ADO command object initialized with the command-text and parameters
            </summary>
            <param name="commandText"></param>
            <param name="paramNames"></param>
            <param name="paramValues"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.DbQueryProvider.LogCommand(EAS.Data.Access.DbCommand)">
            <summary>
            Write a command to the log
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:EAS.Data.Linq.DbQueryProvider.Policy">
            <summary>
            查询策略。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.DbQueryProvider.Mapping">
            <summary>
            映射。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.DbQueryProvider.Language">
            <summary>
            查询语言。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.DbQueryProvider.Context">
            <summary>
            上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.DbQueryProvider.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.DbQueryProvider.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DbColumn">
            <summary>
            数据库列定义。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbColumn.ToString">
            <summary>
            转换为字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Access.DbColumn.Name">
            <summary>
            列名。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbColumn.DataType">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DbTableSchema">
            <summary>
            数据架构。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbTableSchema.#ctor">
            <summary>
            初始化DbTableScheme对象实例。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbTableSchema.TableName">
            <summary>
            表名。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbTableSchema.Columns">
            <summary>
            列集合。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DataAccessorExtensions">
            <summary>
            IDataAccessor(数据访问器扩展方法)。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DataAccessorExtensions.Query``1(EAS.Data.Access.IDataAccessor,System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <typeparam name="T">返回的实体类型。</typeparam>
            <param name="dataAccessor">数据访问器对象。</param>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集合。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessorExtensions.Query``1(EAS.Data.Access.IDataAccessor,System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <typeparam name="T">返回的实体类型。</typeparam>
            <param name="dataAccessor">数据访问器对象。</param>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集合。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessorExtensions.Query``1(EAS.Data.Access.IDataAccessor,EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <typeparam name="T">返回的实体类型。</typeparam>
            <param name="dataAccessor">数据访问器对象。</param>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集合。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessorExtensions.Query``1(EAS.Data.Access.IDataAccessor,System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <typeparam name="T">返回的实体类型。</typeparam>
            <param name="dataAccessor">数据访问器对象。</param>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集合。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandString 是空引用或者空字符串。</exception>
        </member>
        <member name="T:EAS.Data.ORM.EntityState">
            <summary>
            实现实体的状态(即数据库记录当前的状态)。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.EntityState.New">
            <summary>
             记录为新添加记录。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.EntityState.Ready">
            <summary>
            实现已加载数据。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.EntityState.Delete">
            <summary>
            当前记录已经删除。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ExpressionWriter">
            <summary>
            表达式书写器。
            </summary>
            <remarks>
            在C＃语法写出一个表达式树。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.UnusedColumnRemover">
            <summary>
            Removes column declarations in SelectExpression's that are not referenced
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.UnusedColumnRemover.VisitProjection(EAS.Data.Linq.ProjectionExpression)">
            <summary>
            丢失列。？
            </summary>
            <param name="projection"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.RedundantJoinRemover">
            <summary>
            Removes joins expressions that are identical to joins that already exist
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.QueryDuplicator">
            <summary>
            Duplicate the query expression by making a copy with new table aliases
            </summary>
        </member>
        <member name="T:EAS.InternalExpression.ExpressionException">
            <summary>
            表达式错误
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:EAS.Data.Access.ResultType">
            <summary>
            定义Accessor的Query方法的结果类型。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.Default">
            <summary>
            0x00，指示结果应当以默认的形式返回，用于返回一个单一结果（比如 select count(*) 返回的结果等），数据库空值（NULL）使用空引用返回。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.DataReader">
            <summary>
            0x01，指示结果应当以 System.Data.IDataReader 对象的形式返回，该对象提供只读的、向前的、直接的数据库访问。
            该结果可以用于访问一个数据库记录集。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.DataSet">
            <summary>
            0x02，指示结果应当以 System.Data.DataSet 对象的形式返回，该对象提供非连接的、缓存的数据库数据访问。
            该结果可以用于访问一个数据库记录集。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.DataTable">
            <summary>
            0x03，指示结果应当以 System.Data.DataTable 对象的形式返回，该对象提供非连接的、缓存的数据库数据访问。
            该结果可以用于访问一个数据库记录集。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.Dictionary">
            <summary>
            0x04，指示结果应当以 System.Collections.IDictionary对象的形式返回，该对象提供非连接的、缓存的数据库数据读取。
            该结果可以用于访问一个数据库记录。
            数据库空值（NULL）使用空引用返回，空结果集使用长度为0的集合返回。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.List">
            <summary>
            0x05，指示结果应当以 System.Collections.ArrayList 对象的形式返回，该对象提供非连接的、缓存的数据库数据读取。
            该结果可以用于访问一个表中革一列的所有数据库记录。集合中的每一个元素顺序地表示查询列表行的记录值。
            数据库空值（NULL）使用空引用返回，空结果集使用长度为0的集合返回。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.Matrix">
            <summary>
            0x06，指示结果应当以 EAS.Data.Matrix 对象的形式返回，该对象提供非连接的、缓存的数据库数据读取。
            该结果可以用于访问一个数据库记录集，其功能相似于DataTable、性能优于DataTable。
            </summary>
        </member>
        <member name="F:EAS.Data.Access.ResultType.SchemaOnly">
            <summary>
            0x07，指示结果仅返回查询结果的DataTable架构，以DbTableSchema对象的形式返回。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.ParameterCollection">
            <summary>
            数据库访问方法数据库命令参数。
            </summary>
            <remarks>集合中的元素为 EAS.Data.Access.Parameter 对象。</remarks>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.#ctor">
            <summary>
            初始化 ParameterCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.#ctor(System.Int32)">
            <summary>
            使用给定的初始容量初始化 ParameterCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.#ctor(System.Collections.Generic.IEnumerable{EAS.Data.Access.Parameter})">
            <summary>
            使用给定的参数集合初始化 ParameterCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Add(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            向集合中添加一个新的 EAS.Data.Access.Parameter 对象。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbType">参数数据类型。</param>
            <param name="size">参数大小。</param>
            <param name="value">参数值。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.Parameter 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Add(System.String,System.Data.DbType,System.Object)">
            <summary>
            向集合中添加一个新的 EAS.Data.Access.Parameter 对象。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbType">参数数据类型。</param>
            <param name="value">参数值。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.Parameter 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Add(System.String,System.Object)">
            <summary>
            向集合中添加一个新的 EAS.Data.Access.Parameter 对象。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="value">参数值。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.Parameter 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Contains(System.String)">
            <summary>
            判断参数集合中释放已经存在给定名称的参数对象。
            </summary>
            <param name="paramName">要判断的参数的参数名称。</param>
            <returns>如果集合中已经存在指定名称的参数，则返回true；否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.IndexOf(System.String)">
            <summary>
            获取给定名称的参数对象在集合中的索引位置。
            </summary>
            <param name="paramName">要确定的参数的参数名称。</param>
            <returns>如果集合中存在给定名称的参数对象，则返回该对象的索引位置；否则返回－1。</returns>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Insert(System.Int32,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            向集合中添加一个新的 EAS.Data.Access.Parameter 对象。
            </summary>
            <param name="index">在该位置插入 EAS.Data.Access.Parameter 对象。</param>
            <param name="paramName">参数名称。</param>
            <param name="dbType">参数数据类型。</param>
            <param name="size">参数大小。</param>
            <param name="value">参数值。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.Parameter 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Insert(System.Int32,System.String,System.Data.DbType,System.Object)">
            <summary>
            向集合中添加一个新的 EAS.Data.Access.Parameter 对象。
            </summary>
            <param name="index">在该位置插入 EAS.Data.Access.Parameter 对象。</param>
            <param name="paramName">参数名称。</param>
            <param name="dbType">参数数据类型。</param>
            <param name="value">参数值。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.Parameter 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Remove(System.String)">
            <summary>
            从集合中删除具有指定参数的第一个匹配项。
            </summary>
            <param name="paramName">要删除的参数的名称。</param>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.AddRange(EAS.Data.Access.ParameterCollection)">
            <summary>
            将 ParameterCollection 中的元素加到ParameterCollection的末尾。
            </summary>
            <param name="ps">要附加的ParameterCollection对象。</param>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Access.ParameterCollection.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.Access.ParameterCollection.Item(System.String)">
            <summary>
            获取给定名称的参数的参数值。
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">集合中不存在指定参数名称的参数。</exception>
            <remarks>参数值不会是空引用，如果数据库中的值为空值，则该属性返回System.DBNull.Value对象。</remarks>
        </member>
        <member name="T:EAS.Data.Access.OleDbProvider">
            <summary>
            OleDb数据库访问提供者，可以支持所有支撑OleDb的数据库。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.OleDbProvider.#ctor">
            <summary>
            初始化 OleDbProvider 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.OleDbProvider.#ctor(System.String)">
            <summary>
            使用给定的连接字符串初始化OleDbProvider的新实例。
            </summary>
            <param name="connectionString">数据库连接字符串。</param>
        </member>
        <member name="M:EAS.Data.Access.OleDbProvider.InternalFillDataSet(System.Data.DataSet,System.Data.IDbCommand)">
            <summary>
            填充数据集，把数据查询结果填充到某一数据集。
            </summary>
            <param name="ds">要填充的数据集。</param>
            <param name="cmd">执行填充的IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.OleDbProvider.ToIDbDataParameter(EAS.Data.Access.Parameter,System.Data.IDbCommand)">
            <summary>
            转换通用参数为数据库相关参数。
            </summary>
            <param name="parameter">通用参数。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="T:EAS.Data.Access.CommandLogDispatcher">
            <summary>
            数据命令日志分配器。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.ICommandDispatcher">
            <summary>
            命令调度接口。
            </summary>
            <remarks>
            定义一些方法，通过这些方法，可以在数据库访问器执行数据库查询之前对查询命令进行自定义检查或修改。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.ICommandDispatcher.BeforeQuery(EAS.Data.Access.DbCommand@)">
            <summary>
            在执行数据库查询之前处理数据库查询命令。
            </summary>
            <param name="command">数据查询命令对象。</param>
        </member>
        <member name="M:EAS.Data.Access.ICommandDispatcher.BeforeExecute(EAS.Data.Access.DbCommand@)">
            <summary>
            在执行数据库查询之前处理数据库查询命令。
            </summary>
            <param name="command">数据查询命令对象。</param>
        </member>
        <member name="M:EAS.Data.Access.CommandLogDispatcher.BeforeQuery(EAS.Data.Access.DbCommand@)">
            <summary>
            查询执行之前。
            </summary>
            <param name="command">查询命令对象。</param>
        </member>
        <member name="M:EAS.Data.Access.CommandLogDispatcher.BeforeExecute(EAS.Data.Access.DbCommand@)">
            <summary>
            修改执行之前。
            </summary>
            <param name="command">查询命令对象。</param>
        </member>
        <member name="T:EAS.Data.ORM.DbCommandMaker">
            <summary>
            内部类，数据库命令构造器。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateSelectCmd(EAS.Data.ORM.MappingMetaData,EAS.Data.ORM.IBaseDataEntity)">
            <summary>
            生成实体的选择语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="dataEntity">数据实体。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateInsertCmd(EAS.Data.ORM.MappingMetaData,EAS.Data.ORM.IBaseDataEntity)">
            <summary>
            生成实体的插入语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="dataEntity">数据实体。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateDeleteCmd(EAS.Data.ORM.MappingMetaData,EAS.Data.ORM.IBaseDataEntity)">
            <summary>
            生成实体的删除语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="dataEntity">数据实体。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateUpdateCmd(EAS.Data.ORM.MappingMetaData,EAS.Data.ORM.IBaseDataEntity)">
            <summary>
            生成实体的更新语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="dataEntity">数据实体。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.GetSelectColumns(EAS.Data.ORM.MappingMetaData,System.Collections.Generic.IList{System.String})">
            <summary>
            获取查询语句请求返回的列集合。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="propertys">属性集盒。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateSelectCmd(EAS.Data.ORM.MappingMetaData,EAS.Data.ORM.Condition,System.Collections.Generic.IList{EAS.Data.ORM.Column})">
            <summary>
            生成实体的选择语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="condition">条件记录。</param>
            <param name="columns">读取的列集合。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateUpdateCmd(EAS.Data.ORM.MappingMetaData,System.Collections.Generic.IDictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            生成实体的选择语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="colValues">键值集合。</param>
            <param name="condition">条件记录。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.CreateDeleteCmd(EAS.Data.ORM.MappingMetaData,EAS.Data.ORM.Condition)">
            <summary>
            生成实体的选择语句。
            </summary>
            <param name="metaData">元数据。</param>
            <param name="condition">条件记录。</param>
            <returns>命令对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DbCommandMaker.GetDbType(EAS.Data.ORM.Column)">
            <summary>
            获取指定属性的DbType
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DataORMTextDefine.GetName(System.String)">
            <summary>
            过滤[和]。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.ORM.Table">
            <summary>
            定义数据库实体的集合。
            </summary>
            <remarks>可以通过该类的继承类的对象表达一个数据库表、视图(一个查询结果)的多行记录。</remarks>
            <summary>
            数据表分部类，定义保护方法。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.ITable">
            <summary>
            定义数据表接口，该接口为对旬关系映射提供支持。
            </summary>
            <remarks>此按口定义了对象关系映射中有关于数据表的描述。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ITable.CreateCondition">
            <summary>
            创建数据查询条件。
            </summary>
            <returns>为表成功创建的一个条件对象。</returns>        
        </member>
        <member name="M:EAS.Data.ORM.ITable.CreateEntity">
            <summary>
            创建一条新记录，没有同步到数据库。
            </summary>
            <returns>为本成功成功创建的行实体对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.ITable.Delete">
            <summary>
            从数据库中删除数据表记录。
            </summary>
            <remarks>删除操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ITable.Delete(EAS.Data.ORM.Condition)">
            <summary>
            从数据库中删除数据表记录。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
            <remarks>删除操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ITable.Update(EAS.Data.ORM.ColumnCollection,EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="colValues">要更新的列及指定的值。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ITable.Update(System.Collections.Generic.IDictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="colValues">要更新的列及指定的值。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ITable.Query">
            <summary>
            查询，从数据库读取 Table 对象所对应数据库实体数据，刷新同步数据表对象源到数据库对象表。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ITable.Query(EAS.Data.ORM.Condition)">
            <summary>
            条件查询，从数据库读取 Table 对象所对应数据库实体数据。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
        </member>
        <member name="M:EAS.Data.ORM.ITable.CacheQuery">
            <summary>
            缓存查询，从当前数据表缓存查询实体数据。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ITable.CacheQuery(EAS.Data.ORM.Condition)">
            <summary>
            缓存查询，从当前数据表缓存查询指定条件的实体数据。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
        </member>
        <member name="M:EAS.Data.ORM.ITable.ClearCache">
            <summary>
            清除表缓存。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ITable.CacheRefresh(EAS.Data.ORM.IEntity)">
            <summary>
            使用本表缓存刷新指定的实体对象。
            </summary>
            <param name="entity">本表对应的实体对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.ITable.GetRangeTable(System.Int32,System.Int32)">
            <summary>
            根据索引及指定长度取得表中部分记录，组成一个新表。
            </summary>
            <param name="startIndex">索引开始位置。</param>
            <param name="length">需要取得的实体数。</param>
            <returns>结果实体组成的新表。</returns>
        </member>
        <member name="M:EAS.Data.ORM.ITable.ToList``1">
            <summary>
            转换为泛型实体集合。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <returns>泛型实体集合。</returns>
        </member>
        <member name="P:EAS.Data.ORM.ITable.Session">
            <summary>
            获取或者设置会话对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.EntityType">
            <summary>
            获取 ITable 对象拥有的 IEnrity 对象的类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.Columns">
            <summary>
            获取Table对象的列集合，我们定义了表/行/列的数据表格模型，目前是以表行为结构进行整理的。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.Rows">
            <summary>
            获取Table对象中的实体记录集（Entity集合），我们定义了表/行/列的数据表格模型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.PrimaryKeys">
            <summary>
            获取Table对象中的主键集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.DbTableName">
            <summary>
            获取数据对象存储的表的名称。
            </summary>
            <remarks>该值可以是完全限定名称。名称比较不区分大小写。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.ITable.Changed">
            <summary>
            获取一个值，指定数据表中的数据是否发生改变，如果发生改变，则会考虑数据是否同步到数据源中。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.ChangedCount">
            <summary>
            获取一个值，指示集合中已经修改过的 Entity 对象总数，即此数据表对象所包含的数据行数。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.Item(System.Int32)">
            <summary>
            获取表中指定行索引处的实体。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ITable.Tag">
            <summary>
            数据标记。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Table.#ctor">
            <summary>
            初始化 Table 实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Table.CreateCondition">
            <summary>
            创建数据查询条件。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Table.CreateEntity">
            <summary>
            创建一条新记录，没有同步到数据库。
            </summary>
            <returns>为本成功成功创建的行实体对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Table.Delete">
            <summary>
            从数据库中删除数据表记录。
            </summary>
            <remarks>删除操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.Delete(EAS.Data.ORM.Condition)">
            <summary>
            从数据库中删除数据表记录。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
            <remarks>删除操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.Update(EAS.Data.ORM.ColumnCollection,EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="colValues">要更新的列及指定的值。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.Update(System.Collections.Generic.IDictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="colValues">要更新的列及指定的值。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.CacheQuery">
            <summary>
            缓存查询，从当前数据表缓存查询实体数据。
            </summary>		
        </member>
        <member name="M:EAS.Data.ORM.Table.CacheQuery(EAS.Data.ORM.Condition)">
            <summary>
            缓存查询，从当前数据表缓存查询指定条件的实体数据。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
        </member>
        <member name="M:EAS.Data.ORM.Table.ClearCache">
            <summary>
            清除表缓存。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Table.CacheRefresh(EAS.Data.ORM.IEntity)">
            <summary>
            使用本表缓存刷新指定的实体对象。
            </summary>
            <param name="entity">本表对应的实体对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.Table.Query">
             <summary>
             查询，从数据库读取 Table 对象所对应数据库实体数据。
             </summary>
            <remarks> 取得数据库实体中的所有数据。 </remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.Query(EAS.Data.ORM.Condition)">
            <summary>
            条件查询，从数据库读取 Table 对象所对应数据库实体数据。
            </summary>
            <param name="condition">数据查询条件，为空引用则返回整个数据库实体（表、视图、表值存储过程）。</param>
        </member>
        <member name="M:EAS.Data.ORM.Table.GetRangeTable(System.Int32,System.Int32)">
            <summary>
            根据索引及指定长度取得表中部分记录，组成一个新表。
            </summary>
            <param name="startIndex">索引开始位置。</param>
            <param name="length">需要取得的实体数。</param>
            <returns>结果实体组成的新表。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Table.GetList">
            <summary>
            从不实现 IList 本身的对象返回可以绑定到数据源的 IList。
            </summary>
            <returns>对象中可以绑定到数据源的 IList。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Table.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.Table.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.ORM.Table.ToList``1">
            <summary>
            转换为泛型实体集合。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <returns>泛型实体集合。</returns>
        </member>
        <member name="F:EAS.Data.ORM.Table.ormAccessor">
            <summary>
            内部私有变量，ORM访问器。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.cacheAccessor">
            <summary>
            内部私有变量，缓存访问器。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.dataAccessor">
            <summary>
            内部私有变量，数据访问器。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.columns">
            <summary>
            受保护的内部私有成员变量，数据库实体表中的数据列。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.rows">
            <summary>
            受保护的内部私有成员变量，数据库实体表中的数据行。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.currentCondition">
            <summary>
            受保护的内部私有成员变量，系统当前的查询条件。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.currentCacheCondition">
            <summary>
            受保护的内部私有成员变量，系统当前的缓存查询条件。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Table.changeCount">
            <summary>
            受保护的内部私有成员变量，变更的数据记录（实体）个数。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Table.AddProperty(System.String,System.String,System.Data.DbType)">
            <summary>
            为 Table 添加一个新的属性。
            </summary>
            <param name="caption">属性的显示标题。如果该值为空引用或者空字符串，则使用 name 作为标题。</param>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>如果 Caption 为空引用或者空字符串，则使用 name 设置该值。属性的 Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.AddProperty(System.String,System.String,System.Data.DbType,System.Object)">
            <summary>
            为 Table 添加一个新的属性。
            </summary>
            <param name="caption">属性的显示标题。如果该值为空引用或者空字符串，则使用 name 作为标题。</param>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <param name="defaultValue">属性的默认值。可以是空引用，在内部自动转换为 System.DBNull.Value。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>如果 Caption 为空引用或者空字符串，则使用 name 设置该值。属性的 Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.AddProperty(System.String,System.Data.DbType)">
            <summary>
            为 Table 添加一个新的属性。
            </summary>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>属性的 Caption、Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.AddProperty(System.String,System.Data.DbType,System.Object)">
            <summary>
            为 Table 添加一个新的属性。
            </summary>
            <param name="name">属性名称。名称比较不区分大小写。</param>
            <param name="type">属性数据类型。</param>
            <param name="defaultValue">属性的默认值。可以是空引用，在内部自动转换为 System.DBNull.Value。</param>
            <returns>返回已经创建并且已经添加到对象属性列表中的属性对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的属性。</exception>
            <remarks>属性的 Caption、Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.Table.RemoveProperty(System.String)">
            <summary>
            移除一个属性。
            </summary>
            <param name="name">要移除的属性名称。</param>
            <returns>成功被移除的属性。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Table.RemoveProperty(System.Int32)">
            <summary>
            移除一个属性。
            </summary>
            <param name="index">要移除的属性索引。</param>
            <returns>成功被移除的属性。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Table.RemoveProperty(EAS.Data.ORM.Property)">
            <summary>
            移除一个属性。
            </summary>
            <param name="prop">要移除的属性。</param>
            <returns>成功被移除的属性。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Table.ConvertToEntity(System.Data.DataRow)">
            <summary>
            转换数据行为一个数据实体。
            </summary>
            <param name="dataRow">数据行。</param>
            <returns>成功转换的数据实体。</returns>
        </member>
        <member name="P:EAS.Data.ORM.Table.DbTableName">
            <summary>
            获取数据对象存储的表的名称。
            </summary>
            <remarks>该值可以是完全限定名称。名称比较不区分大小写。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.Table.Rows">
            <summary>
            获取 Table　对象中的实体记录集（Entity集合）。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.Columns">
            <summary>
            获取 Table　对象中的列集合（Column集合）。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.PrimaryKeys">
            <summary>
            获取表对象的主键名称及其值的集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.PrimaryKeyNames">
            <summary>
            获取或者设置和数据库表主键对应的 Entity 属性的名称（Name）。
            </summary>
            <exception cref="T:System.ArgumentException">当前对象的属性中不包含数组中包含的属性名称。</exception>
            <exception cref="T:System.ArgumentNullException">将主键属性设置为空引用，或者属性数组中包含空的属性名称。</exception>
            <exception cref="T:System.InvalidOperationException">还没有定义任何对象属性。</exception>
        </member>
        <member name="P:EAS.Data.ORM.Table.PropertyNames">
            <summary>
            获取所有属性的名称数组。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.EntityType">
            <summary>
            获取 Table 对象拥有的 Entity 对象的类型。
            </summary>        
        </member>
        <member name="P:EAS.Data.ORM.Table.Changed">
            <summary>
            获取一个值，指定集合中的数据是否发生改变。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.ChangedCount">
            <summary>
            获取一个值，指示集合中已经修改过的 Entity 对象总数。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.CurrentCondition">
            <summary>
            获取或设置当前的查询条件。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.CurrentCacheCondition">
            <summary>
            获取或设置当前的缓存查询条件。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.Item(System.Int32)">
            <summary>
            获取表中指定行索引处的实体。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.ContainsListCollection">
            <summary>
            获取表示集合是否是 IList 对象集合的值。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.Context">
            <summary>
            上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.Session">
            <summary>
            获取或者设置对象所依附的 ISession。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.CacheAccessor">
            <summary>
            缓存访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Table.Tag">
            <summary>
            数据标记。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.OrmEnvironment">
            <summary>
            ORM访问器环境。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.OrmEnvironment.context">
            <summary>
            受保护的内部私有成员变量，上下文对象。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.OrmEnvironment.session">
            <summary>
            受保护的内部私有成员变量，会话对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.OrmEnvironment.Context">
            <summary>
            上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.OrmEnvironment.Session">
            <summary>
            获取或者设置对象环境会话。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.OrmEnvironment.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IOrmAccessor">
            <summary>
            Orm访问器接口。	
            </summary>
            <remarks>
            数据对象的数据库存取均通过Orm访问器实现。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.ExistsInDb``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            数据实体是否在数据库存在。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dataEntity">主键值。</param>
            <returns>指定键值的实体存在返回true,否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Read``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            读数据实体。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <returns>从数据库读出的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Insert``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            插入数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Update``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            修改数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Delete``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            删除数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Delete``1">
            <summary>
            删除数据表中记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <remarks>删除的记录数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Delete``1(EAS.Data.ORM.Condition)">
            <summary>
            根据条件删除数据表中记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据过滤条件。</param> 
            <returns>删除的记录数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Update``1(System.Collections.Generic.Dictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
             <summary>
             根据条件更新数据库表中的指定列的值。
             </summary>
             <typeparam name="T">表类型。</typeparam>
             <param name="condition">数据查询条件，为空引用则更新全部表。</param>
             <param name="values">要更新的列及指定的值。</param>
            <returns>更新操作所影响的数据行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select``1">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select``1(EAS.Data.ORM.Condition)">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select``1(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select``1(EAS.Data.ORM.Condition,System.Int32,System.Int32)">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select``1(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Count``1">
            <summary>
            计算表的记录总数。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Count``1(EAS.Data.ORM.Condition)">
            <summary>
            计算表的记录总数。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Count``1(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            计算表的记录总数。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.ExistsInDb(EAS.Data.ORM.IEntity)">
            <summary>
            数据实体是否在数据库存在。
            </summary>
             <param name="entity">实体对象。</param>
            <returns>存在返回true,否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Query(EAS.Data.ORM.IEntity)">
            <summary>
            读数据实体。
            </summary>
            <param name="entity">实体对象。</param>
            <returns>结果实体对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Insert(EAS.Data.ORM.IEntity)">
            <summary>
            插入数据实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Update(EAS.Data.ORM.IEntity)">
            <summary>
            修改数据实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Delete(EAS.Data.ORM.IEntity)">
            <summary>
            删除数据实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select(EAS.Data.ORM.ITable)">
            <summary>
            表查询。
            </summary>
             <param name="table">表对象。</param>
             <returns>数据表。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Select(EAS.Data.ORM.ITable,EAS.Data.ORM.Condition)">
            <summary>
            表查询。
            </summary>
             <param name="table">表对象。</param>
            <param name="condition">数据查询条件。</param>
             <returns>数据表。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Delete(EAS.Data.ORM.ITable)">
            <summary>
            删除数据表中记录。
            </summary>
            <param name="table">数据表。</param> 
            <remarks>删除的记录数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Delete(EAS.Data.ORM.ITable,EAS.Data.ORM.Condition)">
            <summary>
            根据条件删除数据表中记录。
            </summary>
            <param name="table">数据表。</param>
            <param name="condition">数据过滤条件。</param> 
            <remarks>删除的记录数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Update(EAS.Data.ORM.ITable,EAS.Data.ORM.ColumnCollection,EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="table">数据表。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.IOrmAccessor.Update(EAS.Data.ORM.ITable,System.Collections.Generic.IDictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="table">数据表。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="P:EAS.Data.ORM.IOrmAccessor.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.RelationshipIncluder">
            <summary>
            Adds relationship to query results depending on policy
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.RedundantColumnRemover">
            <summary>
            Removes duplicate column declarations that refer to the same underlying column
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.CrossApplyRewriter">
            <summary>
            Attempts to rewrite cross-apply and outer-apply joins as inner and left-outer joins
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.AggregateChecker">
            <summary>
            聚合检查程序。
            </summary>
            <remarks>
            确定一个SelectExpression包含任何聚合表达式。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.DataEntityQuery`1">
            <summary>
            数据实体查询。
            </summary>
            <typeparam name="T">数据实体对象类型。</typeparam>
        </member>
        <member name="T:EAS.Data.Linq.Query`1">
            <summary>
            用于QueryProvider的默认IQueryable实现。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.#ctor">
            <summary>
            初始化Query对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            初始化Query对象实例。
            </summary>
            <param name="expression">表达式。</param>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.#ctor(EAS.Data.Access.IDataAccessor,EAS.Data.ORM.IOrmAccessor)">
            <summary>
            初始化Query对象实例。
            </summary>
            <param name="dataAccessor">数据访问器。</param>
            <param name="ormAccessor">ORM访问器。</param>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            初始化Query对象实例。
            </summary>
            <param name="provider">查询提供者。</param>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            初始化Query对象实例。
            </summary>
            <param name="provider">查询提供者。</param>
            <param name="expression">表达式。</param>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.Create">
            <summary>
            创建一个数据查询对象。
            </summary>
            <returns>数据查询对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.Create(System.Linq.Expressions.Expression)">
            <summary>
            创建一个数据查询对象。
            </summary>
            <param name="expression">表达式。</param>
            <returns>数据查询对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.Create(EAS.Data.Access.IDataAccessor,EAS.Data.ORM.IOrmAccessor)">
            <summary>
            创建一个数据查询对象。
            </summary>
            <param name="dataAccessor">数据访问器。</param>
            <param name="ormAccessor">ORM访问器。</param>
            <returns>数据查询对象。</returns>
        </member>
        <!-- 对于成员“M:EAS.Data.Linq.Query`1.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Data.Linq.Query`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>可用于循环访问集合的 IEnumerator。</returns>
        </member>
        <member name="M:EAS.Data.Linq.Query`1.ToString">
            <summary>
            返回 Query 的文本化表示形式。
            </summary>
            <returns>Query 的文本化表示形式。</returns>
        </member>
        <member name="P:EAS.Data.Linq.Query`1.System#Linq#IQueryable#Expression">
            <summary>
            获取与 System.Linq.IQueryable 的实例关联的表达式树。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.Query`1.System#Linq#IQueryable#ElementType">
            <summary>
            获取在执行与System.Linq.IQueryable的此实例关联的表达式树时返回的元素的类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.Query`1.System#Linq#IQueryable#Provider">
            <summary>
            获取与此数据源关联的查询提供程序。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.Query`1.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.Query`1.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.#ctor">
            <summary>
            初始化DataEntityQuery对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            初始化DataEntityQuery对象实例。
            </summary>
            <param name="expression">表达式。</param>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.#ctor(EAS.Data.Access.IDataAccessor,EAS.Data.ORM.IOrmAccessor)">
            <summary>
            初始化DataEntityQuery对象实例。
            </summary>
            <param name="dataAccessor">数据访问器。</param>
            <param name="ormAccessor">ORM访问器。</param>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            初始化DataEntityQuery对象实例。
            </summary>
            <param name="provider">查询提供者。</param>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            初始化Query对象实例。
            </summary>
            <param name="provider">查询提供者。</param>
            <param name="expression">表达式。</param>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.Create">
            <summary>
            创建一个数据查询对象。
            </summary>
            <returns>数据查询对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.Create(System.Linq.Expressions.Expression)">
            <summary>
            创建一个数据查询对象。
            </summary>
            <param name="expression">表达式。</param>
            <returns>数据查询对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.DataEntityQuery`1.Create(EAS.Data.Access.IDataAccessor,EAS.Data.ORM.IOrmAccessor)">
            <summary>
            创建一个数据查询对象。
            </summary>
            <param name="dataAccessor">数据访问器。</param>
            <param name="ormAccessor">ORM访问器。</param>
            <returns>数据查询对象。</returns>
        </member>
        <member name="T:EAS.Data.DataException">
            <summary>
            数据异常。
            </summary>
        </member>
        <member name="M:EAS.Data.DataException.#ctor">
            <summary>
            初始化 DataException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.DataException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 DataException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:EAS.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 DataException 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Data.DataException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 DataException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:EAS.Data.Access.OdbcProvider">
            <summary>
            Odbc数据库访问提供者，可以支持所有支撑Odbc的数据库。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.OdbcDbProvider">
            <summary>
            Odbc数据库访问提供者，可以支持所有支撑Odbc的数据库。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.OdbcDbProvider.#ctor">
            <summary>
            初始化 OdbcDbProvider 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.OdbcDbProvider.#ctor(System.String)">
            <summary>
            使用给定的连接字符串初始化OdbcDbProvider的新实例。
            </summary>
            <param name="connectionString">数据库连接字符串。</param>
        </member>
        <member name="M:EAS.Data.Access.OdbcDbProvider.InternalFillDataSet(System.Data.DataSet,System.Data.IDbCommand)">
            <summary>
            填充数据集，把数据查询结果填充到某一数据集。
            </summary>
            <param name="ds">要填充的数据集。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.OdbcDbProvider.ToIDbDataParameter(EAS.Data.Access.Parameter,System.Data.IDbCommand)">
            <summary>
            转换通用参数为数据库相关参数。
            </summary>
            <param name="parameter">通用参数。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.OdbcProvider.#ctor">
            <summary>
            初始化 OdbcProvider 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.OdbcProvider.#ctor(System.String)">
            <summary>
            使用给定的连接字符串初始化OdbcDbProvider的新实例。
            </summary>
            <param name="connectionString">数据库连接字符串。</param>
        </member>
        <member name="T:EAS.Data.ORM.SocketBusDataNotifier">
            <summary>
            基于Socket的数据修改通告。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IDataNotifier">
            <summary>
            数据变更通告接口。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.IDataNotifier.OnInsert(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据插入通告。
            </summary>
            <param name="dataEntity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IDataNotifier.OnUpdate(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据修改通告。
            </summary>
            <param name="dataEntity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IDataNotifier.OnBatchUpdate(System.Type)">
            <summary>
            数据批量更新通告。
            </summary>
            <param name="T">实体类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.IDataNotifier.OnDelete(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据删除通告。
            </summary>
            <param name="dataEntity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.IDataNotifier.OnBatchDelete(System.Type,EAS.Data.ORM.Condition)">
            <summary>
            数据批量删除通告。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">条件。</param>
        </member>
        <member name="F:EAS.Data.ORM.SocketBusDataNotifier.InsertTopic">
            <summary>
            插入数据主题。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.SocketBusDataNotifier.UpdateTopic">
            <summary>
            更新数据主题。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.SocketBusDataNotifier.DeleteTopic">
            <summary>
            删除数据主题。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.SocketBusDataNotifier.BatchUpdateTopic">
            <summary>
            批量更新数据主题。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.SocketBusDataNotifier.BatchDeleteTopic">
             <summary>
            批量删除数据主题。
             </summary>
        </member>
        <member name="M:EAS.Data.ORM.SocketBusDataNotifier.OnInsert(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据插入通告。
            </summary>
            <typeparam name="T">实体。</typeparam>
            <param name="dataEntity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.SocketBusDataNotifier.OnUpdate(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据修改通高。
            </summary>
            <typeparam name="T">实体。</typeparam>
            <param name="dataEntity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.SocketBusDataNotifier.OnDelete(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据删除通告。
            </summary>
            <typeparam name="T">实体。</typeparam>
            <param name="dataEntity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.SocketBusDataNotifier.OnBatchUpdate(System.Type)">
            <summary>
            数据批量更新通告。
            </summary>
            <param name="T">实体类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.SocketBusDataNotifier.OnBatchDelete(System.Type,EAS.Data.ORM.Condition)">
            <summary>
            数据批量删除通告。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">条件。</param>
        </member>
        <member name="P:EAS.Data.ORM.SocketBusDataNotifier.MessageBus">
            <summary>
            消息总线。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.ChildEntity">
            <summary>
            子实体定义。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ChildEntity.#ctor">
            <summary>
            初始化ChildEntity对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ChildEntity.#ctor(EAS.Data.ORM.ChildEntityAttribute)">
            <summary>
            初始化ChildEntity对象实例。
            </summary>
            <param name="childEntity">ChildEntityAttribute对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.ChildEntity.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            初始化ChildEntity对象实例。
            </summary>
            <param name="parentKey">父实体主键。</param>
            <param name="caption">标题。</param>
            <param name="childType">子实体类型。</param>
            <param name="childProperty">子实体属性。</param>
        </member>
        <member name="M:EAS.Data.ORM.ChildEntity.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntity.ParentKey">
            <summary>
            父实体属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntity.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntity.ChildType">
            <summary>
            子实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntity.ChildProperty">
            <summary>
            子实体属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ChildEntity.Property">
            <summary>
            属性对象。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.PredicateExtensions">
            <summary>
            Linq表达式扩展。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.PredicateExtensions.Create``1">
            <summary>
            创建一个条件表达式。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>表达式对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.PredicateExtensions.True``1">
            <summary>
            创建一个条件表达式，值为true。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>表达式对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.PredicateExtensions.False``1">
            <summary>
            创建一个条件表达式，值为false。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>表达式对象。</returns>
        </member>
        <member name="M:EAS.Data.Linq.PredicateExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            动态OR表达式。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">扩展表达式。</param>
            <param name="expression2">动态表达式。</param>
            <returns>结构表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.PredicateExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            动态AND表达式。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">扩展表达式。</param>
            <param name="expression2">动态表达式。</param>
            <returns>结构表达式。</returns>
        </member>
        <member name="T:EAS.Data.Linq.SelectGatherer">
            <summary>
            returns the list of SelectExpressions accessible from the source expression
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.CacheKey">
            <summary>
            缓存对象(项目)定义。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheKey.#ctor">
            <summary>
            初始化CacheKey实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheKey.#ctor(System.Type)">
            <summary>
            初始化CacheKey实例。
            </summary>
            <param name="dataType">实体类型。</param>
        </member>
        <member name="F:EAS.Data.Caching.CacheKey.Empty">
            <summary>
            空值对象。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheKey.Equals(System.Object)">
            <summary>
            确定指定的 CacheKey 是否等于当前的 CacheKey。
            </summary>
            <param name="obj">与当前的 CacheKey 进行比较的 CacheKey。</param>
            <returns>如果指定的 CacheKey 等于当前的 CacheKey，则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheKey.GetHashCode">
            <summary>
            求CacheKey的Hash码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.DataSet">
            <summary>
            账套。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.TData">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.UpdateProperty">
            <summary>
            更新属性。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.LastTime">
            <summary>
            最后成功更新时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.TryTime">
            <summary>
            最后更新动作时间。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.UpdateCycle">
            <summary>
            更新周期。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.Loaded">
            <summary>
            缓存是否成功加载。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.Complete">
            <summary>
            更新缓存完成之后事件。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.Working">
            <summary>
            是事正在工作。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.MergeMethod">
            <summary>
            合并方法。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheKey.UpdateMethod">
            <summary>
            检索方法。
            </summary>
        </member>
        <member name="T:EAS.Data.RdlXamlRoot">
            <summary>
            Silverlight/Rdl报表的通信对象。
            </summary>
        </member>
        <member name="M:EAS.Data.RdlXamlRoot.#ctor">
            <summary>
            初始化XamlRoot实例。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.InstanceId">
            <summary>
            实例ID。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.Name">
            <summary>
            报名名称。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.PageCount">
            <summary>
            总页数。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.PageWidth">
            <summary>
            页宽。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.PageHeight">
            <summary>
            页高。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.Pages">
            <summary>
            Xaml代码集合。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.TData">
            <summary>
            实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.Condition">
            <summary>
            查询条件。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.Skip">
            <summary>
            跳过M记录。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.Count">
            <summary>
            取N条记录。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.TService">
            <summary>
            实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.RdlXamlRoot.Method">
            <summary>
            方法名称。
            </summary>
        </member>
        <member name="T:EAS.Transactions.TransactionAttribute">
             <summary>
            事务切面属性。
             </summary>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.#ctor">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
            <param name="scopeOption">范围选项。</param>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.#ctor(System.Transactions.IsolationLevel)">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
            <param name="isolationLevel">事务级别。</param>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.#ctor(System.Transactions.IsolationLevel,System.Int32)">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
            <param name="isolationLevel">事务级别。</param>
            <param name="timeout">事务超时。</param>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel)">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
            <param name="scopeOption">范围选项。</param>
            <param name="isolationLevel">事务级别。</param>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel,System.Int32)">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
            <param name="scopeOption">范围选项。</param>
            <param name="isolationLevel">事务级别。</param>
            <param name="timeout">事务超时。</param>
        </member>
        <member name="M:EAS.Transactions.TransactionAttribute.GetAspect">
            <summary>
            获取对应的方面(切面)接口。
            </summary>
            <returns>返回企业事务切面处理对象。</returns>
        </member>
        <member name="P:EAS.Transactions.TransactionAttribute.ScopeOption">
            <summary>
            事务范围选项。
            </summary>
        </member>
        <member name="P:EAS.Transactions.TransactionAttribute.IsolationLevel">
            <summary>
            事务级别。
            </summary>
        </member>
        <member name="P:EAS.Transactions.TransactionAttribute.Timeout">
            <summary>
            事务超时。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.Element">
            <summary>
            Condition 类的数据元素，即表示数据处理条件组合中的单体条件。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Element.#ctor(EAS.Data.ORM.MappingMetaData)">
            <summary>
            利用 Table 对象初始化 Element 类实例。
            </summary>
            <param name="table">Table 对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.Element.#ctor(EAS.Data.ORM.MappingMetaData,System.String,System.Object,EAS.Data.ORM.ElementType,System.Boolean)">
            <summary>
            初始化 Element 类实例。
            </summary>
            <param name="table">Table 对象。</param>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="type">条件元素类型。</param>
            <param name="filed">条件表达式（值）是否为数据库指段。</param>
            <exception cref="T:System.ArgumentNullException">条件元素名称为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">条件元素名称为空字符串。</exception>
            <exception cref="T:System.ArgumentNullException">条件元素表达式为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">实体对象不包含名称“name”的列。</exception>
        </member>
        <member name="M:EAS.Data.ORM.Element.#ctor(EAS.Data.ORM.MappingMetaData,System.String,System.Object,EAS.Data.ORM.ElementType)">
            <summary>
            初始化 Table 类实例。
            </summary>
            <param name="table">Table 对象。</param>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="type">条件元素类型。</param>		
        </member>
        <member name="M:EAS.Data.ORM.Element.#ctor(EAS.Data.ORM.MappingMetaData,System.String,System.Object,System.Boolean)">
            <summary>
            初始化 Element 类实例。
            </summary>
            <param name="table">Entity 对象。</param>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="filed">条件表达式（值）是否为数据库指段。</param>
        </member>
        <member name="M:EAS.Data.ORM.Element.#ctor(EAS.Data.ORM.MappingMetaData,System.String,System.Object)">
            <summary>
            初始化 Table 类实例。
            </summary>
            <param name="table">Table 对象。</param>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>		
        </member>
        <member name="M:EAS.Data.ORM.Element.op_LogicalNot(EAS.Data.ORM.Element)">
            <summary>
            !运算符重载，对条件求反运行。
            </summary>
            <param name="element">条件元素。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.Element.AnalyzeField">
             <summary>
            分析构造条件表达式，分析数据库字断条件表达式。
             </summary>
             <returns>构造好的条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Element.AnalyzeValue">
             <summary>
            分析构造条件表达式，分析值条件表达式。
             </summary>
             <returns>构造好的条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Element.AnalyzeValue2">
             <summary>
            分析常量表达式。
             </summary>
        </member>
        <member name="M:EAS.Data.ORM.Element.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.ORM.Element.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.ORM.Element.MetaData">
            <summary>
            元数据对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Element.FieldName">
            <summary>
            获取或设置一个值，批示条件表达式的名称（列名称）。
            </summary>
            <exception cref="T:System.ArgumentNullException">条件元素名称为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">条件元素名称为空字符串。</exception>
            <exception cref="T:System.ArgumentNullException">实体对象不包含名称“name”的列。</exception>
        </member>
        <member name="P:EAS.Data.ORM.Element.LeftExpression">
            <summary>
            左表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Element.Expression">
            <summary>
            获取或设置一个值，指示条件表达式的值。
            </summary>
            <exception cref="T:System.ArgumentNullException">条件元素表达式为空引用。</exception>
        </member>
        <member name="P:EAS.Data.ORM.Element.LeftField">
            <summary>
            左表达式是否为字段。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Element.Field">
            <summary>
            获取或设置一个值，指示条件表达式的值还是数据库字段。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Element.Condition">
            <summary>
            获取一个值，批示条件元素分析后的条件字符串。
            </summary>
            <exception cref="T:System.ArgumentNullException">条件元素名称为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">条件元素名称为空字符串。</exception>
            <exception cref="T:System.ArgumentNullException">条件元素表达式为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">实体对象不包含名称“name”的列。</exception>
        </member>
        <member name="P:EAS.Data.ORM.Element.Parameters">
            <summary>
            获取一个值，指示数据构造过程的所用到条件参数集合。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.OrmAccessor">
            <summary>
            系统默认提供的ORM访问器。
            </summary>
            <summary>
            ORM访问器。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.#ctor">
            <summary>
            初始化OrmAccessor对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.ExistsInDb(EAS.Data.ORM.IEntity)">
            <summary>
            数据实体是否在数据库存在。
            </summary>
             <param name="entity">实体对象。</param>
            <returns>存在返回true,否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Query(EAS.Data.ORM.IEntity)">
            <summary>
            读数据实体。
            </summary>
            <param name="dataEntity">实体类型。</param>
            <returns>查询结果实体。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Save(EAS.Data.ORM.IEntity)">
            <summary>
            保存数据实体。
            </summary>
            <param name="entity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Insert(EAS.Data.ORM.IEntity)">
            <summary>
            插入数据实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Update(EAS.Data.ORM.IEntity)">
            <summary>
            修改数据实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Delete(EAS.Data.ORM.IEntity)">
            <summary>
            删除数据实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select(EAS.Data.ORM.ITable)">
            <summary>
            表查询。
            </summary>
             <param name="table">表对象。</param>
             <returns>数据表。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select(EAS.Data.ORM.ITable,EAS.Data.ORM.Condition)">
            <summary>
            表查询。
            </summary>
             <param name="table">表对象。</param>
            <param name="condition">数据查询条件。</param>
             <returns>数据表。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Delete(EAS.Data.ORM.ITable)">
            <summary>
            删除数据表中记录。
            </summary>
            <param name="table">数据表。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Delete(EAS.Data.ORM.ITable,EAS.Data.ORM.Condition)">
            <summary>
            根据条件删除数据表中记录。
            </summary>
            <param name="table">数据表。</param>
            <param name="condition">数据过滤条件。</param> 
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Update(EAS.Data.ORM.ITable,EAS.Data.ORM.ColumnCollection,EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="table">数据表。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Update(EAS.Data.ORM.ITable,System.Collections.Generic.IDictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="table">数据表。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <remarks>更新操作所影响的数据行数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.ExistsInDb``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            数据实体是否在数据库存在。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dataEntity">主键值。</param>
            <returns>指定键值的实体存在返回true,否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Read``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            读数据实体。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <returns>从数据库读出的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Insert``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            插入数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Update``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            修改数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Delete``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            删除数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Delete``1">
            <summary>
            删除数据表中记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <remarks>删除的记录数。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Delete``1(EAS.Data.ORM.Condition)">
            <summary>
            根据条件删除数据表中记录。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据过滤条件。</param> 
            <returns>删除的记录数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Update``1(System.Collections.Generic.Dictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <returns>更新操作所影响的数据行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select``1">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select``1(EAS.Data.ORM.Condition)">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select``1(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select``1(EAS.Data.ORM.Condition,System.Int32,System.Int32)">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Select``1(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            表查询。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Count``1">
            <summary>
            计算表的记录总数。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Count``1(EAS.Data.ORM.Condition)">
            <summary>
            计算表的记录总数。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.Count``1(EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            计算表的记录总数。
            </summary>
            <typeparam name="T">表类型。</typeparam>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalCount2(System.Type,EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            计算记录总数。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalExistsInDb2(EAS.Data.ORM.IDataEntity)">
            <summary>
            数据实体是否在数据库存在。
            </summary>
            <param name="dataEntity">主键值。</param>
            <returns>指定键值的实体存在返回true,否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalRead2(EAS.Data.ORM.IDataEntity)">
            <summary>
            读数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <returns>从数据库读出的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalInsert2(EAS.Data.ORM.IDataEntity)">
            <summary>
            插入数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalUpdate2(EAS.Data.ORM.IDataEntity)">
            <summary>
            修改数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalSave2(EAS.Data.ORM.IDataEntity)">
            <summary>
            保存数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalDelete2(EAS.Data.ORM.IDataEntity)">
            <summary>
            删除数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalDelete2(System.Type,EAS.Data.ORM.Condition)">
            <summary>
            根据条件删除数据表中记录。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据过滤条件。</param> 
            <returns>删除的记录数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalUpdate2(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},EAS.Data.ORM.Condition)">
            <summary>
            根据条件更新数据库表中的指定列的值。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据查询条件，为空引用则更新全部表。</param>
            <param name="colValues">要更新的列及指定的值。</param>
            <returns>更新操作所影响的数据行数。</returns>
        </member>
        <member name="M:EAS.Data.ORM.OrmAccessor.InternalSelect2(System.Type,EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            表查询。
            </summary>
            <param name="T">实体类型。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="P:EAS.Data.ORM.OrmAccessor.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.OrmAccessor.DataNotifier">
            <summary>
            数据变更通知。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.CacheAccessor">
            <summary>
            系统默认提供的缓存访问器。
            </summary>
            <remarks>
            本访问器支持基于DataTable存储的缓存。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.CacheAccessor.CacheRefresh(EAS.Data.ORM.IEntity)">
            <summary>
            缓存刷新实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.CacheAccessor.CacheQuery(EAS.Data.ORM.ITable)">
            <summary>
            表缓存查询。
            </summary>
            <param name="table">表。</param>
        </member>
        <member name="M:EAS.Data.ORM.CacheAccessor.CacheQuery(EAS.Data.ORM.ITable,EAS.Data.ORM.Condition)">
            <summary>
            表缓存查询。
            </summary>
            <param name="table">表。</param>
            <param name="condition">数据查询条件。</param>
        </member>
        <member name="M:EAS.Data.ORM.CacheAccessor.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.CacheAccessor.ResourceID">
            <summary>
            获取当前资源的标识ID。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.TSqlFormatter">
            <summary>
            TSQL language 语法分析器。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.TSqlFormatter.VisitColumn(EAS.Data.Linq.ColumnExpression)">
            <summary>
            此处处理列映射 by 魏琼东。
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionType">
            <summary>
            Db扩展表达式节点类型。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Table">
            <summary>
            Table表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.ClientJoin">
            <summary>
            连接表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Column">
            <summary>
            列表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Select">
            <summary>
            选择表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Projection">
            <summary>
            投影表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Join">
            <summary>
            连接表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Aggregate">
            <summary>
            聚合表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Scalar">
            <summary>
            标量表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Exists">
            <summary>
            存在表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.In">
            <summary>
            In表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Grouping">
            <summary>
            分组表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.AggregateSubquery">
            <summary>
            聚合子查询表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.IsNull">
            <summary>
            IsNull表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.Between">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.RowCount">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.NamedValue">
            <summary>
            命名值表达式。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.DbExpressionType.OuterJoined">
            <summary>
            外连接表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionTypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpression">
            <summary>
            DbExpression表达式扩展。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.DbExpression.#ctor(EAS.Data.Linq.DbExpressionType,System.Type)">
            <summary>
            初始化DbExpression对象实例。
            </summary>
            <param name="eType"></param>
            <param name="type"></param>
        </member>
        <member name="M:EAS.Data.Linq.DbExpression.ToString">
            <summary>
            转换为字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.AliasedExpression">
            <summary>
            别名表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AliasedExpression.Alias">
            <summary>
            表别名。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.TableExpression">
            <summary>
            TableExpression。
            </summary>
            <remarks>
            表达一个SQL查询表/关于的表达式。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.TableExpression.#ctor(EAS.Data.Linq.TableAlias,System.String)">
            <summary>
            初始化TableExpression对象实例。
            </summary>
            <param name="alias"></param>
            <param name="name"></param>
        </member>
        <member name="M:EAS.Data.Linq.TableExpression.ToString">
            <summary>
            转换为字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Linq.TableExpression.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ColumnExpression">
            <summary>
            列表达式。
            </summary>
            <remarks>
            表式一个查询的列。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.ColumnExpression.#ctor(System.Type,EAS.Data.Linq.TableAlias,System.String)">
            <summary>
            初始化ColumnExpression对象实例。
            </summary>
            <param name="type"></param>
            <param name="alias"></param>
            <param name="name"></param>
        </member>
        <member name="M:EAS.Data.Linq.ColumnExpression.ToString">
            <summary>
            转换为字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ColumnExpression.GetHashCode">
            <summary>
            获取HashCode。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ColumnExpression.Equals(System.Object)">
            <summary>
            判断是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ColumnExpression.Equals(EAS.Data.Linq.ColumnExpression)">
            <summary>
            判断两列表达式是否相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Linq.ColumnExpression.Alias">
            <summary>
            表别名。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ColumnExpression.Name">
            <summary>
            列名。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.TableAlias">
            <summary>
            表别名。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.TableAlias.#ctor">
            <summary>
            初始化TableAlias实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.TableAlias.ToString">
            <summary>
            转换为字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.ColumnDeclaration">
            <summary>
            列声明。
            </summary>
            <remarks>
            声明一个SQL SELECT 表达式的列。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.ColumnDeclaration.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            初始化ColumnDeclaration对象实例。
            </summary>
            <param name="name"></param>
            <param name="expression"></param>
        </member>
        <member name="P:EAS.Data.Linq.ColumnDeclaration.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ColumnDeclaration.Expression">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.OrderType">
            <summary>
            排序类型。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.OrderType.Ascending">
            <summary>
            升序。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.OrderType.Descending">
            <summary>
            降序。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.OrderExpression">
            <summary>
            排序表达式。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.OrderExpression.#ctor(EAS.Data.Linq.OrderType,System.Linq.Expressions.Expression)">
            <summary>
            初始化OrderExpression对象实例。
            </summary>
            <param name="orderType"></param>
            <param name="expression"></param>
        </member>
        <member name="P:EAS.Data.Linq.OrderExpression.OrderType">
            <summary>
            排序类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.OrderExpression.Expression">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.SelectExpression">
            <summary>
            SQL SELECT 表大式。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.SelectExpression.#ctor(EAS.Data.Linq.TableAlias,System.Collections.Generic.IEnumerable{EAS.Data.Linq.ColumnDeclaration},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{EAS.Data.Linq.OrderExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Boolean,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            初始化SelectExpression表达式。
            </summary>
            <param name="alias">别名。</param>
            <param name="columns">列声音集合。</param>
            <param name="from">from表达式。</param>
            <param name="where">where表达式。</param>
            <param name="orderBy">orderBy表达式。</param>
            <param name="groupBy">groupBy表达式。</param>
            <param name="isDistinct">是否Distinct。</param>
            <param name="skip">skip表达式。</param>
            <param name="take">take表达式。</param>
        </member>
        <member name="M:EAS.Data.Linq.SelectExpression.#ctor(EAS.Data.Linq.TableAlias,System.Collections.Generic.IEnumerable{EAS.Data.Linq.ColumnDeclaration},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{EAS.Data.Linq.OrderExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            初始化SelectExpression表达式。
            </summary>
            <param name="alias">别名。</param>
            <param name="columns">列声音集合。</param>
            <param name="from">from表达式。</param>
            <param name="where">where表达式。</param>
            <param name="orderBy">orderBy表达式。</param>
            <param name="groupBy">groupBy表达式。</param>
        </member>
        <member name="M:EAS.Data.Linq.SelectExpression.#ctor(EAS.Data.Linq.TableAlias,System.Collections.Generic.IEnumerable{EAS.Data.Linq.ColumnDeclaration},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            初始化SelectExpression表达式。
            </summary>
            <param name="alias">别名。</param>
            <param name="columns">列声音集合。</param>
            <param name="from">from表达式。</param>
            <param name="where">where表达式。</param>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.Columns">
            <summary>
            列定义清单。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.From">
            <summary>
            From表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.Where">
            <summary>
            Where表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.OrderBy">
            <summary>
            OrderBy表达式清单。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.GroupBy">
            <summary>
            GroupBy表达式清单。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.IsDistinct">
            <summary>
            Distinct？
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.Skip">
            <summary>
            Skip表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.Take">
            <summary>
            Take表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SelectExpression.QueryText">
            <summary>
            获取表达式查询文本。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.JoinType">
            <summary>
            SQL连接类型。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.JoinType.CrossJoin">
            <summary>
            交叉连接，笛卡尔集、
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.JoinType.InnerJoin">
            <summary>
            内连接。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.JoinType.CrossApply">
            <summary>
            交叉联接表值函数。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.JoinType.OuterApply">
            <summary>
            外连接表值函数。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.JoinType.LeftOuter">
            <summary>
            右连接。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.JoinExpression">
            <summary>
            连接表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.JoinExpression.Join">
            <summary>
            连接类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.JoinExpression.Left">
            <summary>
            左表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.JoinExpression.Right">
            <summary>
            右表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.JoinExpression.Condition">
            <summary>
            连接条件表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.OuterJoinedExpression">
            <summary>
            外连接表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.OuterJoinedExpression.Expression">
            <summary>
            表大式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.SubqueryExpression">
            <summary>
            字查询表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.SubqueryExpression.Select">
            <summary>
            Select表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ScalarExpression">
            <summary>
            标量表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ExistsExpression">
            <summary>
            Exists表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.InExpression">
            <summary>
            In表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.InExpression.Expression">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.InExpression.Values">
            <summary>
            值域。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.AggregateType">
            <summary>
            聚合类型。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.AggregateType.Count">
            <summary>
            统计总数。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.AggregateType.Min">
            <summary>
            求最小值。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.AggregateType.Max">
            <summary>
            求最大值。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.AggregateType.Sum">
            <summary>
            求江总。
            </summary>
        </member>
        <member name="F:EAS.Data.Linq.AggregateType.Average">
            <summary>
            求平均。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.AggregateExpression">
            <summary>
            聚合表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AggregateExpression.AggregateType">
            <summary>
            聚合类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AggregateExpression.Argument">
            <summary>
            参数。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AggregateExpression.IsDistinct">
            <summary>
            Distinct？
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.AggregateSubqueryExpression">
            <summary>
            聚合子查询表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AggregateSubqueryExpression.GroupByAlias">
            <summary>
            GroupBy表名名。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AggregateSubqueryExpression.AggregateInGroupSelect">
            <summary>
            聚合In/Select表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.AggregateSubqueryExpression.AggregateAsSubquery">
            <summary>
            聚合As子表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.IsNullExpression">
            <summary>
            IsNull表达式。
            </summary>
            <remarks>
            允许对值类型，如int和float是空的测试。
            </remarks>
        </member>
        <member name="P:EAS.Data.Linq.IsNullExpression.Expression">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.BetweenExpression">
            <summary>
            Between表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.BetweenExpression.Expression">
            <summary>
            表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.BetweenExpression.Lower">
            <summary>
            值下限。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.BetweenExpression.Upper">
            <summary>
            值上限。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.BetweenExpression.Skip">
            <summary>
            是否为计算Skip/Top准备。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.RowNumberExpression">
            <summary>
            RowNumber 表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.RowNumberExpression.OrderBy">
            <summary>
            排序条件。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.NamedValueExpression">
            <summary>
            命名表达式/Key-Value表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.NamedValueExpression.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.NamedValueExpression.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.NamedValueExpression.Completed">
            <summary>
            已处理?。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ProjectionExpression">
            <summary>
            投影表达式。
            </summary>
            <remarks>
            建立在一个或多个Select查询结果上的表达式。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.ProjectionExpression.ToString">
            <summary>
            转换为字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Linq.ProjectionExpression.Source">
            <summary>
            选择源。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ProjectionExpression.Projector">
            <summary>
            投影。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ProjectionExpression.Aggregator">
            <summary>
            聚合。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ProjectionExpression.IsSingleton">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ProjectionExpression.QueryText">
            <summary>
            SQL查询文本。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ClientJoinExpression">
            <summary>
            ClientJoin表达式。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ClientJoinExpression.OuterKey">
            <summary>
            外键。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ClientJoinExpression.InnerKey">
            <summary>
            内键。
            </summary>
        </member>
        <member name="P:EAS.Data.Linq.ClientJoinExpression.Projection">
            <summary>
            投影表达式。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionExtensions">
            <summary>
            DbExpression扩展。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DbResult">
            <summary>
            定义中间件的数据库查询结果，此命令用于完成数据库查询或数据库更改操作，命令中包含sql极相关参数。
            查询结果不支持在线的数据查询，只支持离线的数据查询结果。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbResult.#ctor">
            <summary>
            初始化 DbCommand 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbResult.#ctor(System.Object)">
            <summary>
            使用数据库查询返回结果初始化 DbResult 对象实例。
            </summary>
            <param name="value">数据库查询的返回结果。</param>		
        </member>
        <member name="M:EAS.Data.Access.DbResult.#ctor(EAS.Data.Access.ResultType,System.Object)">
            <summary>
            使用数据库查询返回结果类型、结果数据初始化 DbResult 对象实例。
            </summary>
            <param name="resultType">数据库查询返回结果类型。</param>
            <param name="value">数据库查询的返回结果。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResult.ConvertToDataSet">
            <summary>
            转换数据查询结果为DataSet。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.DbResult.ToDataTable">
            <summary>
            转换数据查询结果为DataTable。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.DbResult.ToList">
            <summary>
            转换数据查询结果为ArrayList。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.DbResult.ToIDictionary">
            <summary>
            转换数据查询结果为IDictionary。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.DbResult.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResult.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.Access.DbResult.Value">
            <summary>
            获取或设置数据查询的返回结果。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbResult.ResultType">
            <summary>
            获取或设置数据访问命令的数据返回类型。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DataAccessor">
            <summary>
            通用的数据库访问器，其依赖于数据库访问提供者IProvider对象。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.#ctor">
            <summary>
            初始化DataAccessor 实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Execute(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令类型。</param>
            <param name="parameters">要执行的命令的参数集合。</param>
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Query(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Execute(System.String)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <returns>返回命令影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Execute(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">要执行的命令的参数集合。</param>
            <returns>返回命令影响的行数。</returns>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Execute(System.String,System.Data.CommandType)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令类型。</param>
            <returns>返回命令影响的行数。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Execute(EAS.Data.Access.DbCommand)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装。</param>		
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Query(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Query(System.String,EAS.Data.Access.ResultType)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="resultType">调用方要求的返回结果的类型。</param>
            <returns>返回查询到的数据结果。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Query(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询到的数据结果。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Query(System.String,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型。</param>
            <returns>返回查询到的数据结果。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Query(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.BachExecute(EAS.Data.Access.DbCommandCollection)">
            <summary>
            执行指定的非查询命令（批处理指令）。
            </summary>
            <param name="commands">要执行的数据库访问命令集合。该命令集合必须是有效的数据库访问参数的封装。</param>		
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commands 是空引用或空集合。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.BackQuery(EAS.Data.Access.DbCommandCollection)">
            <summary>
            执行给定的数据库查询命令（批查询指令）。
            </summary>
            <param name="commands">要执行的数据库访问命令集合。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果集合。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commands 是空引用或者命令字符串空。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.TransactionExecute(EAS.Data.Access.TransactionHandler)">
            <summary>
            在事务环境中执行给定的 EAS.Data.Access.TransactionHandler，该EAS.Data.Access.TransactionHandler中包括了要在事务中执行的所有数据库操作。
            </summary>
            <param name="handler">要执行的 EAS.Data.Access.TransactionHandler 对象。</param>
            <returns>返回受影响的行数，该值为 EAS.Data.Access.TransactionHandler 返回的结果，默认返回 0。</returns>
            <exception cref="T:System.ArgumentNullException">handler 为空引用。</exception>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>        
        </member>
        <!-- 对于成员“M:EAS.Data.Access.DataAccessor.TransactionExecute(System.Action{EAS.Data.Access.IDataAccessor})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:EAS.Data.Access.DataAccessor.DelegateQuery(System.Action{System.Data.IDataReader},System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Data.Access.DataAccessor.TransactionExecute(EAS.Data.Access.TransactionHandler2,System.Object[])">
            <summary>
            在事务环境中执行给定的 EAS.Data.Access.TransactionHandler，该EAS.Data.Access.TransactionHandler中包括了要在事务中执行的所有数据库操作。
            </summary>
            <param name="handler">要执行的 EAS.Data.Access.TransactionHandler 对象。</param>
            <param name="parameters">调用参数。</param>
            <returns>返回受影响的行数，该值为 EAS.Data.Access.TransactionHandler 返回的结果，默认返回 0。</returns>
            <exception cref="T:System.ArgumentNullException">handler 为空引用。</exception>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.DelegateQuery(EAS.Data.Access.DataReaderHandler,System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            委托查询。当调用方需要返回DataReader时，如果使用Query，则必须自行打开环境和关闭环境以及DataReader的关闭。
            </summary>
            <param name="handler">需要由DelegateQuery方法代为调用的EAS.Data.Access.DataReaderHandler委托对象。handler中的方法可以关闭DataReader对象，也可以不关闭DataReader对象。</param>
            <param name="commandText">要执行的查询命令文本。</param>
            <param name="commandType">查询命令类型。</param>
            <param name="parameters">命令参数。</param>
            <exception cref="T:System.ArgumentNullException">handler 为空引用。</exception>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.DelegateQuery(EAS.Data.Access.DataReaderHandler,System.String)">
            <summary>
            委托查询。当调用方需要返回DataReader时，如果使用Query，则必须自行打开环境和关闭环境以及DataReader的关闭。
            调用方可以将处理DataReader结果的代码包装在DataReaderHandler委托中，由DelegateQuery方法代表调用方调用数据处理程序，并在DelegateQuery的内部管理数据访问环境和DataReader的生存周期。
            </summary>
            <param name="handler">需要由DelegateQuery方法代为调用的EAS.Data.Access.DataReaderHandler委托对象。handler中的方法可以关闭DataReader对象，也可以不关闭DataReader对象。</param>
            <param name="commandText">要执行的查询命令文本。</param>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryScalar(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果的第一行第一列。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryScalar(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果的第一行第一列。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryScalar(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果的第一行第一列。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryScalar(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果的第一行第一列。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataReader(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataReader(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataReader(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataReader(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>查询结果的 System.Data.IDataReader对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataSet(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataSet(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataSet(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataSet(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataTable(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataTable(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataTable(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDataTable(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回查询结果集的第一个DataTable。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDictionary(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一行的Key-Value。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDictionary(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一行的Key-Value。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDictionary(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一行的Key-Value。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryDictionary(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一行的Key-Value。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryList(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一列的值。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryList(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一列的值。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryList(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一列的值。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryList(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一列的值。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryMatrix(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果Matrix。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryMatrix(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果Matrix。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryMatrix(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果Matrix。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QueryMatrix(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果Matrix。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QuerySchema(System.String)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QuerySchema(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QuerySchema(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="commandText">要执行的命令语句，可能是select语句，也可能是存储过程名称。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">commandText 是空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.QuerySchema(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回第一个查询结果的ER架构定义。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.EAS#Data#Access#IDataAccessor#GetQueryLanguage">
            <summary>
            获取相关的查询语言。
            </summary>
            <returns>查询语言类型。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.ChangedDbProvider(EAS.Data.Access.IDbProvider)">
            <summary>
            改变DbProvider。
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.Dispose">
            <summary>
            释放事务资源。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.CreateTransaction">
            <summary>
            在当前操作环境中启动一个事务，显式的支持简单的事务调用。 
            </summary>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            在当前操作环境中启动一个事务，显式的支持简单的事务调用。 
            </summary>
            <param name="il">事务隔离级别。</param>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.Access.DataAccessor.GetHashCode">
            <summary>
            已重写，获取哈希码。
            </summary>
            <returns>哈希码。</returns>
        </member>
        <member name="P:EAS.Data.Access.DataAccessor.DbProvider">
            <summary>
            与访问器相关联的数据库访问提供者。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DataAccessor.MultiTenant">
            <summary>
            多租户上下文切换对象。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DataAccessor.Language">
            <summary>
            查询语言/用于Linq解析。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DataAccessor.DbProviderPool.DbProvider">
            <summary>
            数据库提供者程序。
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.TCacheKey`1">
            <summary>
            CacheKey的泛型定义。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
        </member>
        <member name="M:EAS.Data.Caching.TCacheKey`1.#ctor">
            <summary>
            初始化CacheKey。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.TCacheKey`1.Merge(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            合并函数。
            </summary>
            <param name="source">本地源。</param>
            <param name="update">更新数据。</param>
            <returns>合并数据源。</returns>
        </member>
        <member name="M:EAS.Data.Caching.TCacheKey`1.Update(System.Collections.Generic.List{`0},System.DateTime)">
            <summary>
            检索更新数据。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.TCacheKey`1.CompareFunc">
            <summary>
            实体比对函数，应用于缓存合并。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.TCacheKey`1.DateTimeFunc">
            <summary>
            时间比对函数，应用于二级缓存查询。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.OrderElement">
            <summary>
            数据查询的排序无素，即表示数据处理中的单体排序。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.OrderElement.#ctor(EAS.Data.ORM.MappingMetaData)">
            <summary>
            利用 Table 对象初始化 OrderElement 类实例。
            </summary>
            <param name="table"> TableMetaData 对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.OrderElement.#ctor(EAS.Data.ORM.MappingMetaData,System.String,System.Boolean)">
            <summary>
            初始化 Order 类实例。
            </summary>
            <param name="table">Table 对象。</param>
            <param name="name">列名称。</param>
            <param name="isDesc">是否为降序排序。</param>
            <exception cref="T:System.ArgumentNullException">排序元素名称为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">排序元素名称为空字符串。</exception>
            <exception cref="T:System.ArgumentNullException">实体对象不包含名称“name”的列。</exception>
        </member>
        <member name="M:EAS.Data.ORM.OrderElement.#ctor(EAS.Data.ORM.MappingMetaData,System.String)">
            <summary>
            初始化 Order 类实例。
            </summary>
            <param name="table">Table 对象。</param>
            <param name="name">列名称。</param>
        </member>
        <member name="P:EAS.Data.ORM.OrderElement.MetaData">
            <summary>
            元数据对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.OrderElement.FieldName">
            <summary>
            获取或设置一个值，批示排序列的名称（列名称）。
            </summary>
            <exception cref="T:System.ArgumentNullException">排序元素名称为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">排序元素名称为空字符串。</exception>
            <exception cref="T:System.ArgumentNullException">排序对象不包含名称“name”的列。</exception>
        </member>
        <member name="P:EAS.Data.ORM.OrderElement.IsDescend">
            <summary>
            获取或设置一个值，指示排序是否以升序序列。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.OrderElement.Expression">
            <summary>
            获取一个值，批示条件元素分析后的条件字符串。
            </summary>
            <exception cref="T:System.ArgumentNullException">排序元素名称为空引用。</exception>
            <exception cref="T:System.ArgumentNullException">排序元素名称为空字符串。</exception>
            <exception cref="T:System.ArgumentNullException">排序对象不包含名称“name”的列。</exception>
        </member>
        <member name="T:EAS.Data.ORM.MappingMetaData">
            <summary>
            映射元数据定义。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_Db2Name">
            <summary>
            列名==》属性名。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_Name2Db">
            <summary>
            属性名==》列名。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_Db2Property">
            <summary>
            列名==>属性。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_KeyValues">
            <summary>
            列名==>列。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_SNValues">
            <summary>
            序号==>列。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.n_RowVersionColumn">
            <summary>
            行版本列。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_PrimaryKeys">
            <summary>
            主键。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_PrimaryKeys2">
            <summary>
            主键2。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_SerializeColumns">
            <summary>
            序列化列集合。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.MappingMetaData.m_SerializeFileds">
            <summary>
            序列化字段集合。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.#ctor">
            <summary>
            初始化MappingMetaData对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.#ctor(System.String)">
            <summary>
            使用表名初始化MappingMetaData对象实例。
            </summary>
            <param name="dbTableName">表名。</param>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.Create``1">
            <summary>
            创建元数据映射。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>元数据映射定义。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.Create2``1">
            <summary>
            创建元数据映射/强制使用非模式。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns>元数据映射定义。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.Create(System.Type)">
            <summary>
            创建元数据映射。
            </summary>
            <param name="type">实体类型。</param>
            <returns>元数据映射定义。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.Create2(System.Type)">
            <summary>
            创建元数据映射/强制使用非模式。
            </summary>
            <param name="type">实体类型。</param>
            <returns>元数据映射定义。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetPrimaryKeys">
            <summary>
            取主键定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetPrimaryKeys2">
            <summary>
            取主键定义，包括RowVersionColumn。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetPrimaryKeyNames">
            <summary>
            取得主键名称列表。
            </summary>
            <returns>主键名称字符串。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetPrimaryKeyNames(EAS.Data.ORM.MappingMetaData)">
            <summary>
            取得主键名称列表。
            </summary>
            <param name="metaData">映射元数据。</param>
            <returns>主键名称字符串。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetColumnName(System.String)">
            <summary>
            根据属性名称获取列名。
            </summary>
            <param name="propertyName">属性名。</param>
            <returns>列名称。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetColumn(System.Int32)">
            <summary>
            根据列序号获取列定义。
            </summary>
            <param name="sequenceNo">列序号。</param>
            <returns>列对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetColumn(System.String)">
            <summary>
            根据列名获取列定义。
            </summary>
            <param name="columnName">列名。</param>
            <returns>列对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.MappingMetaData.GetProperty(System.String)">
            <summary>
            根据列名获取属性定义。
            </summary>
            <param name="columnName">列名。</param>
            <returns>属性定义。</returns>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.SelectCommand">
            <summary>
            实体读取命令。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.InsertCommand">
            <summary>
            实体插入命令。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.UpdateCommand">
            <summary>
            实体更新命令。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DeleteCommand">
            <summary>
            实体删除命令。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DynamicCreateEntity">
            <summary>
            创建实体代理。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DynamicSerialize">
            <summary>
            动态序列化。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DynamicDeserialize">
            <summary>
            动态反序列化。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DynamicSerializeEx">
            <summary>
            动态序列化。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DynamicDeserializeEx">
            <summary>
            动态反序列化。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.DbTableName">
            <summary>
            数据库表名。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.RowVersionColumn">
            <summary>
            行版本列。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.Index">
            <summary>
            是否索引模式。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.IgnoreConcurrency">
            <summary>
            忽略一致性错误。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.TData">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.Columns">
            <summary>
            数据列定义。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.RefEntities">
            <summary>
            引用实体集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.ChildEntities">
            <summary>
            子实体集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.SerializeColumns">
            <summary>
            序列化列集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.SerializeFileds">
            <summary>
            序列化字段集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.ColumnHashCode">
            <summary>
            列定义Hash码。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.MappingMetaData.SerializeHashCode">
            <summary>
            列定义Hash码。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.Condition">
            <summary>
            为ORM提供条件机制，即为ORM 实体/表的查询，更改操作提供条件参数。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.Condition.Empty">
            <summary>
            一个空的条件元素。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Condition.#ctor">
            <summary>
            利用条件元素初始化 Condition 类实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.Condition.#ctor(EAS.Data.ORM.MappingMetaData)">
            <summary>
            使用数据表接口实例初始化 Condition 类实例。
            </summary>
            <param name="table">数据表接口实例。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.#ctor(EAS.Data.ORM.Element)">
            <summary>
            利用条件元素初始化 Condition 类实例。
            </summary>
            <param name="element">条件元素</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.op_BitwiseAnd(EAS.Data.ORM.Condition,EAS.Data.ORM.Condition)">
            <summary>
            AND 运算符重载，两个条件以AND方式组合。
            </summary>
            <param name="condition1">条件表达式1。</param>
            <param name="condition2">条件表达式2。</param>
            <returns>合并后的条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Condition.op_BitwiseOr(EAS.Data.ORM.Condition,EAS.Data.ORM.Condition)">
            <summary>
            OR 运算符重载，两个条件以OR方式组合。
            </summary>
            <param name="condition1">条件表达式1。</param>
            <param name="condition2">条件表达式2。</param>
            <returns>合并后的条件表达式。</returns>
        </member>
        <member name="M:EAS.Data.ORM.Condition.op_LogicalNot(EAS.Data.ORM.Condition)">
            <summary>
            !运算符重载，对条件求反运行。
            </summary>
            <param name="condition">条件元素。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>		
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="CombineType">条件元素（Element）对象之间的组合关系，即与 Condition 对象的组合。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="CombineType">条件元素（Element）对象之间的组合关系，即与 Condition 对象的组合。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,EAS.Data.ORM.ElementType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="type">条件元素类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,System.Boolean,EAS.Data.ORM.ElementType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="field">是否字段。</param>
            <param name="type">条件元素类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,EAS.Data.ORM.ElementType,EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="type">条件元素类型。</param>
            <param name="CombineType">条件元素（Element）对象之间的组合关系，即与 Condition 对象的组合。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,System.Boolean,EAS.Data.ORM.ElementType,EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="field">是否字段。</param>
            <param name="type">条件元素类型。</param>
            <param name="CombineType">条件元素（Element）对象之间的组合关系，即与 Condition 对象的组合。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,System.Boolean)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="field">条件表达式（值）是否为数据库指段。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(System.String,System.Object,System.Boolean,EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="expression">条件表达式（值）</param>
            <param name="field">条件表达式（值）是否为数据库指段。</param>
            <param name="CombineType">条件元素（Element）对象之间的组合关系，即与 Condition 对象的组合。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(EAS.Data.ORM.Element)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="element">条件元素（Element）对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddElement(EAS.Data.ORM.Element,EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件元素（Element）对象。
            </summary>
            <param name="element">条件元素（Element）对象。</param>
            <param name="CombineType">条件元素（Element）对象之间的组合关系，即与 Condition 对象的组合。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddOrderElement">
            <summary>
            向 Condition 对象添加一个排序元素（OrderElement）对象。
            </summary>		
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddOrderElement(System.String)">
            <summary>
            向 Condition 对象添加一个排序元素（OrderElement）对象。
            </summary>
            <param name="name">列名称。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddOrderElement(System.String,System.Boolean)">
            <summary>
            向 Condition 对象添加一个排序元素（OrderElement）对象。
            </summary>
            <param name="name">列名称。</param>
            <param name="isDesc">是否为降序排序。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddOrderElement(EAS.Data.ORM.OrderElement)">
            <summary>
            向 Condition 对象添加一个排序元素（OrderElement）对象。
            </summary>
            <param name="orderElement">排序元素（OrderElement）对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddCondition(EAS.Data.ORM.Condition)">
            <summary>
            向 Condition 对象添加一个条件（Condition）对象，复杂条件的组合。
            </summary>
            <param name="condition">条件元素（Condition）对象。</param>		
        </member>
        <member name="M:EAS.Data.ORM.Condition.AddCondition(EAS.Data.ORM.Condition,EAS.Data.ORM.ElementCombineType)">
            <summary>
            向 Condition 对象添加一个条件（Condition）对象，复杂条件的组合。
            </summary>
            <param name="condition">条件元素（Condition）对象。</param>
            <param name="CombineType">条件（Condition）对象之间的组合关系。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.GetFullExpression">
            <summary>
            取得条件的完成表达式，即标识的条件字典串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.Condition.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.ORM.Condition.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.ORM.Condition.MetaData">
            <summary>
            元数据对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Condition.ConditioExpression">
            <summary>
            获取一个值，指示Condition 对象的条件字符串。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Condition.Parameters">
            <summary>
            获取一个值，指示数据构造过程的所用到条件参数集合。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Condition.FullExpression">
            <summary>
            获取一个值，指示 Condition 对象的完成达式。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.Condition.OrderExpression">
            <summary>
            获取一个值，指示Condition 对象的排序字符串。
            </summary>
        </member>
        <!-- 对于成员“T:EAS.Data.Linq.Grouping`2”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:EAS.Data.Linq.SkipRewriter”忽略有格式错误的 XML 注释 -->
        <member name="T:EAS.Data.Linq.ExecutionBuilder">
            <summary>
            执行生成器。
            </summary>
            <remarks>
            生成、编译一个表达式的查询执行计划。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.ExecutionBuilder.Build(EAS.Data.Linq.QueryPolicy,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            构建一个查询生成器。
            </summary>
            <param name="policy"></param>
            <param name="expression"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExecutionBuilder.ExecuteProjection(EAS.Data.Linq.ProjectionExpression,System.Boolean)">
            <summary>
            构造查询表达式/结果转换实现的实现在这里面。
            </summary>
            <param name="projection"></param>
            <param name="okayToDefer"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.ExecutionBuilder.OuterParameterizer">
            <summary>
            columns referencing the outer alias are turned into special named-value parameters
            </summary>
        </member>
        <member name="T:EAS.Data.DbDataAdapter">
            <summary>
            Matrix数据适当配器。
            </summary>
            <remarks>
            向Linq查询提供者提供基于IDataReader数据源的数据填写。
            </remarks>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.#ctor">
            <summary>
            初始化DbDataAdapter对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.#ctor(System.Data.IDataReader)">
            <summary>
            初始化DbDataAdapter对象实例。
            </summary>
            <param name="reader">IDataReader对象实例。</param>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.GetName(System.Int32)">
            <summary>
            获取指定列的名称。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>字段名称或空字符串。</returns>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.IsDBNull(System.Int32)">
            <summary>
            当前行指定列是否为空。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>指定单元格的值为 Null，则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.GetValue(System.Int32)">
            <summary>
            获取当前行指定单元列的值。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <returns>指定单元格的值。</returns>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.GetValue(System.Int32,System.Type)">
            <summary>
            获取当前行指定单元列的值。
            </summary>
            <param name="index">从零开始的列索引。</param>
            <param name="conversionType">目标类型。</param>
            <returns>指定单元格的值。</returns>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.Reset">
            <summary>
            将读写索引移动到数据源开始行。
            </summary>
        </member>
        <member name="M:EAS.Data.DbDataAdapter.MoveNext">
            <summary>
            移动到下一行。
            </summary>
            <returns>如果成功地推进到适配器下一行，则为 true；如果越过适配器的结尾，则为 false。</returns>
        </member>
        <member name="P:EAS.Data.DbDataAdapter.Reader">
            <summary>
            获取IDataReader对象。
            </summary>
        </member>
        <member name="P:EAS.Data.DbDataAdapter.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="T:EAS.Data.DataContext">
            <summary>
            数据实体上下文环境。
            </summary>
            <remarks>
            提供用于数据实体查询、更新、删除功能的上下文环境。
            </remarks>
        </member>
        <member name="F:EAS.Data.DataContext.m_dynamicData">
            <summary>
            OrmAccessor是否从容器中来。
            </summary>
        </member>
        <member name="F:EAS.Data.DataContext.m_dynamicOrm">
            <summary>
            DataAccessor是否从容器中来。
            </summary>
        </member>
        <member name="F:EAS.Data.DataContext.m_dynamicDb">
            <summary>
            DbProvider是否从容器中来。
            </summary>
        </member>
        <member name="F:EAS.Data.DataContext.m_Transaction">
            <summary>
            事务上下文。
            </summary>
        </member>
        <member name="M:EAS.Data.DataContext.#ctor">
            <summary>
            初始化DbContext对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.DataContext.#ctor(EAS.Data.Access.IDbProvider)">
            <summary>
            初始化DataEntityContext对象实例。
            </summary>
            <param name="dbProvider">数据库访问程序提供者。</param>
        </member>
        <member name="M:EAS.Data.DataContext.#ctor(EAS.Data.Access.IDataAccessor)">
            <summary>
            初始化DataEntityContext对象实例。
            </summary>
            <param name="dataAccessor">数据访问器。</param>
        </member>
        <member name="M:EAS.Data.DataContext.#ctor(EAS.Data.Access.IDataAccessor,EAS.Data.ORM.IOrmAccessor)">
            <summary>
            初始化DataEntityContext对象实例。
            </summary>
            <param name="dataAccessor">数据访问器。</param>
            <param name="ormAccessor">Orm访问器。</param>
        </member>
        <member name="M:EAS.Data.DataContext.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="M:EAS.Data.DataContext.CreateQuery``1">
            <summary>
            在创建数据实体查询。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.DataContext.CreateTransaction">
            <summary>
            在当前操作环境中启动一个事务，显式的支持简单的事务调用。 
            </summary>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.DataContext.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            在当前操作环境中启动一个事务，显式的支持简单的事务调用。 
            </summary>
            <param name="il">事务隔离级别。</param>
            <returns>事务对象，事务启动成功返回事务对象实例。</returns>
        </member>
        <member name="M:EAS.Data.DataContext.Dispose">
            <summary>
            释放数据资源。
            </summary>
        </member>
        <member name="P:EAS.Data.DataContext.DbProvider">
            <summary>
            获取数据库提供者程序。
            </summary>
        </member>
        <member name="P:EAS.Data.DataContext.DataAccessor">
            <summary>
            获取进行数据操作的数据访问对象。
            </summary>
        </member>
        <member name="P:EAS.Data.DataContext.OrmAccessor">
            <summary>
            数据访问器对象。
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.CacheService">
            <summary>
            数据缓存服务。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheService.GetData(System.String,EAS.Data.ORM.Condition,System.Int32)">
            <summary>
            获取数据更新，获取dataType对象updateProperty的值大于updateTime的数据集合。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="updateProperty">更新属性。</param>
            <param name="updateTime">更新时间。</param>
            <returns>发生更新的数据集合。</returns>
            <param name="sessionID">会话ID。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheService.GetData(System.String,System.String,System.DateTime,System.Guid)">
            <summary>
            检索数据，根据指定条件检索，不使用缓存。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="condition">检索条件。</param>
            <param name="count">记录数。</param>
            <returns>符合条件的数据。</returns>
        </member>
        <member name="T:EAS.Data.ORM.ElementType">
            <summary>
            Condition 类的数据元素(Element)类型枚举。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.EqualTo">
            <summary>
            “=”比较指定值与指定属性 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.GreaterThan">
            <summary>
            “>”比较指定值与指定属性 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.GreaterThanAndEqualTo">
            <summary>
            “>=”比较指定值与指定属性 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotEqualTo">
            <summary>
            “(不等于)”"比较指定值与指定属性 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.LessThan">
            <summary>
            “(小于)”比较指定值与指定属性 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.LessThanAndEqualTo">
            <summary>
            “ 小于等于 ”"比较指定值与指定属性 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.BetWeen">
            <summary>
            （BetWeen），介于两个介之间。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotBetWeen">
            <summary>
            （NotBetWeen），不介于两个介之间。 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.Match">
            <summary>
            指定子字符串与指定属匹配（模式匹配 %value%）
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.MatchPrefix">
            <summary>
            指定子字符串与指定属匹配（前缀匹配 value%） 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.MatchSuffix">
            <summary>
            指定子字符串与指定属匹配（后缀匹配 %value） 
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotMatch">
            <summary>
            指定子字符串与指定属不匹配 （%value%）。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotMatchPrefix">
            <summary>
            指定子字符串与指定属不匹配（前缀不匹配 value%）。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotMatchSuffix">
            <summary>
            指定子字符串与指定属不匹配（后缀不匹配 %value）。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.WordMatch">
            <summary>
            指定子字符串中的字匹配（字匹配 value__value）。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotWordMatch">
            <summary>
            指定子字符串中的字不匹配（字匹配 value__value）。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.In">
            <summary>
            与给定的列表list里的值匹配 。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.NotIn">
            <summary>
            与给定的列表list里的值不匹配 。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementType.SqlCondition">
            <summary>
            直接构造字符串，传入就是条件元素 。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.ElementCombineType">
            <summary>
            Condition 类的数据元素(Element)之间的组合方法。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementCombineType.And">
            <summary>
            And，两个 Element 对象之间是以 And 为组合条件。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.ElementCombineType.Or">
            <summary>
            Or，两个 Element 对象之间是以 Or 为组合条件。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.Property">
            <summary>
            实体属性，表示实体的某一个列定义及列值。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.ColumnCollection">
            <summary>
            定义数据表列集合。
            </summary>
            <remarks>
            可以通过该类表达一个数据库表、视图的列结构。
            </remarks>
        </member>
        <member name="F:EAS.Data.ORM.ColumnCollection.table">
            <summary>
            内部私有变量，指示列所属于的数据表。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.#ctor">
            <summary>
            初始化列集合新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.#ctor(EAS.Data.ORM.ITable)">
            <summary>
            使用ITable接口初始化列集合新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.#ctor(EAS.Data.ORM.ITable,System.Collections.Generic.IEnumerable{EAS.Data.ORM.Column})">
            <summary>
            使用ITable接口初始化列集合新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.#ctor(System.Int32)">
            <summary>
            使用集合的初始容量初始化列集合新实例。
            </summary>
            <param name="capacity">集合的初始容量。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.GetMaxSequenceNo">
            <summary>
            获取最大列序列号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.Add(EAS.Data.ORM.Column)">
            <summary>
            向集合中添加一个列。
            </summary>
            <param name="column">要添加的数据列。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.Remove(System.String)">
            <summary>
            删除集合中的一个数据列。
            </summary>
            <param name="name">要删除的数据列。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.ContainsColumn(System.String)">
            <summary>
            获取一个值，该值指示对象是否存在指定名称的列。
            </summary>
            <param name="name">要确定的列的名称。名称比较不区分大小写。</param>
            <returns>返回列是否存在的指示。</returns>
            <exception cref="T:System.ArgumentNullException">name为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.ContainsColumn2(System.String)">
            <summary>
            获取一个值，该值指示对象是否存在指定标题的列。
            </summary>
            <param name="caption">要确定的列的标题。标题比较不区分大小写。</param>
            <returns>返回列是否存在的指示。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.ColunmIndexOf(System.String)">
            <summary>
            获取指定名称的列在集合的索引位置。
            </summary>
            <param name="name">要确定位置的列的名称。名称比较不区分大小写。</param>
            <returns>返回属列在集合中的从 0 开始的索引位置，如果不存在相应的列，则返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.ColumnIndexOf2(System.String)">
            <summary>
            获取指定标题的列在列集合中的索引位置。
            </summary>
            <param name="caption">要确定位置的列的标题。名称比较不区分大小写。</param>
            <returns>返回列在列列表中的从 0 开始的索引位置，如果不存在相应的列，则返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.GetColumn(System.Int32)">
            <summary>
            获取指定索引位置处的列对象。
            </summary>
            <param name="index">列索引。</param>
            <returns>返回在对象列列表中指定位置处的列对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.GetColumn(System.String)">
            <summary>
            获取指定名称的列。
            </summary>
            <param name="name">列名称。名称比较不区分大小写。</param>
            <returns>返回具有指定名称的列对象。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.GetColumn2(System.String)">
            <summary>
            获取指定标题的列对象。
            </summary>
            <param name="caption">标题。比较不区分大小写。</param>
            <returns>返回具有指定标题的列对象。</returns>
            <exception cref="T:System.ArgumentNullException">caption 为空引用或者空字符串。</exception>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.AddColumn(System.String,System.String,System.Data.DbType)">
            <summary>
            添加一个新的列。
            </summary>
            <param name="caption">列的显示标题。如果该值为空引用或者空字符串，则使用 name 作为标题。</param>
            <param name="name">列名称。名称比较不区分大小写。</param>
            <param name="type">列数据类型。</param>
            <returns>返回已经创建并且已经添加到对象列列表中的列对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的列。</exception>
            <remarks>如果 Caption 为空引用或者空字符串，则使用 name 设置该值。列的 Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.AddColumn(System.String,System.String,System.Data.DbType,System.Object)">
            <summary>
            添加一个新的列。
            </summary>
            <param name="caption">列的显示标题。如果该值为空引用或者空字符串，则使用 name 作为标题。</param>
            <param name="name">列名称。名称比较不区分大小写。</param>
            <param name="type">列数据类型。</param>
            <param name="defaultValue">列的默认值。可以是空引用，在内部自动转换为 System.DBNull.Value。</param>
            <returns>返回已经创建并且已经添加到对象列列表中的列对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的列。</exception>
            <remarks>如果 Caption 为空引用或者空字符串，则使用 name 设置该值。列的 Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.AddColumn(System.String,System.Data.DbType)">
            <summary>
            添加一个新的列。
            </summary>
            <param name="name">列名称。名称比较不区分大小写。</param>
            <param name="type">列数据类型。</param>
            <returns>返回已经创建并且已经添加到对象列列表中的列对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的列。</exception>
            <remarks>列的 Caption、Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.AddColumn(System.String,System.Data.DbType,System.Object)">
            <summary>
            添加一个新的列。
            </summary>
            <param name="name">列名称。名称比较不区分大小写。</param>
            <param name="type">列数据类型。</param>
            <param name="defaultValue">列的默认值。可以是空引用，在内部自动转换为 System.DBNull.Value。</param>
            <returns>返回已经创建并且已经添加到对象列列表中的列对象引用。</returns>
            <exception cref="T:System.ArgumentNullException">name 为空引用或者空字符串。</exception>
            <exception cref="T:System.ArgumentException">对象已经存在相应名称的列。</exception>
            <remarks>列的 Caption、Expression 设置为 name 值。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.RemoveColumn(System.String)">
            <summary>
            移除一个列。
            </summary>
            <param name="name">要移除的列名称。</param>
            <returns>成功被移除的列。</returns>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.RemoveColumn(System.Int32)">
            <summary>
            移除一个列。
            </summary>
            <param name="index">要移除的列索引。</param>
            <returns>成功被移除的列。</returns>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.RemoveColumn(EAS.Data.ORM.Column)">
            <summary>
            移除一个列。
            </summary>
            <param name="column">要移除的列。</param>
            <returns>成功被移除的列。</returns>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.ColumnCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="P:EAS.Data.ORM.ColumnCollection.Item(System.String)">
            <summary>
            根据列名获取 Colunm 对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ColumnCollection.Item(EAS.Data.ORM.Column)">
            <summary>
            获取 Colunm 对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.ColumnCollection.Table">
            <summary>
            获取或设置实体集合所在的表
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.QueryLanguage">
            <summary>
            查询语句规范抽象类。
            </summary>
            <remarks>
            为Linq提供者程序提供多同数据查询语句的实现规范。
            </remarks>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.Quote(System.String)">
            <summary>
            获取名称(表名、字段)的引用。
            </summary>
            <param name="name">名称。</param>
            <returns>名称引用表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.IsScalar(System.Type)">
            <summary>
            判断CLR类型是否为标量类型。
            </summary>
            <param name="type">CLR类型</param>
            <returns>标量类型返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.CanBeColumn(System.Linq.Expressions.Expression)">
            <summary>
            判断表达式是否可以转换为SELECT 的列。
            </summary>
            <param name="expression">表达式。</param>
            <returns>可以返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.Translate(System.Linq.Expressions.Expression)">
            <summary>
            翻译表达式，确省实现。
            </summary>
            <param name="expression">表达式。</param>
            <returns>目标表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.InternalTranslate(System.Linq.Expressions.Expression)">
            <summary>
            翻译表达式，内部使用。by 魏琼东 2012-12-13
            </summary>
            <param name="expression">表达式。</param>
            <returns>目标表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.Format(System.Linq.Expressions.Expression)">
            <summary>
            转换查询表达式为数据库查询语言-SQL。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式对应的SQL文本。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.Parameterize(System.Linq.Expressions.Expression)">
            <summary>
            参数化表达式。
            </summary>
            <param name="expression">表达式。</param>
            <returns>目标表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.GetCountText(System.String)">
            <summary>
            获取命令字符串的Count表达式。
            </summary>
            <param name="commandText">命令文本。</param>
        </member>
        <member name="M:EAS.Data.Linq.QueryLanguage.GetSkipText(System.String,System.Int32,System.Int32)">
            <summary>
            获取命令字符串的分页表达式。
            </summary>
            <param name="commandText">命令文本。</param>
            <param name="skip">skip。</param>
            <param name="take">top。</param>
        </member>
        <member name="T:EAS.Data.Linq.ImplicitMapping">
            <summary>
            一个简单的查询，试图推断从命名约定的映射中的映射。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.ImplicitMapping.GetTableName(System.Type)">
            <summary>
            获取表名。
            </summary>
            <param name="rowType"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.SAAS.TenantContext.DefaultContainer">
            <summary>
            默认容器。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantContext.TenantContainer">
            <summary>
            多租户容器。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IGetValue2">
            <summary>
            定义数据库记录的数据据读取接口。	
            </summary>
            <remarks>
            该接口为数据对象，数据表对其数据读取提借接口。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.IGetValue2.GetValue``1(System.UInt16)">
            <summary>
            返回指定字段的值。
            </summary>
            <typeparam name="TValue">类型信息。</typeparam>
            <param name="sequenceNo">列序号。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:EAS.Data.ORM.IGetValue2.GetValue``1(System.String)">
            <summary>
            返回指定字段的值。
            </summary>
            <typeparam name="TValue">类型信息。</typeparam>
            <param name="name">列名称。</param>
            <returns>列的值。</returns>
        </member>
        <member name="T:EAS.Data.MatrixExtensions">
            <summary>
            有关于Matrix的扩展方法。
            </summary>
        </member>
        <member name="M:EAS.Data.MatrixExtensions.ToDataTable(EAS.Data.Matrix)">
            <summary>
            Matrix转换为DataTable。
            </summary>
            <param name="matrix">数据矩阵。</param>
            <returns>DataTable。</returns>
        </member>
        <member name="M:EAS.Data.MatrixExtensions.ToMatrix(System.Data.DataTable)">
            <summary>
            DataTable转换为Matrix。
            </summary>
            <param name="dataTable">DataTable。</param>
            <returns>Matrix。</returns>
        </member>
        <member name="M:EAS.Data.MatrixExtensions.ToMatrix``1(System.Collections.Generic.List{``0})">
            <summary>
            泛型集合转换为Matrix。
            </summary>
            <param name="list">泛型集合。</param>
            <returns>Matrix。</returns>
        </member>
        <member name="M:EAS.Data.MatrixExtensions.ToList``1(EAS.Data.Matrix)">
            <summary>
            Matrix转换为泛型集合。
            </summary>
            <param name="matrix">数据矩阵。</param>
            <returns>泛型集合。</returns>
        </member>
        <member name="T:EAS.Data.Matrix">
            <summary>
            一个简单高效的二维数据矩阵。
            </summary>
            <remarks>
            数据元只能为简单类型，即CLR中所集成的简单数据类型，为了加快在通信过程之中的序列化速度与大小，目前采用了基于列存储的设计。
            </remarks>
        </member>
        <member name="M:EAS.Data.Matrix.#ctor">
            <summary>
            初始化Matrix对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Matrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化Matrix对象实例。
            </summary>
            <param name="info">用序列化数据初始化 Matrix 类的新实例。</param>
            <param name="context">一个 System.Runtime.Serialization.SerializationInfo 对象。</param>
        </member>
        <member name="M:EAS.Data.Matrix.GetValue(System.Int32,System.Int32)">
            <summary>
            获取指定单元格的值。
            </summary>
            <param name="rowIndex">行索引。</param>
            <param name="columnIndex">列索引。</param>
        </member>
        <member name="M:EAS.Data.Matrix.GetMatrixReader">
            <summary>
            获取矩阵的读写器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Matrix.Load(System.Data.IDataReader)">
            <summary>
            使用IDataReader填充Matrix对象。
            </summary>
            <param name="reader">IDataReader对象。</param>
        </member>
        <member name="M:EAS.Data.Matrix.Load(System.Data.DataTable)">
            <summary>
            使用dataTable填充Matrix对象。
            </summary>
            <param name="dataTable">DataTable对象。</param>
        </member>
        <member name="M:EAS.Data.Matrix.Load``1(System.Collections.Generic.List{``0})">
            <summary>
            使用泛型集合填充Matrix对象。
            </summary>
            <param name="list">泛型集合。</param>
        </member>
        <member name="M:EAS.Data.Matrix.ReadXml(System.Xml.XmlReader)">
            <summary>
            从对象的XML表示形式生成该对象。
            </summary>
            <param name="reader">对象从中进行反序列化的 System.Xml.XmlReader 流。</param>
        </member>
        <member name="M:EAS.Data.Matrix.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将对象转换为其XML表示形式
            </summary>
            <param name="writer">对象要序列化为的 System.Xml.XmlWriter 流。</param>
        </member>
        <member name="M:EAS.Data.Matrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Matrix.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Matrix.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="M:EAS.Data.Matrix.OnDeserialization(System.Object)">
            <summary>
            反序列化之后执行。
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:EAS.Data.Matrix.Columns">
            <summary>
            列集合。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.Rows">
            <summary>
            行集合。
            </summary>
        </member>
        <member name="T:EAS.Data.Matrix.MatrixColumn">
            <summary>
            矩阵列。
            </summary>
        </member>
        <member name="F:EAS.Data.Matrix.MatrixColumn.m_Items">
            <summary>
            存存储。
            </summary>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.#ctor">
            <summary>
            初始化MatrixColumn对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.Add(System.Object)">
            <summary>
            添加值。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.Initialize(System.Int32)">
            <summary>
            初始化。
            </summary>
            <param name="count">总记录。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.ReadXml(System.Xml.XmlReader)">
            <summary>
            从对象的XML表示形式生成该对象。
            </summary>
            <param name="reader">对象从中进行反序列化的 System.Xml.XmlReader 流。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将对象转换为其XML表示形式
            </summary>
            <param name="writer">对象要序列化为的 System.Xml.XmlWriter 流。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixColumn.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixColumn.Index">
            <summary>
            索引顺序。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixColumn.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixColumn.Default">
            <summary>
            默认值。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixColumn.Type">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixColumn.TypeInfo">
            <summary>
            类型文本。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixColumn.Item(System.Int32)">
            <summary>
            获取或设置指定行的值。
            </summary>
            <param name="index">行索引。</param>
            <returns>值。</returns>
        </member>
        <member name="T:EAS.Data.Matrix.MatrixRow">
            <summary>
            矩阵行。
            </summary>
        </member>
        <member name="F:EAS.Data.Matrix.MatrixRow.m_Index">
            <summary>
            行索引。
            </summary>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixRow.#ctor">
            <summary>
            初始化MatrixRow对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixRow.InternalSetMatrix(EAS.Data.Matrix)">
            <summary>
            设置矩阵对象。
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixRow.ReadXml(System.Xml.XmlReader)">
            <summary>
            从对象的XML表示形式生成该对象。
            </summary>
            <param name="reader">对象从中进行反序列化的 System.Xml.XmlReader 流。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixRow.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将对象转换为其XML表示形式
            </summary>
            <param name="writer">对象要序列化为的 System.Xml.XmlWriter 流。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixRow.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Matrix.MatrixRow.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixRow.Index">
            <summary>
            索引顺序。
            </summary>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixRow.Item(System.Int32)">
            <summary>
            获取指定单元格的值。
            </summary>
            <param name="index">列索引。</param>
            <returns>单位格的值。</returns>
        </member>
        <member name="P:EAS.Data.Matrix.MatrixRow.Matrix">
            <summary>
            获取矩阵对象。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.PartialEvaluator">
            <summary>
            表达式计算/分部。
            </summary>
            <remarks>
            重写一个表达式树，使局部隔离的子表达式进行评估，并转换成ConstantExpression节点。
            </remarks>
        </member>
        <!-- 对于成员“M:EAS.Data.Linq.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:EAS.Data.Linq.PartialEvaluator.Eval(System.Linq.Expressions.Expression)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:EAS.Data.Linq.PartialEvaluator.SubtreeEvaluator”忽略有格式错误的 XML 注释 -->
        <member name="T:EAS.Data.Linq.PartialEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DeclaredAliasGatherer">
            <summary>
             returns the set of all aliases produced by a query source
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.CacheResult">
            <summary>
            缓存结果。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheResult.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheResult.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.Caching.CacheResult.Data">
            <summary>
            结果。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheResult.Reload">
            <summary>
            是否重新读取全部。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheResult.LMTime">
            <summary>
            最后更新时间。
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.CacheReader">
            <summary>
            缓存读写器。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.GetCache">
            <summary>
            获取缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.UpdateCache">
            <summary>
            更新缓存。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.LoadCache">
            <summary>
            加载缓存。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.LoadEmptyCache">
            <summary>
            读空缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.CreateCacheRoot">
            <summary>
            创建缓存根对象。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.MergeCache(System.Object,System.Object)">
            <summary>
            合并缓存。
            </summary>
            <param name="sourceData">本地数据。</param>
            <param name="updateData">更新数据。</param>
            <returns>合并后的数据。</returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.GetCache(System.String)">
            <summary>
            获取缓存。
            </summary>
            <param name="fileName">文件名。</param>
            <returns>数据。</returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.SetCache(System.String)">
            <summary>
            保存缓存。
            </summary>
            <param name="fileName">文件名。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.GetPrimaryKeys(EAS.Data.ORM.IDataEntity)">
            <summary>
            求主键。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheReader.GetCacheIndex(System.Reflection.PropertyInfo)">
            <summary>
            根据属性求出索引。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Caching.CacheReader.Key">
            <summary>
            缓存Key。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheReader.Data">
            <summary>
            缓存数据。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheReader.Indexs">
            <summary>
            缓存索引。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.SqlClientProvider">
            <summary>
            SqlClient数据库访问提供者，可以支持SQL2000/SQL2005/SQL2008数据库。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.SqlClientDbProvider">
            <summary>
            SqlClient数据库访问提供者，可以支持SQL2000/SQL2005/SQL2008数据库。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.SqlClientDbProvider.#ctor">
            <summary>
            初始化SqlClientDbProvider类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.SqlClientDbProvider.#ctor(System.String)">
            <summary>
            使用给定的连接字符串初始化SqlClientDbProvider的新实例。
            </summary>
            <param name="connectionString">数据库连接字符串。</param>
        </member>
        <member name="M:EAS.Data.Access.SqlClientDbProvider.InternalFillDataSet(System.Data.DataSet,System.Data.IDbCommand)">
            <summary>
            重写，填充数据集，把数据查询结果填充到某一数据集。
            </summary>
            <param name="ds">要填充的数据集。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.SqlClientDbProvider.ToIDbDataParameter(EAS.Data.Access.Parameter,System.Data.IDbCommand)">
            <summary>
            转换通用参数为数据库相关参数。
            </summary>
            <param name="parameter">通用参数。</param>
            <param name="cmd">执行填充的System.Data.IDbCommand。</param>
        </member>
        <member name="M:EAS.Data.Access.SqlClientDbProvider.Execute(EAS.Data.Access.DbCommand)">
            <summary>
            执行指定的非查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装。</param>		
            <returns>返回命令影响的行数。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。</remarks>
        </member>
        <member name="M:EAS.Data.Access.SqlClientDbProvider.Query(EAS.Data.Access.DbCommand)">
            <summary>
            执行给定的数据库查询命令。
            </summary>
            <param name="command">要执行的数据库访问命令。该命令必须是有效的数据库访问参数的封装，可能是select语句，也可能是存储过程名称。</param>
            <returns>返回查询到的数据结果。</returns>
            <exception cref="T:System.InvalidOperationException">还没有设置数据访问环境。</exception>
            <exception cref="T:System.ArgumentNullException">command 是空引用或者命令字符串空。</exception>
            <remarks>
            如果命令执行时数据访问环境还没有打开，则内部会自动打开数据访问环境，当执行完毕后自动关闭访问环境；如果命令执行时数据访问环境已经打开，则命令执行完毕后该方法不会关闭访问环境，而是保持其打开状态。
            如果要求的结果为DataReader，则必须由调用方在外部打开数据访问环境，当DataReader执行完毕后再关闭访问环境；否则该方法将自动打开访问环境，并在DataReader返回前自动关闭访问环境，这样会导致在外部无法使用（因为该DataReader所依赖的数据连接已经关闭）DataReader读取数据。
            </remarks>
        </member>
        <member name="F:EAS.Data.Access.SqlClientDbProvider.m_Caches">
            <summary>
            Sql语句纠正缓冲。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.SqlClientDbProvider.CommandCache">
            <summary>
            是否使用命令缓存，默认不使用。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.SqlClientProvider.#ctor">
            <summary>
            初始化 SqlClientProvider 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.SqlClientProvider.#ctor(System.String)">
            <summary>
            使用给定的连接字符串初始化SqlClientProvider的新实例。
            </summary>
            <param name="connectionString">数据库连接字符串。</param>
        </member>
        <member name="T:EAS.Data.ORM.TableCollection">
            <summary>
            定义分布式数据库表的集合。
            </summary>
            <remarks>
            集合中的元素为 EAS.Data.ORM.Table 对象，此类完成多表数据存储，多表数据事务更新。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.#ctor">
            <summary>
            初始化 TableCollection 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.#ctor(System.Int32)">
            <summary>
            使用集合的初始容量初始化 TableCollection 类的新实例。
            </summary>
            <param name="capacity">集合的初始容量。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.Add(EAS.Data.ORM.ITable)">
            <summary>
            向集合中添加一个表。
            </summary>
            <param name="table">要添加的数据表。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.RemoveAt(System.Int32)">
            <summary>
            删除表集合中的一个数据表。
            </summary>
            <param name="index">要删除的数据表索引。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.Remove(EAS.Data.ORM.ITable)">
            <summary>
            删除集合中的一个数据表。
            </summary>
            <param name="table">要删除的数据表。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.Contains(EAS.Data.ORM.ITable)">
            <summary>
            判断表集合中是否存在某个数据表。
            </summary> 
            <param name="table">要判定的数据表。</param>
            <returns>存在则返回 true，不存在刚返回 false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.Clear">
            <summary>
            清空表集合。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.IndexOf(EAS.Data.ORM.ITable)">
            <summary>
            获取指定的表在集合中的索引位置。
            </summary>
            <param name="table">要确定位置的表对象引用。</param>
            <returns>返回表在集合中的从 0 开始的索引位置。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.GetITable(System.Int32)">
            <summary>
            获取指定索引位置处的表对象。
            </summary>
            <param name="index">表索引。</param>
            <returns>返回在对象表表表中指定位置处的表对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            从目标数组的指定索引处开始，将一定范围内的 EntityCollection 中的对象复制到数组中。
            </summary>
            <param name="array">目标数组。</param>
            <param name="index">数组中的起始索引位置。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.GetEnumerator">
            <summary>
            返回 EntityCollection 的一个枚举数。
            </summary>
            <returns>System.Collections.IEnumerator 对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.Insert(System.Int32,System.Object)">
            <summary>
            在 IList 的指定位置处插入一项。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 value。</param>
            <param name="value">要插入 IList 中的 Object。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            从 IList 移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从 IList 移除的 Object。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            确定 IList 是否包含特定的值。
            </summary>
            <param name="value">要在 IList 中查找的 Object。</param>
            <returns>如果在 IList 中找到 Object，则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            确定 IList 中特定项的索引。
            </summary>
            <param name="value">要在 IList 中查找的 Object。</param>
            <returns>如果在表表中找到，则为 value 的索引；否则为 -1。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            将一项添加到 IList。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.Item(System.Int32)">
            <summary>
            获取指定索引位置处的表对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.Item(EAS.Data.ORM.ITable)">
            <summary>
            获取表对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.IsSynchronized">
            <summary>
            获取一个值，该值指示当前对 EntityCollection 的访问是否同步。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.Count">
            <summary>
            获取 EntityCollection 中的 IEntity 的数目。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.SyncRoot">
            <summary>
            获取可以用于同步对 EntityCollection 访问的对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.IsReadOnly">
            <summary>
            获取一个指示 IList 是否为只读的值。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取指定索引位置处的对象。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableCollection.IsFixedSize">
            <summary>
            获取一个值，该值指示 IList 是否具有固定大小。
            </summary>
        </member>
        <!-- 对于成员“T:EAS.Data.Linq.RootQueryableFinder”忽略有格式错误的 XML 注释 -->
        <member name="T:EAS.Data.Linq.QueryCompiler">
            <summary>
            查询编译器，创建一个可重复使用的，参数化表示的查询缓存的执行计划。
            </summary>
            <remarks>
            Creates a reusable, parameterized representation of a query that caches the execution plan。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.RelationshipBinder">
            <summary>
            Translates accesses to relationship members into projections or joins
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.Parameterizer">
            <summary>
            Converts user arguments into named-value parameters
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.QueryCommand`1">
            <summary>
            查询命令。
            </summary>
            <typeparam name="T">命令类型。</typeparam>
        </member>
        <member name="T:EAS.Data.IReportService">
            <summary>
            报表服务。
            </summary>
        </member>
        <member name="M:EAS.Data.IReportService.GetXaml(EAS.Data.RdlXamlRoot,System.Collections.IList)">
            <summary>
            生成报表Xaml定义。
            </summary>
            <param name="request">包含报表名称和数据类型的请求信息。</param>
            <param name="reportData">报表数据。</param>
            <returns>报表Xaml定义。</returns>
        </member>
        <member name="M:EAS.Data.IReportService.GetXaml(EAS.Data.RdlXamlRoot)">
            <summary>
            生成报表Xaml定义。
            </summary>
            <param name="request">包含报表名称和数据类型的请求信息。</param>
            <returns>报表Xaml定义。</returns>
        </member>
        <member name="M:EAS.Data.IReportService.GetXaml(EAS.Data.RdlXamlRoot,System.Collections.Generic.List{System.Object})">
            <summary>
            生成报表Xaml定义。
            </summary>
            <param name="request">包含报表名称和及服务调用的请求信息。</param>
            <param name="args">调用参数。</param>
            <returns>报表Xaml定义。</returns>
        </member>
        <member name="T:EAS.InternalExpression.ExpressionNode">
            <summary>
            表达式的节点(如操作数或运算符)
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.#ctor(System.String)">
            <summary>
            构造节点实例
            </summary>
            <param name="value">操作数或运算符</param>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.ParseNodeType(System.String)">
            <summary>
            解析节点类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.GetNodeTypePRI(EAS.InternalExpression.ExpressionNodeType)">
            <summary>
            获取各节点类型的优先级
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.IsNumerics(System.String)">
            <summary>
            判断某个操作数是否是数值
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.IsVariable(System.String)">
            <summary>
            判断某个操作数是否为变量。
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.NeedMoreOperator(System.Char)">
            <summary>
            判断某个字符后是否需要更多的操作符
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.IsCongener(System.Char,System.Char)">
            <summary>
            判断两个字符是否是同一类
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.IsWhileSpace(System.Char)">
            <summary>
            判断某个字符是否是空白字符
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionNode.IsUnitaryNode(EAS.InternalExpression.ExpressionNodeType)">
            <summary>
            判断是否是一元操作符节点
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNode.Numerics">
            <summary>
            操作数的正则表达式
            </summary>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionNode.Value">
            <summary>
            返回当前节点的操作数
            </summary>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionNode.Type">
            <summary>
            返回当前节点的类型
            </summary>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionNode.PRI">
            <summary>
            返回当前节点的优先级
            </summary>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionNode.Numeric">
            <summary>
            返回此节点的数值
            </summary>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionNode.UnitaryNode">
            <summary>
            设置或返回与当前节点相关联的一元操作符节点
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.TableAttribute">
            <summary>
            数据表映射属性。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.TableAttribute.#ctor(System.String)">
            <summary>
            使用数据表名初始化ableMapping属性。
            </summary>
            <param name="name">数据库表名。</param>
        </member>
        <member name="M:EAS.Data.ORM.TableAttribute.#ctor(System.String,System.String)">
            <summary>
            使用数据表名和描述信息初始化ableMapping属性。
            </summary>
            <param name="name">数据库表名。</param>
            <param name="description">描述信息。</param>
        </member>
        <member name="P:EAS.Data.ORM.TableAttribute.Name">
            <summary>
            数据库表名。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.TableAttribute.Description">
            <summary>
            描述信息。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IndexAttribute">
            <summary>
            索引器属性。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.IgnoreConcurrencyAttribute">
            <summary>
            忽略一致性错误。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.DataTableConvert">
            <summary>
            数据表对象转换器。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataTableConvert.ToDataTable(EAS.Data.ORM.ITable)">
            <summary>
            根据表对象生成数据表。
            </summary>
            <param name="table">数据表对象。</param>
            <returns>数据表。</returns>
        </member>
        <member name="T:EAS.Data.ORM.DynamicEntity">
            <summary>
            动态实体方法。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicCreateEntity(System.Type)">
            <summary>
            生成动态实体表达式。
            </summary>
            <param name="dataType">实体类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicCreateEntity(System.Type,System.Collections.Generic.IList{EAS.Data.ORM.Column})">
            <summary>
            生成动态实体表达式。
            </summary>
            <param name="dataType">实体类型。</param>
            <param name="coumns">列集合。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicCreate``1(System.Collections.Generic.List{EAS.Data.ORM.Column})">
            <summary>
            生成动态实体表达式/DataAccessor扩展方法使用。
            </summary>
            <param name="coumns">列集合。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicSerialize(System.Type,EAS.Data.ORM.MappingMetaData)">
            <summary>
            生成序列化方法。
            </summary>
            <param name="dataType">实体类型。</param>
            <param name="mmd">实体元数据。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicDeserialize(System.Type,EAS.Data.ORM.MappingMetaData)">
            <summary>
            生成反序列化方法。
            </summary>
            <param name="dataType">实体类型。</param>
            <param name="mmd">实体元数据。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicSerializeEx(System.Type,EAS.Data.ORM.MappingMetaData)">
            <summary>
            生成序列化方法。
            </summary>
            <param name="dataType">实体类型。</param>
            <param name="mmd">实体元数据。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.DynamicDeserializeEx(System.Type,EAS.Data.ORM.MappingMetaData)">
            <summary>
            生成反序列化方法。
            </summary>
            <param name="dataType">实体类型。</param>
            <param name="mmd">实体元数据。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.CheckValue(System.Object,System.Type)">
            <summary>
            检查对象值及类型。
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.IsNullableType(System.Type)">
            <summary>
            是否为可空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.DynamicEntity.GetNonNullableType(System.Type)">
            <summary>
            求非空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.QueryPolicy">
            <summary>
            定义查询策略。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.QueryPolicy.IsIncluded(System.Reflection.MemberInfo)">
            <summary>
            Determines if a relationship property is to be included in the results of the query
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryPolicy.IsDeferLoaded(System.Reflection.MemberInfo)">
            <summary>
            Determines if a relationship property is included, but the query for the related data is 
            deferred until the property is first accessed.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryPolicy.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Provides policy specific query translations.  This is where choices about inclusion of related objects and how
            heirarchies are materialized affect the definition of the queries.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.QueryPolicy.BuildExecutionPlan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Converts a query into an execution plan.  The plan is an function that executes the query and builds the
            resulting objects.
            </summary>
            <param name="projection"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Linq.QueryPolicy.Mapping">
            <summary>
            The mapping related to the policy.
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionWriter">
            <summary>
            DB表达式书写器。
            </summary>
            <remarks>
            Writes out an expression tree (including DbExpression nodes) in a C#-ish syntax。
            </remarks>
        </member>
        <member name="T:EAS.Data.Linq.ExpressionParser`1">
            <summary>
            表达式解析。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.Parse(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},EAS.Data.ORM.MappingMetaData)">
            <summary>
            解析表达式。
            </summary>
            <param name="expr"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.Parse(System.Linq.Expressions.Expression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            解析表达式。
            </summary>
            <param name="expr"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.ParseBinary(System.Linq.Expressions.BinaryExpression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            解析B++树
            </summary>
            <param name="e"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.ParseMethodCall(System.Linq.Expressions.MethodCallExpression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            解析 IN 、Like
            </summary>
            <param name="e"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.ParseInCall(System.Linq.Expressions.MethodCallExpression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            IN (字查询)
            </summary>
            <param name="e"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.ParseInCall2(System.Linq.Expressions.MethodCallExpression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            IN (字查询),Contains
            </summary>
            <param name="e"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.ParseInCall3(System.Linq.Expressions.MethodCallExpression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            IN (字查询),Contains
            </summary>
            <param name="e"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.ParseLikeCall(System.Linq.Expressions.MethodCallExpression,EAS.Data.ORM.ElementType,EAS.Data.ORM.MappingMetaData)">
            <summary>
            Like 模糊匹配
            </summary>
            <param name="e"></param>
            <param name="eType"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            求成员表达式。
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.GetClause(System.Linq.Expressions.BinaryExpression,EAS.Data.ORM.ElementType,EAS.Data.ORM.MappingMetaData)">
            <summary>
            获得条件。
            </summary>
            <param name="e"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.GetColumnName(System.Linq.Expressions.MemberExpression,EAS.Data.ORM.MappingMetaData)">
            <summary>
            取列名。
            </summary>
            <param name="expr"></param>
            <param name="mmd"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.GetColumnName(System.String,EAS.Data.ORM.MappingMetaData)">
            <summary>
            取得列名。
            </summary>
            <param name="fieldName">字段名。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.GetRightValue(System.Linq.Expressions.Expression)">
            <summary>
            取表达式右边的值。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Linq.ExpressionParser`1.TestRightValue(System.Linq.Expressions.Expression)">
            <summary>
            测试右表达式是否为值。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.SAAS.MultiTenantInfo.Save">
            <summary>
            保存多租户配置信息。
            </summary>
        </member>
        <member name="M:EAS.SAAS.MultiTenantInfo.Load">
            <summary>
            读取多租户配置信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.SAAS.MultiTenantInfo.Items">
            <summary>
            租户配置集合。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.SerializeColumn">
            <summary>
            序列化列。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.SerializeColumn.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.ORM.SerializeColumn.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="P:EAS.Data.ORM.SerializeColumn.SerializeName">
            <summary>
            序列化名称。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.SerializeFiled.SerializeName">
            <summary>
            序列化名称。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.RefEntity">
            <summary>
            引用实体定义。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.RefEntity.#ctor">
            <summary>
            初始化RefEntity对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.RefEntity.#ctor(EAS.Data.ORM.RefEntityAttribute)">
            <summary>
            初始化RefEntity对象实例。
            </summary>
            <param name="refEntity">RefEntityAttribute对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.RefEntity.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            初始化RefEntity对象实例。
            </summary>
            <param name="refProperty">父实体主键。</param>
            <param name="caption">标题。</param>
            <param name="refType">引用实体类型。</param>
            <param name="refKey">引用实体主键类型。</param>
        </member>
        <member name="M:EAS.Data.ORM.RefEntity.#ctor(System.String,System.String,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            初始化RefEntity对象实例。
            </summary>
            <param name="refProperty">父实体主键。</param>
            <param name="caption">标题。</param>
            <param name="refType">引用实体类型。</param>
            <param name="refKey">引用实体主键类型。</param>
            <param name="cache">使用缓存。</param>        
            <param name="nullable">是否为可空引用。</param>
        </member>
        <member name="M:EAS.Data.ORM.RefEntity.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.RefProperty">
            <summary>
            引用属性。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.RefType">
            <summary>
            引用实体类型。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.RefKey">
            <summary>
            引用实体主键。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.Nullable">
            <summary>
            可空引用。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.Cache">
            <summary>
            是否缓存。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.RefEntity.Property">
            <summary>
            属性对象。
            </summary>
        </member>
        <member name="T:EAS.Data.ORM.DataEntityExtensions">
            <summary>
            DataEntity(数据实体扩展方法)。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.CopyTo``1(EAS.Data.ORM.IDataEntity{``0},EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            实体值复制、连同子对象和引用对象一并复制。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dataEntity">源实体。</param>
            <param name="target">目标实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.CopyTo(EAS.Data.ORM.IDataEntity,EAS.Data.ORM.IDataEntity)">
            <summary>
            实体值复制。
            </summary>
            <param name="dataEntity">源实体。</param>
            <param name="target">目标实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Read``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            从数据库读取/同步数据对象的值。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Refresh``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            从数据库读取/同步数据对象的值。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ReadAll``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            从数据库读取/同步数据对象的值、包括相关联的子对象。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ExistsInDb``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            判断数据实体是否在数据库中存在。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Insert``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            向数据库插入当前数据实体。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            根据当前数据对象的值向数据库插入一条数据库记录。如果没有为对象添加任何属性，则不会产生任何效果。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Update``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            更新数据实体值到数据库。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            根据当前数据对象的值向数据库插入一条数据库记录。如果没有为对象添加任何属性，则不会产生任何效果。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Save``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            保存数据实体值到数据库。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            根据当前数据对象的主键值判断是向数据库插入一条新记录还是更新现有记录。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Delete``1(EAS.Data.ORM.IDataEntity{``0})">
            <summary>
            从数据库中删除当前数据对象（对应的数据库记录）。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            删除后仍然可以使用 Save 方法将对象再次保存到数据库。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Read(EAS.Data.ORM.IDataEntity)">
            <summary>
            从数据库读取/同步数据对象的值。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Refresh(EAS.Data.ORM.IDataEntity)">
            <summary>
            从数据库读取/同步数据对象的值。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ExistsInDb(EAS.Data.ORM.IDataEntity)">
            <summary>
            判断数据实体是否在数据库中存在。
            </summary>
            <param name="dataEntity">数据实体。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Insert(EAS.Data.ORM.IDataEntity)">
            <summary>
            向数据库插入当前数据实体。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            根据当前数据对象的值向数据库插入一条数据库记录。如果没有为对象添加任何属性，则不会产生任何效果。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Update(EAS.Data.ORM.IDataEntity)">
            <summary>
            更新数据实体值到数据库。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            根据当前数据对象的值向数据库插入一条数据库记录。如果没有为对象添加任何属性，则不会产生任何效果。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Save(EAS.Data.ORM.IDataEntity)">
            <summary>
            保存数据实体值到数据库。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            根据当前数据对象的主键值判断是向数据库插入一条新记录还是更新现有记录。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Delete(EAS.Data.ORM.IDataEntity)">
            <summary>
            从数据库中删除当前数据对象（对应的数据库记录）。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <remarks>
            删除后仍然可以使用 Save 方法将对象再次保存到数据库。
            </remarks>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.GetColumnMetaData(System.Type)">
            <summary>
            获取指定类型的列元数据。
            </summary>
            <param name="dataType">列定义集合。</param>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Select``1(EAS.Data.ORM.DataEntity{``0})">
             <summary>
             实体查询。
             </summary>
            <typeparam name="T">实体类型。</typeparam>
             <param name="dataEntity">数据实体。</param>
             <returns>符合条件的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Select``1(EAS.Data.ORM.DataEntity{``0},EAS.Data.ORM.Condition)">
            <summary>
            实体查询。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <param name="condition">数据查询条件。</param>
            <returns>符合条件的数据对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Select``1(EAS.Data.ORM.DataEntity{``0},System.Int32,System.Int32)">
            <summary>
            实体查询。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Select``1(EAS.Data.ORM.DataEntity{``0},EAS.Data.ORM.Condition,System.Int32,System.Int32)">
            <summary>
            实体查询。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <param name="condition">数据查询条件。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Select``1(EAS.Data.ORM.DataEntity{``0},EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String})">
            <summary>
            实体查询。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Select``1(EAS.Data.ORM.DataEntity{``0},EAS.Data.ORM.Condition,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            实体查询。
            </summary>
            <param name="dataEntity">数据实体。</param>
            <param name="condition">数据查询条件。</param>
            <param name="propertys">要选择的属性集合，为空则取所有与数据库映射的属性。</param>
            <param name="skip">跳过开始的N条记录,小于等于0则忽略。</param>
            <param name="count">要返回的记录总数,小于等于0则忽略。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.Compare(EAS.Data.ORM.IDataEntity,EAS.Data.ORM.IDataEntity,System.Boolean)">
            <summary>
            比较两个实体是否一致。
            </summary>
            <param name="Data1">实体1。</param>
            <param name="Data2">实体2。</param>
            <param name="complete">是否完整比对所有属性，默认为true。</param>
            <returns>数据一致返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            实体集合转DataTable。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataList">实体集合。</param>
            <returns>DataTable对象。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            DataTable转实体集合。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataTable">DataTable对象。</param>
            <returns>实体集合。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ToDataEntity``1(System.Data.IDataReader)">
            <summary>
            IDataReader转实体对象。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataReader">IDataReader对象。</param>
            <returns>实体集合。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ToList``1(System.Data.IDataReader)">
            <summary>
            IDataReader转实体集合。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataReader">IDataReader对象。</param>
            <returns>实体集合。</returns>
        </member>
        <member name="M:EAS.Data.ORM.DataEntityExtensions.ToList``1(System.Data.IDataReader,System.Int32)">
            <summary>
            IDataReader转实体集合。
            </summary>
            <typeparam name="T">数据实体类型。</typeparam>
            <param name="dataReader">IDataReader对象。</param>
            <param name="count">记录数。</param>
            <returns>实体集合。</returns>
        </member>
        <member name="T:EAS.Data.Linq.SubqueryRemover">
            <summary>
            Removes one or more SelectExpression's by rewriting the expression tree to not include them, promoting
            their from clause expressions and rewriting any column expressions that may have referenced them to now
            reference the underlying data directly.
            </summary>
        </member>
        <member name="T:EAS.InternalExpression.ExpressionNodeType">
            <summary>
            表达式节点的类型
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Plus">
            <summary>
            +
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Subtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.MultiPly">
            <summary>
            *
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.LParentheses">
            <summary>
            (
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.RParentheses">
            <summary>
            )
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Mod">
            <summary>
            % (求模,取余)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Power">
            <summary>
            ^ (次幂)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.BitwiseAnd">
            <summary>
            &amp; (按位与)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.BitwiseOr">
            <summary>
            | (按位或)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.And">
            <summary>
            &amp;&amp; (逻辑与)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Or">
            <summary>
            || (逻辑或)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Not">
            <summary>
            ! (逻辑非)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Equal">
            <summary>
            == (相等)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Unequal">
            <summary>
            != 或 &lt;&gt; (不等于)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.GT">
            <summary>
            &gt; (大于)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.LT">
            <summary>
            &lt; (小于)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.GTOrEqual">
            <summary>
            &gt;= (大于等于)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.LTOrEqual">
            <summary>
            &lt;= (小于等于)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.LShift">
            <summary>
            &lt;&lt; (左移位)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.RShift">
            <summary>
            &gt;&gt; (右移位)
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Numeric">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionNodeType.Variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.AddAction(System.Action)">
            <summary>
            向工作者线程注册写回方法。
            </summary>
            <param name="action">写回方法。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.AddWork(EAS.Data.Caching.CacheKey,System.Boolean)">
            <summary>
            向工作者线程注册发送请求。
            </summary>
            <param name="Key">缓存Key。</param>
            <param name="sync"></param>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.GetKey(System.Type)">
            <summary>
            求指定的缓存Key。
            </summary>
            <param name="TData"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.GetWriteBackTask">
            <summary>
            获取一个更新任务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.GetUpdateTask">
            <summary>
            获取一个更新任务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.GetLastDeleteTime(System.Type)">
            <summary>
            求删除记录时间。
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheWorkerThread.AddLastDeleteTime(System.Type,System.DateTime)">
            <summary>
            求删除记录时间。
            </summary>
            <param name="T"></param>
            <param name="nowTme"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.TypeHelper.GetTypeOfProperty(System.Object,System.String)">
            <summary>
            取得属性所在类型。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="propertyName">属性名称。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Data.ORM.TypeHelper.GetTypeOfProperty(System.Type,System.String)">
            <summary>
            取得属性所在类型。
            </summary>
            <param name="type">对象类型。</param>
            <param name="propertyName">属性名称。</param>
            <returns>类型。</returns>
        </member>
        <member name="T:EAS.Data.ORM.EntityCollection">
            <summary>
            定义数据库实体的集合。
            </summary>
            <remarks>可以通过该类的继承类的对象表达一个数据库表、视图(一个查询结果)的多行记录。</remarks>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.#ctor">
            <summary>
            初始化 EntityCollection 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.#ctor(EAS.Data.ORM.ITable)">
            <summary>
            使用Table初始化 EntityCollection 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.#ctor(System.Int32)">
            <summary>
            使用集合的初始容量初始化 EntityCollection 类的新实例。
            </summary>
            <param name="capacity">集合的初始容量。</param>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.Add(EAS.Data.ORM.IEntity)">
            <summary>
            向集合中添加一个 IEntity 对象。
            </summary>
            <param name="entity">要添加的 IEntity 对象。</param>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.IndexOf(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取指定主键的实体对象在集合中的索引位置。
            </summary>
            <param name="primaryKeys">主键集合。</param>
            <returns>集合中存在指定的实体，返回 IEntity 的索引，否则返回-1。</returns>
            <exception cref="T:System.ArgumentNullException">PrimaryKeys 主键集合为空引用。</exception>
            <exception cref="T:System.ArgumentException">PrimaryKeys 主键总数与实体主键总数不符合。</exception>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.IndexOf(System.Object[])">
            <summary>
            获取指定主键的实体对象在集合中的索引位置。
            </summary>
            <param name="PrimaryValues">主键值集合。</param>
            <returns>集合中存在指定的实体，返回 IEntity 的索引，否则返回-1。</returns>
            <exception cref="T:System.ArgumentNullException">PrimaryValues 主键集合为空引用。</exception>
            <exception cref="T:System.ArgumentException">PrimaryValues 主键总数与实体主键总数不符合。</exception>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.GetEntity(System.Object[])">
            <summary>
            获取集合指定主键值实体。
            </summary>
            <param name="PrimaryValues">主键值集合。</param>
            <returns>集合中存在指定的实体，返回IEntity对象，否则返回空值(Nothing)。</returns>
            <exception cref="T:System.ArgumentNullException">PrimaryValues 主键集合为空引用。</exception>
            <exception cref="T:System.ArgumentException">PrimaryValues 主键总数与实体主键总数不符合。</exception>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            返回表示用于绑定数据的每项上属性的 。
            </summary>
            <param name="listAccessors">要在集合中查找的可绑定的 PropertyDescriptor 对象的数组。</param>
            <returns>表示用于绑定数据的每项上属性的 PropertyDescriptorCollection。</returns>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            返回列表的名称。
            </summary>
            <param name="listAccessors">为其返回列表名称的 PropertyDescriptor 对象的数组</param>
            <returns>列表的名称。</returns>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="P:EAS.Data.ORM.EntityCollection.Table">
            <summary>
            获取或设置实体集合所在的表
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.EntityCollection.Item(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取指定键值位置处的 IEntity 对象。
            </summary>
        </member>
        <member name="F:EAS.Data.ORM.EntityCollection.PDCCacheHeleper.instance">
            <summary>
            内部私有成员，PDCCacheHeleper对象的唯一实例。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.EntityCollection.PDCCacheHeleper.#ctor">
            <summary>
            初始化 PDCCacheHeleper 对象实例。
            </summary>
        </member>
        <member name="P:EAS.Data.ORM.EntityCollection.PDCCacheHeleper.Instance">
            <summary>
            ClassProvider对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.SingletonProjectionRewriter">
            <summary>
            Rewrites nested singleton projection into server-side joins
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.ReferencedAliasGatherer">
            <summary>
             returns the set of all aliases produced by a query source
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.AggregateRewriter">
            <summary>
            Rewrite aggregate expressions, moving them into same select expression that has the group-by clause
            </summary>
        </member>
        <member name="T:EAS.Data.Caching.CacheIndex">
            <summary>
            缓存索引。
            </summary>
        </member>
        <member name="M:EAS.Data.Caching.CacheIndex.#ctor(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            初始化缓存索引对象。
            </summary>
            <param name="property">索引数据。</param>
            <param name="tData">数据类型。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheIndex.UpdateIndex(System.Collections.IList)">
            <summary>
            更新索引。
            </summary>
            <param name="m_Data">原始数据。</param>
        </member>
        <member name="M:EAS.Data.Caching.CacheIndex.GetItem``1(System.Object)">
            <summary>
            根据索引获取指定数据。
            </summary>
            <param name="indexValue">索引值。</param>
            <returns>
            缓存对象。
            </returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheIndex.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Caching.CacheIndex.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            求值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Data.Caching.CacheIndex.Property">
            <summary>
            索引。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheIndex.TData">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Caching.CacheIndex.Data">
            <summary>
            索引数据。
            </summary>
        </member>
        <member name="T:EAS.Data.Access.DbResultCollection">
            <summary>
            数据库查询结果集合。
            </summary>
            <remarks>集合中的元素为 EAS.Data.Access.DbResult 对象。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.#ctor">
            <summary>
            初始化 DbResultCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.#ctor(System.Int32)">
            <summary>
            使用给定的初始容量初始化 ParameterCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.#ctor(System.Collections.Generic.IEnumerable{EAS.Data.Access.DbResult})">
            <summary>
            使用给定的参数集合初始化 DbResultCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.Add(EAS.Data.Access.ResultType,System.Object)">
            <summary>
            向集合中添加一个新的 EAS.Data.Access.DbResult 对象。
            </summary>
            <param name="resultType">数据库查询返回结果类型。</param>
            <param name="value">数据库查询的返回结果。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.DbResult 对象引用。</returns>
            <remarks>如果集合中已经存在同名的结果对象，则返回已经存在的结果对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.Insert(System.Int32,EAS.Data.Access.ResultType,System.Object)">
            <summary>
            向集合中插入一个新的 EAS.Data.Access.DbResult 对象。
            </summary>
            <param name="index">在该位置插入 EAS.Data.Access.DbResult 对象。</param>
            <param name="resultType">数据库查询返回结果类型。</param>
            <param name="value">数据库查询的返回结果。</param>
            <returns>返回已经创建并已经添加到集合中的 EAS.Data.Access.DbResult 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.ToArray">
            <summary>
            将集合中的所有参数对象复制到一个EAS.Data.Access.DbResult数组中。
            </summary>
            <returns>返回 EAS.Data.Access.DbResult 数组。该数组包括了当前集合中的所有参数对象的引用。</returns>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.AddRange(EAS.Data.Access.DbResultCollection)">
            <summary>
            将 DbResultCollection 中的元素加到DbResultCollection的末尾。
            </summary>
            <param name="results">要附加的DbResultCollection对象。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Access.DbResultCollection.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="T:EAS.Data.Access.DbCommandCollection">
            <summary>
            数据库访问方法数据库命令参数。
            </summary>
            <remarks>集合中的元素为 DbCommand 对象。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.#ctor">
            <summary>
            初始化 DbCommandCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.#ctor(System.Int32)">
            <summary>
            使用给定的初始容量初始化 DbCommandCollection 对象的实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Add(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            向集合中添加一个新的 DbCommand 对象。
            </summary>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Add(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            向集合中添加一个新的 DbCommand 对象。
            </summary>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>		
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Add(System.String,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            向集合中添加一个新的 DbCommand 对象。
            </summary>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Add(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            向集合中添加一个新的 DbCommand 对象。
            </summary>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">命令执行需要的参数。</param>		
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Add(System.String,EAS.Data.Access.ResultType)">
            <summary>
            向集合中添加一个新的 DbCommand 对象。
            </summary>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Add(System.String)">
            <summary>
            向集合中添加一个新的 DbCommand 对象。
            </summary>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Insert(System.Int32,System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            向集合中插入一个新的 DbCommand 对象。
            </summary>
            <param name="index">在该位置插入 DbCommand 对象。</param>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Insert(System.Int32,System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            向集合中插入一个新的 DbCommand 对象。
            </summary>
            <param name="index">在该位置插入 DbCommand 对象。</param>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Insert(System.Int32,System.String,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            向集合中插入一个新的 DbCommand 对象。
            </summary>
            <param name="index">在该位置插入 DbCommand 对象。</param>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Insert(System.Int32,System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            向集合中插入一个新的 DbCommand 对象。
            </summary>
            <param name="index">在该位置插入 DbCommand 对象。</param>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Insert(System.Int32,System.String,EAS.Data.Access.ResultType)">
            <summary>
            向集合中插入一个新的 DbCommand 对象。
            </summary>
            <param name="index">在该位置插入 DbCommand 对象。</param>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Insert(System.Int32,System.String)">
            <summary>
            向集合中插入一个新的 DbCommand 对象。
            </summary>
            <param name="index">在该位置插入 DbCommand 对象。</param>
            <param name="commandString">要执行的命令语句。该语句必须是标准的数据库语句。</param>		
            <returns>返回已经创建并已经添加到集合中的 DbCommand 对象引用。</returns>
            <remarks>如果集合中已经存在同名的参数对象，则返回已经存在的参数对象的索引，而不是将新的对象添加到集合中。</remarks>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommandCollection.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="T:EAS.Data.Access.DbCommand">
            <summary>
            定义中间件统一的数据库访问命令，此命令用于完成数据库查询或数据库更改操作，命令中包含sql极相关参数。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor">
            <summary>
            初始化 DbCommand 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.String)">
            <summary>
            使用数据库操作命令语句 初始化 DbCommand 对象实例。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>		
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.String,EAS.Data.Access.ParameterCollection)">
            <summary>
            使用数据库操作命令语句、执行命令所需要的参数初始化 DbCommand 对象实例。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">命令执行需要的参数。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.String,EAS.Data.Access.ResultType)">
            <summary>
            使用数据库操作命令语句、命令类型、执行命令所需要的参数及返回类型初始化 DbCommand 对象实例。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection)">
            <summary>
            使用数据库操作命令语句、命令类型、执行命令所需要的参数初始化 DbCommand 对象实例。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.String,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            使用数据库操作命令语句、命令类型、执行命令所需要的参数及返回类型初始化 DbCommand 对象实例。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.String,System.Data.CommandType,EAS.Data.Access.ParameterCollection,EAS.Data.Access.ResultType)">
            <summary>
            使用数据库操作命令语句、命令类型、执行命令所需要的参数及返回类型初始化 DbCommand 对象实例。
            </summary>
            <param name="commandText">要执行的命令语句。该语句必须是标准的数据库语句。</param>
            <param name="commandType">要执行的命令的类型。</param>
            <param name="parameters">命令执行需要的参数。</param>
            <param name="resultType">调用方要求的返回结果的类型</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化对象。
            </summary>
            <param name="info">数据。</param>
            <param name="context">序列化上下文。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.Clone">
            <summary>
            克隆一个新的DbCommand对象。
            </summary>
            <returns> 新的DbCommand对象。</returns>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.System#ICloneable#Clone">
            <summary>
            克隆一个 DbCommand 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.Load(EAS.IO.BufferReader)">
            <summary>
            从指定的 BufferReader加载对象。
            </summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.WriteTo(EAS.IO.BufferWriter)">
            <summary>
            将对象保存到指定的BufferWriter。
            </summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="M:EAS.Data.Access.DbCommand.ToString">
            <summary>
            返回表示当前 DbCommand 的 System.String。
            </summary>
            <returns>System.String，表示当前的 DbCommand。</returns>
        </member>
        <member name="P:EAS.Data.Access.DbCommand.CommandText">
            <summary>
            获取或设置数据库访问命令的命令语句。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbCommand.CommandString">
            <summary>
            获取或设置数据库访问命令的命令语句。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbCommand.CommandType">
            <summary>
            获取或设置数据访问命令的的命令类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbCommand.Parameters">
            <summary>
            获取或设置数据访问命令的执行参数。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbCommand.ResultType">
            <summary>
            获取或设置数据访问命令的数据返回类型。
            </summary>
        </member>
        <member name="P:EAS.Data.Access.DbCommand.Rewriter">
            <summary>
            IDbProvider执行命令之前是否重写命。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.DataSet">
            <summary>
            帐套。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.Organization">
            <summary>
            组织机构。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.Type">
            <summary>
            提供者类型。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.Assembly">
            <summary>
            提供者程序集。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.Min">
            <summary>
            连接池下限。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.Max">
            <summary>
            连接池上限。
            </summary>
        </member>
        <member name="P:EAS.SAAS.TenantItem.ConnectionString">
            <summary>
            提供者类型。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData(System.Type)">
            <summary>
            创建元数据。
            </summary>
            <param name="type">类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData2(System.Type)">
            <summary>
            创建元数据/强制不使用DataEntity模式。
            </summary>
            <param name="type">类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.CreateMetaData2(System.Type)">
            <summary>
            生成非IDataEntity类型的元数据信息。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData``1">
            <summary>
            取数据表元数据。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData(EAS.Data.ORM.ITable)">
            <summary>
            取数据表元数据。
            </summary>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData2(EAS.Data.ORM.BaseDataEntity)">
            <summary>
            取实体元数据。
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData(EAS.Data.ORM.IEntity)">
            <summary>
            取实体元数据。
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Data.ORM.MetaDataHelper.GetTableMetaData(EAS.Data.ORM.IDataEntity)">
            <summary>
            取实体元数据。
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.TSqlLanguage">
            <summary>
            TSQL 查询语句规范。
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.TSqlLanguage.Quote(System.String)">
            <summary>
            获取名称(表名、字段)的引用。
            </summary>
            <param name="name">名称。</param>
            <returns>名称引用表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.TSqlLanguage.Translate(System.Linq.Expressions.Expression)">
            <summary>
            翻译表达式，确省实现。
            </summary>
            <param name="expression">表达式。</param>
            <returns>目标表达式。</returns>
        </member>
        <member name="M:EAS.Data.Linq.TSqlLanguage.Format(System.Linq.Expressions.Expression)">
            <summary>
            转换查询表达式为数据库查询语言-SQL。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式对应的SQL文本。</returns>
        </member>
        <member name="M:EAS.Data.Linq.TSqlLanguage.GetCountText(System.String)">
            <summary>
            获取命令字符串的Count表达式。
            </summary>
            <param name="commandText">命令文本。</param>
        </member>
        <member name="M:EAS.Data.Linq.TSqlLanguage.GetSkipText(System.String,System.Int32,System.Int32)">
            <summary>
            获取命令字符串的分页表达式。
            </summary>
            <param name="commandText">命令文本。</param>
            <param name="skip">skip。</param>
            <param name="take">top。</param>
        </member>
        <member name="T:EAS.Data.Linq.RedundantSubqueryRemover">
            <summary>
            Removes select expressions that don't add any additional semantic value
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.QueryBinder">
            <summary>
            Converts LINQ query operators to into custom DbExpression's
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.QueryBinder.BindLast(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.String,System.Boolean)">
            <summary>
            处理Last 魏琼东 2013-03-07
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="kind"></param>
            <param name="isRoot"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Data.Linq.OrderByRewriter">
            <summary>
            Moves order-bys to the outermost select if possible
            </summary>
        </member>
        <member name="M:EAS.Data.Linq.OrderByRewriter.PrependOrderings(System.Collections.Generic.IList{EAS.Data.Linq.OrderExpression})">
            <summary>
            Add a sequence of order expressions to an accumulated list, prepending so as
            to give precedence to the new expressions over any previous expressions
            </summary>
            <param name="newOrderings"></param>
        </member>
        <member name="M:EAS.Data.Linq.OrderByRewriter.RebindOrderings(System.Collections.Generic.IEnumerable{EAS.Data.Linq.OrderExpression},EAS.Data.Linq.TableAlias,System.Collections.Generic.HashSet{EAS.Data.Linq.TableAlias},System.Collections.Generic.IEnumerable{EAS.Data.Linq.ColumnDeclaration})">
            <summary>
            Rebind order expressions to reference a new alias and add to column declarations if necessary
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.DbExpressionComparer">
            <summary>
            DbExpression比较器。
            </summary>
        </member>
        <member name="T:EAS.Data.Linq.CompoundKey">
            <summary>
            组合关键字。
            </summary>
        </member>
        <member name="T:EAS.InternalExpression.ExpressionParser">
            <summary>
            表达式解析器
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionParser.#ctor(System.String)">
            <summary>
            构造表达式解析器
            </summary>
            <param name="expression">要分析的表达式,如"1+2+3+4"</param>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionParser._Expression">
            <summary>
            当前分析的表达式
            </summary>
        </member>
        <member name="F:EAS.InternalExpression.ExpressionParser._Position">
            <summary>
            当前读取的位置
            </summary>
        </member>
        <member name="M:EAS.InternalExpression.ExpressionParser.ReadNode">
            <summary>
            读取下一个表达式节点,如果读取失败则返回null
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionParser.Expression">
            <summary>
            返回当前分析的表达式
            </summary>
        </member>
        <member name="P:EAS.InternalExpression.ExpressionParser.Position">
            <summary>
            返回当前读取的位置
            </summary>
        </member>
        <member name="T:EAS.Data.StructDbExtensions">
            <summary>
            NoSQL扩展定义。
            </summary>
        </member>
        <member name="M:EAS.Data.StructDbExtensions.Update``1(EAS.Data.IStructDbProvider,``0,``0)">
            <summary>
            更新实体。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dbProvider">NoSQL连接。</param>
            <param name="newItem">新记录。</param>
            <param name="oldItem">原有记录。</param>
        </member>
        <member name="M:EAS.Data.StructDbExtensions.Delete``1(EAS.Data.IStructDbProvider,``0)">
            <summary>
            删除实体。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="dbProvider">NoSQL连接。</param>
            <param name="item">数据实体。</param>
        </member>
        <member name="T:EAS.Data.DataConcurrencyException">
            <summary>
            数据一致性异常。
            </summary>
        </member>
        <member name="M:EAS.Data.DataConcurrencyException.#ctor">
            <summary>
            初始化 DataConcurrencyException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Data.DataConcurrencyException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 DataConcurrencyException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:EAS.Data.DataConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 DataConcurrencyException 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Data.DataConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 DataConcurrencyException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
    </members>
</doc>
